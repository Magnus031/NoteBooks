{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"LeetCode/DP/DP/","title":"LeetCode\u8bb0\u5f55W1","text":""},{"location":"LeetCode/DP/DP/#1014","title":"10\u670814\u65e5","text":""},{"location":"LeetCode/DP/DP/#-hot100-279","title":"- [\u52a8\u6001\u89c4\u5212] Hot100 279","text":"<p>https://leetcode.cn/problems/perfect-squares/?envType=study-plan-v2&amp;envId=top-100-liked</p> <p> <pre><code>class Solution {\npublic:\n    int a[10000]={0};\n    int numSquares(int n) {\n        int m = (int)sqrt(n);\n        if(m*m == n)\n            return 1;\n        for(int i=1;i&lt;=m;i++){\n            a[i*i] = 1;\n        }\n        for(int i=2;i&lt;=n;i++){\n            m = (int)sqrt(i);\n            // i is square number;\n            if(m*m==i)\n                continue;\n            else{\n                // \u5f80\u524d\u904d\u5386 \u770b\u770b\u662f\u5426\u5b58\u5728\n                a[i] = 10000;\n                for(int j=m;j&gt;=1;j--){\n                    if(a[j*j]+a[i-j*j]&lt;a[i])\n                        a[i] = a[j*j]+a[i-j*j];\n                }\n            }\n        }\n        return a[n];\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/DP/DP/#_1","title":"\u9898\u89e3\uff1a","text":"<p>\u6211\u4eec\u8fd9\u91cc\u8003\u8651\u52a8\u6001\u89c4\u5212\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a\u4efb\u610f\u7ed9\u5b9a\u7684<code>n</code>,\u6211\u4eec\u90fd\u5b58\u5728\u591a\u79cd\u5bf9\u4e8e\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u7ec4\u5408\uff0c\u90a3\u4e48\u600e\u4e48\u6837\u624d\u80fd\u77e5\u9053\u6700\u5c0f\u7684\u7ec4\u5408\u6570\u5462\uff1f\u5c31\u9700\u8981\u52a8\u6001\u89c4\u5212\u4e86\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8868\uff0c\u5f53\u524d<code>a[i]</code>\u4e2d\u8bb0\u5f55\u7684\u5c31\u662f\u6700\u5c0f\u7684\u7ec4\u5408\u6570\u76ee\uff0c\u597d\u5904\u662f\u6211\u4eec\u4e4b\u540e\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\uff0c\u53ef\u4ee5\u514d\u53bb\u5f88\u591a\u7684\u91cd\u590d\u6b65\u9aa4\u3002\u7136\u540e\uff0c\u6211\u4eec\u5bf9\u4e8e\\([1,m]\\)\u7684\u6bcf\u4e2a\u8868\u5143\u7d20\u8fdb\u884c\u904d\u5386\u3002\u6709\u70b9\u7c7b\u4f3c\u722c\u697c\u68af\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\uff0c\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\uff0c<code>numSquare(12)</code>\u7684\u6c42\u6cd5\u3002\u4e00\u5f00\u59cb\u6211\u7684\u9519\u8bef\u601d\u8def\u662f\u5229\u7528\u8d2a\u5fc3\uff0c\u8ddd\u79bb\\(12\\)\u6700\u8fd1\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u662f\\(9\\)\uff0c\u90a3\u4e48\u6211\u5c31\u9519\u8bef\u7684\u4ee5\u4e3a\\(12\\)\u7684\u6700\u5c0f\u7ec4\u5408\u5c31\u662f\\(a[9]+a[3]\\)\u7684\u6b21\u6570.\u4f46\u5176\u5b9e\u4ed6\u53ef\u4ee5\u662f\\(a[4]+a[4]+a[4]=3\\) \u4e5f\u5c31\u662f\u6709\u4ee5\u4e0b\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(a[i] = \\min\\{a[j*j]+a[i-j*j]\\}\\) \u63a5\u4e0b\u6765\u7684\u5c31\u7b80\u5355\u4e86\u3002</p> <p>\u603b\u7ed3\u4e00\u4e0b \u8fd9\u9898\u5c31\u662f \u52a8\u6001\u89c4\u5212\uff0c\u76ee\u7684\u662f\u8981\u627e\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u4ee5\u53ca\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8bdd\u662f\u8fd1\u4f3c\u6210\\(O(N^\\frac{3}{2})\\) \\(\u222b_1^n\u200bf(x)dx\u2264\\sum_{i=1}^n\u200bf(i)\u2264\u222b_0^n\u200bf(x)dx\\)</p>"},{"location":"LeetCode/DP/DP/#-hot100-322","title":"- [\u52a8\u6001\u89c4\u5212] Hot100 322","text":"<p>https://leetcode.cn/problems/coin-change/?envType=study-plan-v2&amp;envId=top-100-liked</p> <p></p> <pre><code>class Solution {\npublic:\n    int coinChange(vector&lt;int&gt;&amp; coins, int amount) {\n        if(amount == 0)\n            return 0;\n        sort(coins.begin(),coins.end());\n        int a[amount+1];\n        for(int i=0;i&lt;=amount;i++)\n            a[i]=-1;\n        a[0] = 0;\n        int index,q;\n        int m = coins.size();\n        for(q=0;q&lt;m&amp;&amp;coins[q]&lt;=amount;q++){\n            if(amount==coins[q])\n                return 1;\n            a[coins[q]]=1;\n        }\n        // index \u8bb0\u5f55\u7684\u662fcoins\u4e2d\u4e0d\u5927\u4e8e\u7684\u6700\u5927\u7d22\u5f15\u5750\u6807;\n        index = q-1;\n        for(int i=1;i&lt;=amount;i++){\n            if(a[i]==1)\n                continue;\n            else{\n                int min = 10001;\n                for(int j=0;j&lt;=index&amp;&amp;coins[j]&lt;i;j++){\n                    if(a[coins[j]]==-1||a[i-coins[j]]==-1)\n                        continue;\n                    if(a[coins[j]]+a[i-coins[j]]&lt;min)\n                        min = a[coins[j]]+a[i-coins[j]];\n                }\n                if(min!=10001)\n                    a[i]=min;\n            }\n        }\n        return a[amount];\n    }\n};\n</code></pre>"},{"location":"LeetCode/DP/DP/#_2","title":"\u9898\u89e3","text":"<p>\u51c6\u786e\u7684\u6765\u8bf4\uff0c\u8fd9\u9898\u5f88\u7b80\u5355\uff0c\u8ddf\u4e0a\u4e00\u9898\u5c31\u662f\u4e00\u4e2a\u6a21\u5b50\u91cc\u523b\u51fa\u6765\u7684\uff0c\u6240\u4ee5\u5c31\u4e0d\u9700\u8981\u518d\u8d58\u8ff0\u4e86\u3002\u6bd4\u8f83\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u9898\u6709\u4e00\u4e2a\\(-1\\)\u4e5f\u5c31\u662f\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u8bb0\u5f97\u8003\u8651\u4e00\u4e0b\u3002\u522b\u7684\u6ca1\u6709\u95ee\u9898\u4e86\u5c31\u3002</p>"},{"location":"LeetCode/DP/DP/#-hot100-t2","title":"- \u52a8\u6001\u89c4\u5212 Hot100 T2 \u6768\u8f89\u4e09\u89d2","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; generate(int numRows) {\n        vector&lt;vector&lt;int&gt;&gt; result;\n        result.push_back({1});\n        result.push_back({1,1});\n        // initial;\n        if( numRows == 1)\n            return {{1}};\n        else if(numRows==2)\n            return result;\n        for(int i=2;i&lt;numRows;i++){\n            // The number of this level elements number;\n            int num = i+1;\n            vector&lt;int&gt; tmp;\n            tmp.resize(num);\n            tmp[0] = 1;\n            for(int j=1;j&lt;num-1;j++){\n                tmp[j] = result[i-1][j-1]+result[i-1][j];\n            }\n            tmp[num-1] = 1;\n            result.push_back(tmp);\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"LeetCode/DP/DP/#_3","title":"\u9898\u89e3","text":"<p>\u6768\u8f89\u4e09\u89d2\uff0c\u6211\u4eec\u7b80\u5355\u7684\u770b\u9898\u76ee\uff0c\u53ef\u4ee5\u77e5\u9053\uff0c\u4e3b\u8981\u662f\u770b\u6768\u8f89\u4e09\u89d2\u7684\u7b80\u5355\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u5c31\u662f: $$ temp[j] = result[i-1][j-1] + result[i-1][j]\\(\\(\u7136\u540e\u5c31\u662f\u4e09\u89d2\u7684\u5468\u8fb9\u90fd\u8865\u4e0a\\)1\\)\u5373\u53ef\u3002</p>"},{"location":"LeetCode/DP/DP/#-hot100-t3","title":"- \u52a8\u6001\u89c4\u5212 Hot100 T3 \u6253\u5bb6\u52ab\u820d","text":""},{"location":"LeetCode/DP/DP/#1","title":"\u9898\u89e31","text":""},{"location":"LeetCode/DP/DP/#on","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(O(N)\\)","text":"<p><pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        int num = nums.size();\n        if(num==1)\n            return nums[0];\n        else if(num == 2)\n            return max(nums[0],nums[1]);\n        vector&lt;int&gt; money;\n        money.resize(num);\n        money[0] = nums[0];\n        money[1] = max(nums[0],nums[1]);\n        for(int i=2;i&lt;num;i++){\n            // \u53ef\u4ee5\u9009\u62e9\u4e0d\u5077\u524d\u4e00\u4e2a\u623f\u95f4\n            money[i]=max(nums[i]+money[i-2],money[i-1]);\n        }\n        return max(money[num-1],money[num-2]);\n    }\n};\n</code></pre> \u4e3b\u8981\u7684\u601d\u8def\u662f\uff0c\u5c31\u662f\u6211\u4eec\u8bbe\u7f6e\u7684\u8fd9\u4e2a\\(money\\)\u6570\u7ec4\u7684\u5b9a\u4e49\u7684\u533a\u522b\uff0c\u6211\u4eec\u8fd9\u4e2a\u8bbe\u7f6e\u7684\u662f\u904d\u5386\u5230 \\(money[i]\\) \u7684\u65f6\u5019\uff0c\u8868\u793a\u7684\u662f\u904d\u5386\u5230\u8fd9\u4e2a\u623f\u95f4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u7684\u6700\u5927money\u6570\uff08\u5305\u62ec\u81ea\u5df1\uff09\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a (\\(money[i] = \\max\\{nums[i]+money[i-2],money[i-1]\\}\\)\\) \u56e0\u4e3a\u6211\u4eec\u9009\u62e9\u4e86\u81ea\u5df1\\(i\\)\u8fd9\u4e2a\u623f\u95f4\uff0c\u90a3\u4e48\u53ea\u80fd\u8003\u8651 \\(i-2\\)\u8fd9\u4e2a\u623f\u95f4\u4e86\uff0c\u6216\u8005\u6211\u4eec\\(i-1\\) \u8fd9\u4e2a\u6700\u4f18\u89e3\u3002\u90a3\u4e48\u6211\u4eec\u5230\u6700\u540e\u7684\u4e00\u4e2a\u623f\u95f4\u7684\u65f6\u5019\uff0c\u5c31\u81ea\u7136\u662f\u6700\u4f18\u7684\u3002</p>"},{"location":"LeetCode/DP/DP/#2","title":"\u9898\u89e32","text":""},{"location":"LeetCode/DP/DP/#on2","title":"\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(N^2)\\)","text":"<p><pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        int num = nums.size();\n        vector&lt;int&gt; money;\n        money.resize(num);\n        money[0] = nums[0];\n        money[1] = nums[1];\n        for(int i=2;i&lt;num;i++){\n            // \u53ef\u4ee5\u9009\u62e9\u4e0d\u5077\u524d\u4e00\u4e2a\u623f\u95f4\n            int max = -1;\n            for(int j = i-2;j&gt;=0;j--){\n                if(money[j]&gt;max)\n                    max = money[j];\n            }\n            money[i]=nums[i]+max;\n        }\n        return max(money[num-1],money[num-2]);\n    }\n};\n</code></pre> \u4e3b\u8981\u7684\u601d\u8def\u662f\uff0c\u5c31\u662f\u6211\u4eec\u8bbe\u7f6e\u7684\u8fd9\u4e2a\\(money\\)\u6570\u7ec4\u7684\u5b9a\u4e49\u7684\u533a\u522b\uff0c\u6211\u4eec\u8fd9\u4e2a\u8bbe\u7f6e\u7684\u662f\u904d\u5386\u5230 \\(money[i]\\) \u7684\u65f6\u5019\uff0c\u8868\u793a\u7684\u662f\u4e00\u5b9a\u4f1a\u9009\u62e9\u4e86\u81ea\u5df1\u8fd9\u4e2a\u623f\u95f4\u5e76\u4e14\u904d\u5386\u5230\u8fd9\u4e2a\u623f\u95f4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u7684\u6700\u5927money\u6570\uff08\u5305\u62ec\u81ea\u5df1\uff09\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a (\\(money[i]=nums[i]+max\\{money[i-2]\\};\\)\\) \u56e0\u4e3a\u6211\u4eec\u9009\u62e9\u4e86\u81ea\u5df1\\(i\\)\u8fd9\u4e2a\u623f\u95f4\uff0c\u90a3\u4e48\u53ea\u80fd\u8003\u8651 \\(i-2\\)\u8fd9\u4e2a\u623f\u95f4\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u6700\u7ec8\u7684\u7b54\u6848\u5c31\u662f\u8fd9\u4e2a\u57fa\u7840\u4e0a\u7684\u6700\u540e\u4e24\u4e2a\u623f\u95f4\u7684\u53d6\u6700\u5927\u503c\u5373\u662f\u6211\u4eec\u7684\u6700\u7ec8\u9700\u8981\u7684\u7b54\u6848\u3002</p>"},{"location":"LeetCode/DP/DP/#1016","title":"10\u670816\u65e5","text":""},{"location":"LeetCode/DP/DP/#-hot100-t2_1","title":"- \u8d2a\u5fc3\u7b97\u6cd5 Hot100 T2 \u8df3\u8dc3\u6e38\u620f","text":"<p>https://leetcode.cn/problems/jump-game/description/?envType=study-plan-v2&amp;envId=top-100-liked  <pre><code>class Solution {\npublic:\n    bool canJump(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; distance;\n        int len = nums.size();\n        if(len==1)\n            return true;\n        for(int i =0;i&lt;len;i++){\n            // temp represents that the next boundary position that we can jump;\n            distance.push_back(nums[i]+i);\n        }\n        int index = 0;\n        for(int j=0;j&lt;=len-2;){\n            // The case that after we update the array, we get the destination, avoid ;\n            if(distance[j]&gt;=len-1)\n                return true;\n            int max = distance[j];\n            for(int p = j+1;p&lt;=distance[j];p++){\n                if(distance[p]&gt;max){\n                    index = p;\n                    max = distance[p];\n                }\n            }\n            if(distance[j]==max)\n                break;\n            j = index;\n        } \n        return false;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/DP/DP/#_4","title":"\u9898\u89e3","text":"<p>\u6211\u4eec\u8fd9\u9898\u4e3b\u8981\u662f\u8d2a\u5fc3\u7b97\u6cd5\u3002\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\\(distance\\)\u6570\u7ec4\uff0c\u4ed6\u7684\u4f5c\u7528\u662f\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\\(i\\)\uff0c\u6240\u80fd\u8df3\u5230\u7684\u6700\u5927\u4f4d\u7f6e\u3002\u6211\u4eec\u9996\u5148\u8fdb\u884c\u4e00\u904d\u904d\u5386\u3002\u7136\u540e\u6309\u987a\u5e8f\u4f9d\u6b21\u904d\u5386\u4ece\u8be5\u70b9\u5f00\u59cb\u5230\u80fd\u8df3\u8dc3\u7684\u6700\u5927\u8ddd\u79bb\u7684\u8fc7\u7a0b\u4e2d\u5bfb\u627e\u4e0b\u4e00\u4e2a\u80fd\u8df3\u8dc3\u7684\u6700\u5927\u8ddd\u79bb\uff0c\u4f9d\u6b21\u5f80\u590d\uff0c\u6211\u4eec\u6a21\u62df\u8df3\u8dc3\u7684\u8fc7\u7a0b\uff0c\u8fd9\u5176\u4e2d\u5176\u5b9e\u5c31\u662f\u8fd0\u7528\u4e86\u8d2a\u5fc3\u7684\u7b97\u6cd5\uff0c\u9009\u53d6\u5f53\u524d\u72b6\u6001\u4e2d\u80fd\u8dc3\u8fc1\u7684\u6700\u5927\u503c\u8fdb\u884c\u8df3\u8dc3\u3002</p>"},{"location":"LeetCode/DP/DP/#-hot100-t3-ii","title":"- \u8d2a\u5fc3\u7b97\u6cd5 Hot100 T3 \u8df3\u8dc3\u6e38\u620fII","text":"<p>https://leetcode.cn/problems/jump-game-ii/?envType=study-plan-v2&amp;envId=top-100-liked </p>"},{"location":"LeetCode/DP/DP/#_5","title":"\u9898\u89e3","text":"<p>\u8fd9\u9898\u5c31\u66f4\u7b80\u5355\u4e86\u3002\u5728\u4e0a\u4e00\u9898\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u4e2a<code>count</code>\u4f5c\u4e3a\u8bb0\u5f55\u8df3\u8dc3\u6b21\u6570\u5373\u53ef\u3002over</p>"},{"location":"LeetCode/DP/DP/#1020","title":"10\u670820\u65e5","text":"<p>https://leetcode.cn/problems/subarray-sum-equals-k/description/?envType=study-plan-v2&amp;envId=top-100-liked </p>"},{"location":"LeetCode/DP/DP/#_6","title":"\u8fd9\u9898 \u6211\u4eec\u63d0\u4f9b\u4e24\u79cd\u89e3\u6cd5:","text":""},{"location":"LeetCode/DP/DP/#1_1","title":"\u9898\u89e31 \u66b4\u529b\u641c\u7d22","text":""},{"location":"LeetCode/DP/DP/#on2_1","title":"\u65f6\u95f4\u590d\u6742\u5ea6\\(O(N^2)\\)","text":"<pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        int size = nums.size();\n        vector&lt;int&gt;result;\n        result.resize(size);\n        int count = 0;\n        result[0] = nums[0];\n        if(result[0]==k)\n            count++;\n        for(int i=1;i&lt;size;i++){\n            result[i] = result[i-1] + nums[i];\n        }\n\n        for(int i = 1;i&lt;size;i++){\n            int temp = result[i];\n            for(int j = 0;j&lt;=i;j++){\n                if(temp==k)\n                    count++;\n                temp -= nums[j];\n            }\n        }\n        return count;\n    }\n};\n</code></pre>"},{"location":"LeetCode/DP/DP/#_7","title":"\u601d\u8def\uff1a","text":"<p>\u66b4\u529b\u641c\u7d22\u7684\u601d\u8def\u5c31\u662f\uff0c\u5c31\u662f\u904d\u5386\u6bcf\u4e00\u4e2a\u7ec4\u5408\\((i,j)\\)\u7684\u5b50\u6570\u7ec4\u548c\uff0c\u67e5\u770b\u662f\u5426\u5b58\u5728\u7b49\u4e8e\\(k\\)\u7684\u5b50\u6570\u7ec4\u3002\u90a3\u4e48\u6211\u4eec\u6709\u9012\u63a8\u5f0f\u3002 $$ result[i] = \\begin{cases}  result[i-1] + nums[i] &amp; \\text{if } i &gt; 0 \\ nums[0] &amp; \\text{if } i = 0  \\end{cases} $$</p> <p>\u4e00\u5f00\u59cb\u6211\u7684\u601d\u8def\u662f\u5f00\u4e86\u4e00\u4e2a\\(N*N\\)\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u8fd9\u6837\u5728\u8dd1\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u5185\u5b58\u8d85\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u6362\u601d\u8def\uff0c\u4ec5\u5f00\u4e00\u4e2a\\(O(N)\\)\u7684\u6570\u7ec4\uff0c\u7136\u540e\u5229\u7528\u9012\u63a8\u5f0f\u6765\u9a8c\u8bc1\u662f\u5426\u4e3a\\(k\\).\u8dd1\u662f\u8dd1\u901a\u4e86\uff0c\u4f46\u8fd8\u662f\u82b1\u8d39\u4e86 \\(\\frac{N*(N-1)}{2}\\)\u7684\u65f6\u95f4\uff0c\\(O(N^2)\\)\u7684\u65f6\u95f4\u8fd8\u4e0d\u662f\u6700\u4f18\u7684\u3002</p>"},{"location":"LeetCode/DP/DP/#2_1","title":"\u9898\u89e32 \u524d\u7f00\u548c+\u54c8\u5e0c\u8868\u4f18\u5316","text":""},{"location":"LeetCode/DP/DP/#on_1","title":"\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(N)\\)","text":"<pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        // mp \u8bb0\u5f55\u7684\u662f \u622a\u6b62 i \u7684\u524d\u7f00\u548c\n        unordered_map&lt;int,int&gt;mp;\n        mp[0] = 1;\n        int pre = 0,count = 0;\n        for(int &amp;num : nums){\n            pre+=num;\n            if(mp.find(pre-k)!=mp.end()){\n                count+=mp[pre-k];\n            }\n            mp[pre]++;\n        }\n        return count;\n    }\n};\n</code></pre>"},{"location":"LeetCode/DP/DP/#_8","title":"\u601d\u8def","text":"<p>\u601d\u8def\u5176\u5b9e\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u60f3\u5230\u4e86\uff0c\u56e0\u4e3a\u505a\u8fc7\u7c7b\u4f3c \u4e24\u6570\u4e4b\u548c\u7684\u9898\u76ee\uff0c\u8fd9\u91cc\u4e5f\u662f\u4e00\u6837\uff0c\u6211\u4eec\u4ece\u5de6\u5f80\u53f3\u904d\u5386\uff0c\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u4e00\u4e2a\u9012\u63a8\u5f0f\uff1a \\(\\(pre[j] - pre[i-1] == k\\)\\)\u8fd9\u4e2a\u662f\u6211\u4eec\u8981\u5224\u65ad\u7684\u5f0f\u5b50\uff0c\u800c\\(pre[j]\\)\u8868\u793a\u7684\u5c31\u662f\\((0,j)\\)\u7684\u524d\u7f00\u548c\uff0c\u6211\u4eec\u5c06\u4e0a\u8ff0\u7684\u5f0f\u5b50\u8fdb\u884c\u53d8\u6362\uff0c\u5f97\u5230\u4e0b\u8ff0\u7684\u5185\u5bb9\uff1a \\(\\(pre[j]-k == pre[i-1]\\)\\) \u5176\u5b9e\u5c31\u5f88\u81ea\u7136\u7684\u60f3\u5230\u662f\u5426\u5b58\u5728\u95ee\u9898\u4f7f\u7528\u54c8\u5e0c\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u9a6c\u7684\u5f97\u5230\u7528\u4e00\u4e2a\\(mp\\)\u6765\u5b58\u653e\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u6211\u4eec\u6709\u8fd9\u6837\u7684\u4e00\u4e32\u6570\u7ec4\\(\\{1,2,3\\},k=5\\) \u90a3\u4e48\u6211\u4eec\u5c31\u6709</p> i \\(pre[i]\\) \\(pre[i]-k\\) \u662f\u5426\u67e5\u5230\\(mp[pre[i]-k]\\) 0 1 -4 Nope 1 3 -2 Nope 2 6 1 Find! k mp[k] 0 1 1 1 3 1 <p>\u6211\u4eec\u770b\u4e0a\u8ff0\u7684\u52a0\u9ed1\u4f8b\u5b50\uff0c\u5c31\u662f\u627e\u5230\\(\\{2,3\\}\\)\u8fd9\u4e2a\u548c\u4e3a\\(5\\)\u7684\u5b50\u6570\u7ec4\u3002</p>"},{"location":"Tutorial/Java/Java4/","title":"Chapter4 Objects and classes","text":""},{"location":"Tutorial/Java/Java4/#41-introduce","title":"4.1 Introduce","text":""},{"location":"Tutorial/Java/Java4/#42-predefined-classes","title":"4.2 Predefined Classes","text":""},{"location":"Tutorial/Java/Java4/#421-objects-and-object-variables","title":"4.2.1 Objects and object variables","text":""},{"location":"Tutorial/Java/Java4/#constructor-function","title":"constructor function","text":"<p>constructor function is a special method whose purpose is to construct and initialize objects. \u6784\u5efa\u548c\u521d\u59cb\u5316\u5bf9\u8c61</p> <p>[Tips] All the objects constructed in the heap in Java,which means that you can only use <code>new</code> to create a object.</p> <p>[Tips]  What is the <code>toString</code> means? It is a special method in represent this object in String type.</p>"},{"location":"Tutorial/Java/Java4/#422-create-a-object","title":"4.2.2 Create a object","text":"<p><pre><code>    Date deadline; // deadline doesn't refer to a object now;\n    s = deadline.toString();\n</code></pre> The above will cause a compiler-time error; - Method1 : You should use the constructor function to let <code>to String</code> represents a object.</p> <ul> <li>Method2 : You can also let deadline refers to an existing object;</li> </ul> <p></p> <p>The above is the difference between C++ and Java in the object referrence.</p>"},{"location":"Tutorial/Java/Java4/#423-mutator-and-access-methods","title":"4.2.3 Mutator and Access Methods","text":"<p>\u4fee\u6539\u65b9\u6cd5\u548c\u83b7\u53d6\u65b9\u6cd5.</p> <p>\u5f88\u597d\u7406\u89e3 \u5b57\u9762\u610f\u601d\u3002\u524d\u8005\u662f\u4f1a\u8ba9\u67d0\u4e2a\u5bf9\u8c61\u8fdb\u884c\u66f4\u6539/\u4fee\u9970\uff0c\u4f46\u662f\u540e\u8005\u662f\u76f4\u63a5\u83b7\u53d6\u4e86\u4e00\u4e2a\u65b0\u7684\u4fee\u6539\u4e4b\u540e\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u539f\u5bf9\u8c61\u4e0d\u53d8\u3002 <pre><code>    LocalDate aThousandDayLater = newYearsEve.plusDays(1000);\n\n    someDay.add(Calendar.DAY_OF_MONTH,1000);\n</code></pre> \u7b2c\u4e00\u4e2a\u662f \\(Access Method\\) \u4f46\u540e\u8005\u662f\\(Mutator Method\\)\u539f\u6765\u7684\u5bf9\u8c61\u53d1\u751f\u4e86\u6539\u53d8\u3002</p>"},{"location":"Tutorial/Java/Java4/#432-use-of-multiple-source-files","title":"4.3.2 Use of Multiple Source Files","text":"<p>\u6211\u4eec\u8fd9\u91cc\u5148\u8003\u8651\u4e00\u4e0b\u7c7bUnix\u7cfb\u7edf\u4e2d\u7684<code>make</code>\u7684\u903b\u8f91\uff0c\u5728\u4e4b\u524d\u5199<code>makefile</code>\u6587\u4ef6\u4e2d\u7684\u65f6\u5019\uff0c\u5b66\u4e60\u4e86\u4e00\u4e0b<code>make</code>\u7684\u903b\u8f91\uff0c\u662f\u5c06\u6307\u5b9a\u7684\u4e00\u4e9b<code>.h</code>,<code>.c</code>\u7b49\u76ee\u6807\u5f85\u6587\u4ef6\u7f16\u8bd1\u6587\u4ef6\u653e\u5728\u4e00\u8d77\uff0c\u7b49\u5f85\u5982\u679c\u67d0\u4e9b<code>.h/.c</code>\u6587\u4ef6\u53d1\u751f\u6539\u52a8\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u5355\u72ec\u7684\u91cd\u65b0\u5c06\u8fd9\u4e9b\u6587\u4ef6\u7f16\u8bd1\u8fdb\uff0c\u800c\u4e0d\u662f\u6574\u4f53\u7f16\u8bd1\u3002\u6709\u70b9\u7c7b\u4f3c<code>cache</code>\u7684\u4f5c\u7528\u3002\u5c31\u662f\u4e3a\u4e86\u8282\u7ea6\u6027\u80fd\uff0c\u5df2\u7ecf\u7f16\u8bd1\u8fc7\u7684\u672a\u6539\u53d8\u7684\u5185\u5bb9\u4e0d\u53d8\u3002</p> <p>\u6211\u4eec\u5728\u8003\u8651Java\u7684\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u5df2\u7ecf\u53ef\u4ee5\u611f\u53d7\u5230\u4e86Java\u4e2d\u5185\u7f6e\u4e86<code>make</code>\u3002\u600e\u4e48\u5462\uff1f\u9996\u5148\uff0c\u4f5c\u4e3a\u5178\u578b\u7684OOP\u8bed\u8a00\uff0c\u6211\u4eec\u662f\u5c06\u5404\u4e2a\u7c7b\u5199\u5728\u5404\u81ea\u7684\u6587\u4ef6\u4e2d\uff0c\u90a3\u4e48\u5047\u8bbe\u6211\u4eec\u6709\u4e24\u4e2a\u7c7b\uff0c<code>Employee.java</code>\u548c<code>EmployeeTest.java</code>\u51fd\u6570\uff0c\u6211\u4eec\u5728\u540e\u8005\u4e2d\u4f7f\u7528\u5230\u4e86\u524d\u8005\u8fd9\u4e2a\u7c7b\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u4f1a\u4f18\u5148\u5bfb\u627e\u6709\u65e0<code>Employee.class</code>\u8fd9\u4e2a\u6587\u4ef6\u5b58\u5728\u4fbf\u4e8e\u65e0\u4fee\u6539\u7684\u91cd\u590d\u5229\u7528\uff0c\u548c\u4e0a\u8ff0\u7684 make \u8fdb\u884c\u547c\u5e94\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u7684\u8bdd\u5c31\u4f1a\u9009\u62e9\u5bfb\u627e<code>Employee.java</code>\u5e76\u4e14\u8fdb\u884c\u7f16\u8bd1\u3002\u5982\u679c\u5b9e\u5728\u6ca1\u6709\u627e\u5230\u7684\u8bdd\u5c31\u4f1a\u5728<code>EmployeeTest.java</code>\u4e2d\u5bfb\u627e\uff0c\u7136\u540e\u62a5\u9519\u3002</p>"},{"location":"Tutorial/Java/Java4/#433-dissecting-the-employee-class","title":"4.3.3 Dissecting the Employee Class","text":"<p>Several Key Words</p> <ul> <li>Public : The keyword public means that any method in any class can call this method.     \u6240\u6709\u4efb\u4f55\u7c7b\u7684\u4efb\u4f55\u65b9\u6cd5\u90fd\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002</li> <li>private : The keyword Make sure that the only methods that can access these instance fields are the methods of the inner class itself.No outside method can read or write to these method,including the Derivative class(\u884d\u751f\u7c7b)</li> <li>protected : The keyword Make sure that the methods can be accessed by any class in the same class\uff0calso including the Derivative class.</li> </ul>"},{"location":"Tutorial/Java/Java4/#435-declaring-local-variabale-with-var","title":"4.3.5 Declaring Local Variabale with var","text":"<p><code>var</code> key word is used to provided their type can be inferred from the initial value.</p> <p><code>Employee harry = new Employee(....);</code> You can use the <code>var</code> key word that make the following code; <code>var harry = new Employee(....)</code> Which,you can avoid typing the type again.</p>"},{"location":"Tutorial/Java/Java4/#435-be-careful-with-null","title":"4.3.5 Be careful with <code>null</code>!","text":"<p>null represents absence of an object.</p> <p>If you apply a method into the <code>null</code> object, you will run across a <code>NullPointerException</code> error. It is a serious error, if you haven't catch it,it will terminated. So we should always care about the <code>null</code> error.</p>"},{"location":"Tutorial/Java/Java4/#4311-final-instance-fields","title":"4.3.11 <code>Final</code> Instance Fields","text":"<p><code>Final</code> key word's meaning is as the same as final.</p> <p>Which means that, this field must be initialized when the object is constructed, the value can't be change again! <code>immutable</code> !</p>"},{"location":"Tutorial/Java/Java4/#44-static-fields-and-methods","title":"4.4 Static Fields and Methods","text":"<p>Simply understand is that the static method can be only one in a class. It is belong to a class, but not any individual object.</p> <p>So when you access them, you must <code>Class.xxx</code> But not <code>object.xxx</code> </p> <p>So, combine the <code>final</code> key word, you can know that <code>static final</code>. When you use <code>Math.PI</code> as a constant, at the same time that it means <code>public static final double PI = 3.14....</code></p> <p> <code>Native Method</code> can bypass the acess control mechanisms of the Java Language.</p>"},{"location":"Tutorial/Java/Java4/#445-the-static-main-method","title":"4.4.5 The static Main method","text":"<p>In fact that The <code>main</code> method does not operate on any objects.In fact,when a program starts, there aren't objects yet.The static <code>main</code> method executes, and constructs the object that the program needs.</p>"},{"location":"Tutorial/Java/Java4/#45-method-parameters","title":"4.5 Method Parameters","text":"<ul> <li> call by value : which means that the method gets just the value that the caller provides.</li> <li>call by reference : which means that the method gets the location of the variable that the caller provides.</li> </ul> <p>Obviously, Java choose the call by value. That means that the method gets a copy of all parameter values.The method cannot modify the contents of any parameter variable passed to it.</p> <ul> <li>Two kinds of method parameters:</li> <li>Primitive types(numbers,boolean value)</li> <li>Object references \u5bf9\u8c61\u5f15\u7528 \u5f88\u663e\u7136\uff0c\u539f\u59cb\u7c7b\u578b\u7684\u503c\u662f\u65e0\u6cd5\u6539\u53d8\u7684\uff0c\u56e0\u4e3a\u503c\u8c03\u7528\u7684\u539f\u56e0\uff0c\u65b9\u6cd5\u65e0\u6cd5\u66f4\u6539\u4f20\u5165\u7684\u503c\u672c\u8eab\uff0c\u56e0\u4e3a\u4f20\u5165\u7684\u662fprimitive types\u7684\u4e00\u4e2acopy\u800c\u5df2\u3002\u4f46\u4f20\u5165\u7684\u662f\u5bf9\u8c61\u5f15\u7528\u5c31\u4e0d\u4e00\u6837\u4e86\u3002 <p>Actually, both the original and the copy refer to the same object!</p> </li> </ul> <p> Java\u672c\u8eab\u662f\u4f20\u503c\u7684\uff0c\u6211\u4eec\u6240\u8c13\u7684\u53ef\u80fd\u51fa\u73b0\u7684\u66f4\u6539\u5f15\u7528\u7684\u662f\u7531\u4e8e\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u903b\u8f91\u3002\u5f15\u7528\u548c\u88ab\u5f15\u7528\u8005\u90fd\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4ed6\u4eec\u4f20\u5165method\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u8fdb\u884c\u4fee\u6539\uff0c\u4f46\u662f\u6211\u4eec\u7531\u4e8e\u5728\u65b9\u6cd5\u4e2d\u4f20\u5165\u7684\u662fcopy of reference\uff0c\u90a3\u4e48\u4fee\u6539\u526f\u672c\u6240\u6307\u5411\u7684\u5bf9\u8c61\u662f\u4e0d\u80fd\u6539\u53d8\u88ab\u5f15\u7528\u8005\u672c\u8eab\u539f\u5148\u6307\u5411\u7684\u5bf9\u8c61\u7684\u3002\u56e0\u6b64\uff0cswap\u51fd\u6570\u5c31\u663e\u5f97\u4e0d\u50cfC++\u4e2d\u90a3\u6837\u8fdb\u884c\u6307\u9488\u6307\u5411\u7684\u66f4\u6539\u4e86\u3002</p>"},{"location":"Tutorial/Java/Java4/#46-objective-constructor","title":"4.6 Objective Constructor","text":""},{"location":"Tutorial/Java/Java4/#461-overloading","title":"4.6.1 OverLoading","text":"<p>some classes have more than one constrctor.This capability is called <code>overloading</code> </p> <ul> <li>Definition: Overloading means that if several method shares the same name, but different parameters.</li> </ul> <p>The compiler sort out the correct method with the correct types of the values. If it can't find the correct method that, it will cause <code>compile-time error</code></p> <p>The process of finding a match is called <code>overloading resolution</code> \u91cd\u8f7d\u89e3\u6790</p>"},{"location":"Tutorial/Java/Java4/#468-object-destruction-and-finalize-method","title":"4.6.8 Object Destruction and <code>finalize</code> Method","text":"<p>Many OOP Language have need the destructor function, but because of Java have automatic garbage collection, manual memory reclamation is not needed!</p> <p>But in the real case that, some objects utilize a resource other than memory, like a file. In this case that, a <code>close()</code> method is important to cleanup.</p>"},{"location":"Tutorial/Java/Java4/#47-package","title":"4.7 Package","text":""},{"location":"Tutorial/Java/Java4/#471-package-names","title":"4.7.1 Package Names","text":"<p>The main reason for using package is to guarantee the uniqueness of class name.</p> <ul> <li> <p>Why use the Internet domain name as the name of package? Because of the reason that we assume the domain name could be unique.</p> </li> <li> <p>Also there is no relations between two packages, they are independent!</p> </li> </ul>"},{"location":"Tutorial/Java/Java4/#473-static-imports","title":"4.7.3 Static Imports","text":"<ul> <li>A form of the <code>import</code> statement permits the importing of the static methods and fields, not just classes. </li> </ul>"},{"location":"Tutorial/Java/Java4/#474-addition-of-a-class-into-a-package","title":"4.7.4 Addition of a class into a package","text":"<p>Package \u5173\u952e\u5b57\u7684\u76ee\u7684\u5c31\u662f\u628a\u67d0\u4e2aclass\u6587\u4ef6\u5f52\u5c5e\u5230\u4e00\u4e2a\u5305\u4e2d\uff0c\u4e0d\u7136\u7684\u8bdd\uff0c\u8fd9\u4e2ajava\u6587\u4ef6\u5c31\u96b6\u5c5e\u4e8eunnamed package\u4e86\u3002</p> <p> \u867d\u7136\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u662f\u5728<code>JVM</code>\u4e0a\u8fd0\u884c\u5c31\u4f1a\u51fa\u9519\uff0c\u9700\u8981\u6211\u4eec\u624b\u52a8\u7684\u628a\u6587\u4ef6\u653e\u5728\u90a3\u4e2apackage\u7684\u76ee\u5f55\u4e0b\u3002</p>"},{"location":"Tutorial/Java/Java4/#48-jar-java","title":"4.8 Jar\u6587\u4ef6 Java\u5b58\u6863\u6587\u4ef6","text":"<p>What is a JAR file (Java Archive File) - A JAR file contains multiple <code>class</code> file,and other files like image and sound files which have been compiled and compressed using the familiar Zip compression format, only when you need to use/include them, the <code>JVM</code> will add them into your program. \u8fd9\u91cc\u548cpackage\u533a\u5206\u4e00\u4e0b\uff0cpackage\u4e2d\u662f\u4e00\u5806<code>.java</code>\u6587\u4ef6\uff0c\u4f46\u662fJAR\u5305\u4e2d\u5305\u542b\u7684\u662f\u5df2\u7ecf\u7f16\u8bd1\u597d\u7684<code>class</code>\u6587\u4ef6,\u548c\u5176\u4ed6\u7684\u955c\u50cf\u6587\u4ef6\u7b49\u88ab\u6253\u5305\u6210\u4e86\u4e00\u4e2azip\u683c\u5f0f\u7684\u6587\u4ef6\u3002</p> <p>when you package your application,you want to give your user a single file, not a directory structure filled with class file.</p>"},{"location":"Tutorial/Java/Java4/#481-creating-jar-files","title":"4.8.1 Creating JAR files","text":"<p>using the <code>jar</code> tool to make JAR files.(In the default JDK installation,it's in the <code>jdk/bin</code> directory)</p>"},{"location":"Tutorial/Java/Java4/#482","title":"4.8.2","text":"<p>The Manifest </p> <p>In addition to class files, each JAR file contains a <code>manifest</code> file describes special features of the archive. Like the README.md file. It is called <code>MANIFEST.MF</code> is located in a special <code>META-INF</code> subdirectory of the <code>JAR</code> file.</p>"},{"location":"Tutorial/Java/Java4/#49-documetation-comments","title":"4.9 Documetation Comments","text":"<p>A JDK contains a very useful tool, called <code>javadoc</code>, which generates HTML documentation from your source files.</p>"},{"location":"Tutorial/Java/Java5/","title":"Chapter5 Inheritance","text":"<p>\u7ee7\u627f</p> <p>[tips] \u5b66\u5b8c\u53cd\u5c04\u4e4b\u540e\uff0c\u4e66\u672c\u7ed9\u4e86\u4e00\u53e5\u5f88\u5173\u952e\u7684\u8bdd Don't reuse Reflection \u4e0d\u8981\u6ee5\u7528reflection The reflection mechanism lets you write programs with amazing generality, by detecting fields and methods at runtime. This capability can beextremely useful for systems programming, but it is usually not appropriate in applications. Reflection is fragile\u2014with it, the compiler cannot help you find programming errors. Any errors are found at runtime and result in exceptions.</p> <p>\u53cd\u5c04\u662f\u8106\u5f31\u7684\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u6b63\u786e\u7684\u5e2e\u4f60\u627e\u5230\u9519\u8bef\uff01</p> <p>The idea behind inheritance is that you can create new classes that are built on existing classes(It is the natural of the Inheritance). When you inherit from an existing class, you reuse (or inherit) its methods, and you can add new methods and fields to adapt your new class to new situation. This technique is essential in Java Programming.</p> <p>The Inheritance chapter also introduce the mechanism of reflection, the ability to find out more about classes and their properties in a running program.It is a critical feature of Java</p>"},{"location":"Tutorial/Java/Java5/#51-classes-superclasses-and-subclasses","title":"5.1 Classes, Superclasses, and Subclasses","text":"<p>A sentence to conclue is that a manager is a Employee.   (is-a relation)</p>"},{"location":"Tutorial/Java/Java5/#511-defining-subclasses","title":"5.1.1 Defining Subclasses","text":"<p>use the key word extends</p> <pre><code>public class Manager extends Employee{\n    //added methods and fileds;\n}\n</code></pre> <ul> <li>A design principle is that : you place the most general methods in th superclass and more specialized methods in its subclasses.</li> </ul>"},{"location":"Tutorial/Java/Java5/#512-overriding-methods","title":"5.1.2 overriding methods","text":"<p>\u5982\u679c\u8bf4\u5b50\u7c7b\u7ee7\u627f\u4e86\u7236\u7c7b\u7684\u4e00\u4e9b\\(fields\\)\u548c\\(methods\\)\u3002\u5982\u679c\u6709\u4e9b\u7236\u7c7b\u4e0d\u5177\u5907\u7684\\(methods/fields\\)\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u6dfb\u52a0\u3002\u4f46\u4e5f\u6709\u4e00\u79cd\u60c5\u51b5\u662f\uff0c\u5b50\u7c7b\u4e2d\u7684\u67d0\u4e9b\u65b9\u6cd5\u662f\u9700\u8981\u91cd\u5199\u7684\uff0c\u6216\u8005\u8bf4\u662f\u5b9e\u73b0\u65b9\u5f0f\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5229\u7528 override \u5173\u952e\u5b57\u6765\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5\u7684\u91cd\u5199</p> <p></p>"},{"location":"Tutorial/Java/Java5/#super","title":"super \u5173\u952e\u5b57","text":"<p>\u5f88\u597d\u7406\u89e3 <code>super</code> \u5173\u952e\u5b57\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u7236\u7c7b\u7684\u5f15\u7528\uff0c\u53ef\u4ee5\u7c7b\u6bd4\u4e00\u4e0b\u6211\u4eec\u4e4b\u524d\u4e00\u76f4\u4f7f\u7528\u7684<code>this</code> \u5173\u952e\u5b57</p> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c<code>Salary</code>\u5c31\u662f <code>Employee</code> \u7c7b\u4e2d\u7684<code>private fileds</code> \u56e0\u6b64\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528<code>super</code>\u6765\u83b7\u53d6\u8fd9\u4e2a\u7c7b\u4e2d\u7684<code>fields</code>.</p> <p>[tips] Java only support that many to one Inheritance\u4e5f\u5c31\u662f\u53ea\u80fd\u5141\u8bb8\u5355\u7ee7\u627f\uff0c\u4e0d\u5141\u8bb8\u591a\u7ee7\u627f</p>"},{"location":"Tutorial/Java/Java5/#516-method-call","title":"5.1.6 Method call","text":"<ul> <li>Static Binding : \u9759\u6001\u7ed1\u5b9a If the method is private, static, final or a constructor, then the compiler knows exactly which method to call.\u56e0\u4e3a\u4e0a\u9762\u8fd9\u4e9bmethods\u7684\u5c5e\u6027\u90fd\u662f\u786e\u5b9a\u7684\uff0c\u4e0d\u6d89\u53ca\u53ef\u80fd\u8de8\u7c7b\u7684\u8c03\u7528\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u53ef\u4ee5\u65b9\u4fbf\u76f4\u63a5\u7684\u9759\u6001\u7ed1\u5b9a\u3002\u4f46\u53cd\u4e4b\uff0c<code>public</code>\u6216\u8005\u8bf4\u662f<code>protected</code>\u8fd9\u79cd\u53ef\u4ee5\u8de8\u7c7b\uff0c\u8de8package\u7684\uff0c\u4f60\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u4f1a\u7528\u5230\uff0c\u5c31\u9700\u8981\u52a8\u6001\u7ed1\u5b9a(Dynamic binding)\u4e86.  <p>Dynamic binding has a very important property: It makes programs extensible without the need for modifying existing code.</p> </li> </ul>"},{"location":"Tutorial/Java/Java5/#517-prevent-inheritance-final","title":"5.1.7 prevent Inheritance <code>final</code>","text":"<p>every methods in <code>final</code> or <code>final class</code> will not been overridden!</p>"},{"location":"Tutorial/Java/Java5/#518-casting","title":"5.1.8 Casting","text":"<p>\u7c7b\u578b\u8f6c\u5316</p> <p>\u8bb0\u4f4f\uff0cJava\u662f\u5f3a\u7c7b\u578b\u7684\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u652f\u6301\u50cfC++\u90a3\u6837\u7684\u9690\u578b\u8f6c\u5316\u3002</p> <ul> <li>use <code>instanceof</code> \u662f\u4e00\u4e2a\u597d\u4e60\u60ef\uff0c\u907f\u514d\u51fa\u73b0<code>catch exception(ClasscastException)</code>\u7684\u60c5\u51b5</li> <li>Use instanceof to check before casting from a superclass to a subclass.</li> </ul>"},{"location":"Tutorial/Java/Java5/#52-object-the-cosmic-superclass","title":"5.2 object: the cosmic Superclass","text":"<p>object is the ultimate ancestor - every class in Java <code>extends</code> object.</p>"},{"location":"Tutorial/Java/Java5/#522-the-equals-method-important","title":"5.2.2 The equals Method Important","text":""},{"location":"Tutorial/Java/Java5/#why-do-you-need-to-override-equal-method","title":"Why do you need to override <code>equal</code> method?","text":"<p>\u662f\u56e0\u4e3a Object \u7c7b\u9ed8\u8ba4\u7684equals()\u65b9\u6cd5\u5b9e\u73b0\u7684\u662f\u6bd4\u8f83\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\uff08\u5373\u662f\u5426\u4e3a\u540c\u4e00\u4e2a\u5bf9\u8c61\uff09\uff0c\u800c\u4e0d\u662f\u6bd4\u8f83\u5bf9\u8c61\u7684\u5185\u5bb9</p>"},{"location":"Tutorial/Java/Java5/#523-hashcode-method","title":"5.2.3 <code>hashCode</code> method","text":"<p>The <code>hashCode</code> method is defined in the <code>Object</code> class.Therefore, every object has a defualt hash code.The hash code is derived from the object's memory address.</p> <p></p> <ul> <li>Note that the strings s and t have the same hash code, because for strings, the hash code are derived from its content. here <code>String s = \"OK\"</code>,<code>String t = new String(\"OK\")</code>,so their hash code is the same.</li> <li>But for other object, which <code>hashCode</code> has not been defined for the class that it will only use the default <code>hashCode</code> defined in the <code>Object</code> class, which derives the <code>memory address</code>.</li> </ul> <p>Important: Why do you need to <code>override</code> the <code>hashCode</code> method after you <code>override</code> the <code>equals</code> method?</p> <p>\u8fd9\u662f\u56e0\u4e3a\u5728\u4f7f\u7528\u6563\u5217\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u54c8\u5e0c\u8868\uff0c\u6211\u4eec\u5e0c\u671b\u76f8\u7b49\u7684\u5bf9\u8c61\u5177\u6709\u76f8\u7b49\u7684\u54c8\u5e0c\u7801\uff01\u5728Java\u4e2d\uff0c\u54c8\u5e0c\u8868\u4f7f\u7528\u54c8\u5e0c\u7801\u6765\u786e\u5b9a\u5b58\u50a8\u5151\u73b0\u8fc7\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u4e24\u4e2a\u76f8\u540c\u7684\u5bf9\u8c61\u5177\u6709\u4e0d\u540c\u7684\u54c8\u5e0c\u7801\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c31\u4f1a\u88ab\u5b58\u5728\u54c8\u5e0c\u8868\u4e2d\u7684\u4e0d\u540c\u4f4d\u7f6e\uff0c\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u6b63\u786e\u7684\u67e5\u627e\u8fd9\u4e9b\u5bf9\u8c61\u3002</p> <p></p>"},{"location":"Tutorial/Java/Java5/#53-generic-array-lists","title":"5.3 Generic Array Lists","text":"<p>\u901a\u7528\u6570\u7ec4\u5217\u8868</p> <p>In C/C++ you have to fix the sizes of all arrays at compile time.But it is awful in sometime.Althogh Java could set size of an array at runtime like <pre><code>int acutalSize = ...;\nvar staff = new Employee[actualSize];\n</code></pre> \u4f46\u4e0a\u9762\u7684\u4ee3\u7801\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u52a8\u6001\u4fee\u6539\u6570\u7ec4\u5927\u5c0f\u7684\u95ee\u9898\u3002\u4e00\u65e6\u786e\u5b9a\u4e86\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u662f\u4e0d\u5bb9\u6613\u66f4\u6539\u7684\u3002\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e86 <code>ArrayLists</code></p> <p>ArrayList class is similar to an array, but it automatically adjusts its capacity as you add and remove elements,without any additional code.</p>"},{"location":"Tutorial/Java/Java5/#531-declaring-array-lists","title":"5.3.1 Declaring Array Lists","text":"<p><code>ArrayList&lt;Employee&gt; staff = new ArrayList&lt;Employee&gt;()</code></p> <ul> <li><code>ensureCapacity(size)</code> method allocates an internal array of size objects, that you haven't involve any costly reallocation to <code>add</code> method.</li> </ul>"},{"location":"Tutorial/Java/Java5/#54-object-wrappers-and-autoboxing","title":"5.4 Object Wrappers and Autoboxing","text":"<ul> <li> <p>The type parameter inside the angle brackets cannot be a primitive type <code>ArrayList&lt;int&gt;</code> is not allowed.</p> </li> <li> <p>Because you define it must use the wrapper class, so actually it is slower obviously that <code>int[] array</code>.</p> </li> </ul>"},{"location":"Tutorial/Java/Java5/#55-methods-with-a-variable-number-of-parameters","title":"5.5 Methods with a variable number of parameters","text":"<p>\u6211\u4eec\u8fd9\u91cc\u5c31\u5f88\u597d\u7406\u89e3\u4e86\uff0c\u5f88\u81ea\u7136\u7684\u56e0\u4e3a\u6240\u6709\u7684\u7c7b\u578b\u90fd\u662f<code>Object class</code> \u7684 subclass,\u6240\u4ee5\u6211\u4eec\u4f20\u5165\u7684\u53c2\u6570\u4e8b\u5b9e\u4e0a\u5c31\u662f<code>Object[]</code>. \u6211\u4eec\u4e0b\u9762\u4ee5<code>printf</code>\u4e3a\u4f8b\u5b50\u3002 <pre><code>public class PrintStream{\n    public PrintStream printf(String fmt, Object... args){\n        return format(fmt,args);\n    }\n}\n</code></pre> [tips] : \u8fd9\u91cc\u7684<code>...</code> \u4e5f\u662fJava\u4ee3\u7801\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u4e2a\u8868\u793a\u4e86\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u6536\u83b7\u8bb8\u591a\u7684<code>objects</code>\u3002</p> <p>[\u4f8b\u5b50] <pre><code>public static double max(double... values){\n    double largest = Double.NEGATIVE_INFINITY;\n    for(double v:values){\n        if(v&gt;largest){\n            largest = v;\n        }\n    }\n    return largest;\n}\n</code></pre></p>"},{"location":"Tutorial/Java/Java5/#56-enumeration-classes","title":"5.6 Enumeration Classes","text":"<p>here we introduce an example: <pre><code>public enum Size{\n    SMALL,\n    MEDIUM,\n    LARGE,\n    EXTRA_LARGE\n}\n</code></pre> you are not need to use <code>equals</code> method,because there is only \\(4\\) instances in the enumeral class. You can simply use <code>==</code> to identify whether these 2 are the same.</p> <pre><code>public enum Day {\n    MONDAY(\"Workday\"),\n    TUESDAY(\"Workday\"),\n    WEDNESDAY(\"Workday\"),\n    THURSDAY(\"Workday\"),\n    FRIDAY(\"Workday\"),\n    SATURDAY(\"Weekend\"),\n    SUNDAY(\"Weekend\");\n\n    private String type;\n\n    // \u6784\u9020\u51fd\u6570\n    private Day(String type) {\n        this.type = type;\n    }\n\n    // \u83b7\u53d6type\u5c5e\u6027\u7684\u65b9\u6cd5\n    public String getType() {\n        return type;\n    }\n}\n\n\npublic class Main {\n    public static void main(String[] args) {\n        // \u83b7\u53d6\u679a\u4e3e\u5e38\u91cf\u548c\u5c5e\u6027\n        for (Day day : Day.values()) {\n            System.out.println(day + \" is a \" + day.getType());\n        }\n    }\n}\n</code></pre> <p>\u6211\u4eec\u4e3e\u4e86\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c<code>MONDAY</code>...\u90a3\u4e9b\u90fd\u662fDay\u7684\u5b9e\u4f8binstance.\u7136\u540e\u5728\u5b9a\u4e49\u7684\u65f6\u5019\uff0c\u987a\u4fbf\u8c03\u7528\u4e86<code>Day</code>\u4e2d\u7684<code>construct function</code> <code>public Day(String type){ this.type = type;}</code> \u56e0\u4e3a\u5df2\u7ecf\u5728<code>Day</code>\u8fd9\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86 <code>private String type;</code> <code>type</code>\u8fd9\u4e2afield. \u90a3\u4e48\u4e0a\u9762\u7684\u7ed3\u679c\u8f93\u51fa\u51fa\u6765\u5c31\u662f <pre><code>MONDAY is a Workday\nTUESDAY is a Workday\nWEDNESDAY is a Workday\nTHURSDAY is a Workday\nFRIDAY is a Workday\nSATURDAY is a Weekend\nSUNDAY is a Weekend\n</code></pre></p>"},{"location":"Tutorial/Java/Java5/#57-reflection","title":"5.7 Reflection","text":"<p>\u7ec8\u4e8e\u5230Reflection\u4e86 \u8fd9\u4e2aJava\u7684\u7279\u6027 - GPT\u5982\u662f\u8bf4  - \u600e\u4e48\u4ed4\u7ec6\u7406\u89e3<code>reflection</code>\uff1f \u4e3a\u4ec0\u4e48\u53eb\u505a\u53cd\u5c04\uff1f \u8fd9\u4e2a\u662f\u4e00\u4e2a\u6765\u81ea\u7269\u7406\u5b66\u4e2d\u7684\u6982\u5ff5\uff0c\u53cd\u5c04\u7684\u672c\u8d28\u662f\"\u770b\u5230\u81ea\u5df1\u7684\u6837\u5b50\",\u800cJava\u4e2d\u7684\u53cd\u5c04\uff08Reflection\uff09\u673a\u5236\u4e5f\u7c7b\u4f3c\uff0c\u5b83\u5141\u8bb8\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u65f6\u5019\u201c\u67e5\u770b\u201d\u81ea\u5df1\u7684\u7ed3\u6784\uff0c\u901a\u8fc7\u53cd\u5c04\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u5728\u4e0d\u660e\u786e\u77e5\u9053\u81ea\u5df1\u5305\u542b\u54ea\u4e9b\u7c7b\u3001\u65b9\u6cd5\u3001\u5c5e\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u5730\u68c0\u67e5\u64cd\u63a7\u81ea\u8eab\u7684\u5185\u90e8\u4fe1\u606f\u3002</p>"},{"location":"Tutorial/Java/Java5/#571-the-class-class","title":"5.7.1 The <code>Class</code> class","text":"<p>While your program is running, the Java runtime system always maintains what is called <code>runtime type identification</code> on all objects. This information keeps track of the class to which each object belongs.Runtime type information is used by the cirtual machine to select the correct methods to execute.</p> <ul> <li> <p>Just like an <code>Employee</code> object describes the properties of a particular employee,a <code>Class</code> object describes the properties of a particular class.</p> </li> <li> <p>If the class is a package, the package name is part of the class name.</p> </li> </ul> <pre><code>var generator = new Random();\nClass cl = generator.getClass();\nString name = cl.getName(); // name is set to \"java.util.Random\"\n</code></pre> <ul> <li>You can obtain a class object corresponding to a class name by using the static <code>forName</code> method.</li> </ul> <pre><code>String className = \"java.util.Random\";\nClass cl = Class.forName(className);// to obtain this class instance.\n</code></pre> <ul> <li><code>Class cl = Random.class</code></li> <li><code>Class cl = int.class</code> </li> </ul> <p>Another method to get the class instance.</p> <ul> <li>if(e.getClass() == Employee.class) \u8fd9\u4e2a\u6d4b\u8bd5\u4f1a\u629b\u51faException\uff0c\u5f53e\u662fEmployee\u7684subclass.\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2agetClass()\u8fd4\u56de\u7684\u7c7b\u578b\u662f\u5f3a\u7c7b\u578b\u7684\uff0c\u4e0d\u5305\u542b\u7ee7\u627f\u7684\u8f6c\u5316\uff0c\u5f97\u5230\u7684\u662f\u4ec0\u4e48\u90a3\u4e48\u5c31\u662f\u4ec0\u4e48\u3002</li> </ul>"},{"location":"Tutorial/Java/Java5/#572-a-primer-on-declaring-exception","title":"5.7.2 A primer on Declaring Exception","text":"<p>When an error occurs at runtime,a program can \"throw an Exception\"</p> <p>If you don't provide a \"handle\" (\"catches\" the exception and deals with it),the program will terminate and prints a message to the console.</p>"},{"location":"Tutorial/Java/Java5/#573-resources","title":"5.7.3 Resources","text":"<p>Classes often have associated data files, such as: - Image and sound files - Text files with message strings and button labels.</p>"},{"location":"Tutorial/Java/Java5/#574-using-reflection-to-analyze-the-capabilities-of-classes","title":"5.7.4 Using Reflection to Analyze the capabilities of classes.","text":"<ul> <li>First, there are 3 classes in the \\(java.lang.reflect\\) packages</li> <li>\\(Field\\)</li> <li>\\(Method\\)</li> <li>\\(Constructor\\) they describe the fields, methods, and constructors of a class respectively.</li> </ul> <p>\u5176\u5b9e\u53cd\u5c04\u7684\u8fd9\u4e2a\u529f\u80fd\u5f88\u597d\u7406\u89e3\uff0c\u4e5f\u5c31\u662f\u83b7\u53d6\u8fd9\u4e2aclass\u4e2d\u7684\u4e00\u4e9bfields,methods,constructor\u7684\u5143\u4fe1\u606f\u3002 - <code>getName</code>  return the name of the item - <code>getType</code> return the type Class - <code>getModifiers</code> return an integer with various bits turned on and off, describes the modifiers used,such as \\(public\\) and \\(static\\) - <code>getFileds</code>/<code>getMethods</code>/<code>getConsstructors</code> return arrays of the public fields,methods,and constructors that the class support.</p>"},{"location":"Tutorial/Java/Java5/#575-using-reflection-to-analyze-objects-at-runtime","title":"5.7.5 Using Reflection to Analyze Objects at Runtime","text":"<p>The obove Session we saw how find out the <code>names</code> and <code>types</code>.The following part, we will go one step further and actually look at the contents of the fields.</p> <p> Reflection lets you look at fields of objects that were not known at compile time.</p> <ul> <li><code>getDeclaredFiled</code>\u662f\u53ef\u4ee5\u8bbf\u95ee\u79c1\u6709\u5b57\u6bb5\u7684\u3002</li> </ul> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u6bb5\u600e\u4e48\u7406\u89e3\u5462\uff1f\u5c31\u662f\u53ef\u4ee5\u628a\u4ed6\u60f3\u6210\u662fExcel\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u9996\u5148<code>Class cl = harray.getClass()</code> \u8fd4\u56de\u4e86\u4e00\u4e2a<code>Class</code>\u7c7b\u7684\u5b9e\u4f8b<code>Employee</code>\u3002 <code>Fields f = cl.getDeclaredField(\"name\")</code> \u8fd9\u4e2a<code>f</code>\u4e5f\u5c31\u662f\u83b7\u5f97\u4e86\u6709\u5173<code>name</code>\u5b57\u6bb5\u7684\u6240\u6709\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8bf4\u662f\u50cf\u6570\u636e\u5e93\u4e2d\u7684\u83b7\u53d6\u4e86\u67d0\u4e2a\u5217\u7684\u6240\u6709\u5185\u5bb9\uff0c\u6211\u4eec\u7684<code>Object v = f.get(harry)</code>,<code>Object v</code> \u5c31\u83b7\u5f97\u7684\u662f<code>String</code>\u7c7b\u578b\u7684<code>Harry Hacker</code>\u4e5f\u5c31\u662f\u8fd9\u4e00\u5217name\u5b57\u6bb5\u4e2d\uff0c\u5c5e\u4e8e<code>harry</code>\u7684name\u3002</p> <p>but the code above has a problem -- The machanism of Java lets you find out what fields an object has,but it won't let you read and write the values of the fields, unless you have permission.</p> <p><code>field.setAccessible(true) // \u7ed5\u8fc7\u9650\u5236\u8bbf\u95ee</code></p> <p>\u5177\u4f53\u600e\u4e48\u7406\u89e3 \"Reflection lets you look at fields of objects that were not known at compile time.\" \u8fd9\u53e5\u8bdd\u5462\uff1f \u6211\u4eec\u62ff\u5e8f\u5217\u5316\u6765\u4e3e\u4f8b</p> <p><pre><code>import java.lang.reflect.Field;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ObjectSerializer {\n\n    public static Map&lt;String, Object&gt; serialize(Object obj) throws IllegalAccessException {\n        Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();\n        Class&lt;?&gt; cl = obj.getClass();\n\n        for (Field field : cl.getDeclaredFields()) {\n            field.setAccessible(true);  // \u7ed5\u8fc7\u8bbf\u95ee\u9650\u5236\n            result.put(field.getName(), field.get(obj));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) throws IllegalAccessException {\n        Employee emp = new Employee(\"Alice\", 75000, 12, 5, 1990);\n        Map&lt;String, Object&gt; serializedData = serialize(emp);\n        System.out.println(serializedData);\n    }\n}\n</code></pre> \u8f93\u51fa\u7ed3\u679c <pre><code>{name=Alice, salary=75000, hireMonth=12, hireDay=5, hireYear=1990}\n</code></pre></p> <p>\u4e0a\u9762\u7684\u4f8b\u5b50\u5176\u5b9e\u5c31\u662f\u5f88\u597d\u7684\u53cd\u5e94\u4e86\u901a\u8fc7Java\u7684\u53cd\u5c04\u673a\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u52a8\u6001\u7684\u8bbf\u95ee\u8fd9\u4e9b\u5b57\u6bb5\u5e76\u4e14\u83b7\u53d6\u4ed6\u4eec\u7684\u503c\u3002\u5728serialize\u65b9\u6cd5\u7528\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5b83\u4f9d\u7136\u53ef\u4ee5\u5de5\u4f5c\uff0c\u800c\u4e0d\u9700\u8981\u4e3a\u6bcf\u4e00\u79cd\u5bf9\u8c61\u90fd\u5b9a\u4e49\u5355\u72ec\u7684\u63a5\u6536/\u5224\u65ad\u673a\u5236\u3002\u56e0\u4e3a\u5b83\u4eec\u9700\u8981\u652f\u6301\u591a\u79cd\u4e0d\u540c\u7684\u5bf9\u8c61\u7ed3\u6784\uff01</p>"},{"location":"Tutorial/Java/Java5/#576-using-reflection-to-write-generic-array-code","title":"5.7.6 Using Reflection to write generic Array Code","text":"<p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u8981\u6ce8\u610f\u7684\u70b9\u662f \u6587\u4e2d\u63d0\u53ca\u4e86\u8fd9\u4e00\u4e2apoint\uff1a</p> <p>It is legal to cast an Employee[ ] temporarily to an Object[ ] array and then cast it back,but an array that started its life as an Object[ ] array can never be cast into an Employee[ ] array. \u6240\u4ee5\u6211\u4eec\u9700\u8981\u5229\u7528\u5230Reflection Package</p> <ul> <li>First : get the class object of <code>a</code></li> <li>Confirm that a it is indeed an array</li> <li>Use the <code>getComponentType</code> method of the Class (which is defined only for class objects that represent arrays) to find the right type for the array.</li> </ul>"},{"location":"Tutorial/Java/Java5/#577-invoking-arbitrary-methods-and-constructors","title":"5.7.7 Invoking Arbitrary Methods and Constructors","text":"<p>Because Java has no function pointer that, it can't like C / C++ you can execute an arbitrary function. But the following sessions we will introduce a new way to invoke the function.</p> <p>\u5176\u5b9e\u8ddf\u4e0a\u9762\u7684\u9053\u7406\u4e00\u6837\uff0c\u6211\u4eec\u6709<code>getMethod</code> \u548c<code>getConstructor</code> method\u6765\u83b7\u53d6\u5bf9\u5e94\u7684Method\u548cConstructor\u7684\u4e3b\u4f53\u3002 \u4e0b\u9762\u662f\u51e0\u4e2a\u4f8b\u5b50 - Example for Constructor  \u90a3\u4e48<code>cons</code>\u5c31\u7c7b\u4f3c\u4e8e\u4e00\u4e2amethod pointer\u4e86</p> <ul> <li>Example for Method  \u4e0a\u9762\u7684<code>square</code>\u548c<code>sqrt</code>\u5c31\u4ee3\u8868\u7740\u7c7b\u4f3cmethod pointer.</li> </ul>"},{"location":"Tutorial/Java/Java6/","title":"Chapter6 Interface","text":"<p>This chapter is about several advanced techniques that are commonly used. Despite their less obvious nature, you will need to master them to complete your Java tool chest.</p> <p>The Interfaces is a way of describing what classes should do, without specifying how they should do it.  \u600e\u4e48\u7406\u89e3\u5462\uff1f\u63a5\u53e3\u5c31\u662f\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u7c7b\u9700\u8981\u505a\u4ec0\u4e48\uff0c\u4f46\u6ca1\u6709\u8be6\u7ec6\u8bb2\u6e05\u695a\u4ed6\u4eec\u600e\u4e48\u505a\u3002</p>"},{"location":"Tutorial/Java/Java6/#61-interface","title":"6.1 Interface","text":"<p>Typically, the supplier of some service states: \"If your class conforms to a particular interface, then I'll perform the service.\" \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u67d0\u4e2a\u7c7b\u7b26\u5408\u63d0\u4f9b\u7684\u63a5\u53e3\u6807\u51c6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u63a5\u53e3\u3002</p> <pre><code>// An example of interface;\npublic interface Comparable{\n    int compareTo(Object other);\n}\n</code></pre> <ul> <li>This means that every class which want to implements the interface must have this method <code>compareTo</code>, and the method must take an <code>Object</code> parameter and return an integer.</li> <li>All methods of an interface must be <code>public</code>, so you have not need to add the public into the method.</li> <li>An interface can have multiple methods.</li> <li>Interfaces never have instance fields.</li> </ul>"},{"location":"Tutorial/Java/Java6/#611-implement-the-interface","title":"6.1.1 Implement the interface","text":"<ul> <li> <p>Step1: declare that your class intends to implement the given interface. <code>class Employee implements Comparable</code></p> </li> <li> <p>Step2 : supply definitions for all methods in the interface</p> </li> </ul> <pre><code>public interface Comparable{\n    int compareTo(Object other);\n}\n\nclass Employee implements Comparable&lt;Employee&gt;{\n    public int compareTo(Object otherObject){\n        Employee other = (Employee) otherObject;\n        return Double.compare(salary,other.salary);\n    }\n}\n</code></pre> <p>You see that why can't the Employee class simply provide a <code>compareTo</code> method without implementing the <code>Comparable</code> interface?</p> <p>The reason is that the Java Programming language is strongly typed(\u5f3a\u7c7b\u578b),when making a method calling, the compiler needs to be able to check that the method actually exists. \u4e5f\u5c31\u662f\u8bf4\u5176\u5b9eJava\u56e0\u4e3a\u662f\u5f3a\u7c7b\u578b\u7684\uff0c</p> <p>- GPT \u5982\u662f\u8bf4\uff1a\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u63a5\u53e3 </p>"},{"location":"Tutorial/Java/Java6/#612-the-properties-of-interfaces","title":"6.1.2 The properties of Interfaces","text":"<p>Interfaces are not classes. In particular, you can never use <code>new</code> operator to instantiate an interface.</p> <pre><code>Comparable x; // OK\nx = new Employee(...);// OK provided Employee implements Comparable.\n</code></pre> <ul> <li>Just as the same as you can build hierarchies of classes, you can <code>extend</code> interfaces.  \u8fd9\u91cc <code>extends</code>\u8fd9\u4e2a\u5173\u952e\u8bcd\u5c31\u51fa\u73b0\u4e86\uff0c\u50cfJava\u7c7b\u90a3\u6837\u53ef\u4ee5\u6709\u7ee7\u627f\uff0c\u5bf9\u4e8e\u63a5\u53e3\u6765\u8bf4\u4e5f\u53ef\u4ee5\u6709\u62d3\u5c55\uff0c\u4e5f\u5c31\u662f<code>extends</code>.</li> </ul> <pre><code>public interface powered extends Moveable{\n    double milesPerGallon();\n}\n\npublic interface powered extends Moveable{\n    double milesPerGallon();\n    double SPEED_LIMIT = 95;\n    // a public static final constant;\n}\n</code></pre> <ul> <li>each class can implemet many interfaces.   the designer of Java chose not to support multiple inheritance, because it makes the language either <code>complex</code> and <code>less efficient</code>.</li> </ul>"},{"location":"Tutorial/Java/Java6/#614-static-and-private-methods","title":"6.1.4 Static and Private Methods","text":"<p>As of Java 8, you are allowed to add static methods to interfaces.</p> <p>As of Java 9, methods in an interface can be <code>private</code>. A private method can be static or an instance method. Since private methods can only be used in the methods of the interface itself, their use is limited to being helper methods for the other methods of the interface.</p>"},{"location":"Tutorial/Java/Java6/#615-default-methods","title":"6.1.5 Default Methods","text":"<p>It is a modifier. Actually, it is not very useful because of the reason that you may override it many times. But in the iterator, <code>remove()</code> method is very useful.</p> <p>\u5176\u5b9e\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u63a5\u53e3\uff0c\u5f88\u597d\u7406\u89e3\uff0c\u6709\u4e9b\u65b9\u6cd5\u662f\u53ef\u4ee5\u4e0d\u7528\u91cd\u5199\u7684\uff0c\u90a3\u4e48\u67d0\u4e2a\u7c7b\u5982\u679c\u7b26\u5408\u8fd9\u4e2a\u63a5\u53e3\u7684\u8981\u6c42\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u800c\u4e14\u6709\u4e86 <code>default</code>\u5173\u952e\u5b57\uff0c\u90a3\u4e9b\u4e0d\u4f9d\u8d56\u7c7b\u5b9e\u73b0\u672c\u8eab\u7ec6\u8282\u7684\u65b9\u6cd5\u5c31\u4e0d\u7528\u91cd\u5199\uff0c\u76f4\u63a5\u8c03\u7528\u5373\u53ef\u3002</p> <pre><code>public interface Iterator&lt;E&gt;{\n    // E is the type of the element;\n    boolean hasNext();\n    E next();\n    default void remove(){\n        throw new UnsupportedOperationException(\"remove\");\n    }\n}\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2a\u73b0\u5b9e\u7684\u95ee\u9898\uff0c\u5c31\u662f\u5f88\u5e38\u89c1\u7684<code>interface evolution</code>\uff0c\u6bd4\u5982\u6211\u4eec\u8003\u8651\u4e00\u4e2a<code>Collection</code>\u63a5\u53e3\uff0c\u7528\u4e86\u5f88\u591a\u5e74\u4e86\uff0c\u7136\u540e\u6211\u4eec\u6709\u4e2a\u7c7b\u8c03\u7528\u4e86\u8fd9\u4e2a\u63a5\u53e3\u3002\u4f46\u662f\u968f\u7740\u7248\u672c\u7684\u66f4\u65b0\uff0c\u6211\u4eec\u5728<code>Collection</code>\u8fd9\u4e2a\u63a5\u53e3\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4f46\u662f\u5982\u679c\u4e0d\u6dfb\u52a0<code>Default</code>\u5173\u952e\u5b57\u7684\u8bdd\uff0c\u5c31\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u95ee\u9898\uff0c\u65e0\u6cd5\u7f16\u8bd1\u5e76\u4e14\u4f1a\u629b\u51fa\u9519\u8bef\u3002\u90a3\u4e48\u5bf9\u4e8e\u5927\u9879\u76ee\u7684\u8bdd\u5c31\u76f4\u63a5gg\u3002\u6240\u4ee5\u6dfb\u52a0<code>Default</code>\u5173\u952e\u5b57\u53ef\u4ee5\u89c4\u907f\u8fd9\u4e2a\u95ee\u9898\u3002\u53ef\u4ee5\u5b89\u5fc3\u7684\u7ed9\u63a5\u53e3\u6dfb\u52a0\u65b0\u7684methods\u6216\u8005methods\u66f4\u6539\u4e86\u3002</p>"},{"location":"Tutorial/Java/Java6/#616-resolving-the-default-method-conflicts","title":"6.1.6 Resolving the Default Method conflicts","text":"<p>\u5f53\u4e00\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u4ee5<code>default</code>\u5728\u4e00\u4e2a\u63a5\u53e3\u4e2d,\u7136\u540e\u53c8\u540c\u6837\u7684\u5b9a\u4e49\u5728\u4e00\u4e2a\u8d85\u96c6\u4e2d(superclass)\uff0c\u90a3\u4e48Java\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u6837\u7684\u51b2\u7a81\u5462\uff1f</p> <ul> <li>\u7236\u7c7b\u8d62\u3002If a superclass provides a concrete method, default methods with the same name and parameter types are simply ignored.</li> <li>Interface Clash.(\u540c\u4e00\u4e2a\u65b9\u6cd5\u51fa\u73b0\u5728\u4e86\u4e24\u4e2a\u63a5\u53e3\u4e2d)\u90a3\u4e48\u5c31\u9700\u8981<code>override</code>\u6765\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u4e86\u3002\u53ef\u4ee5\u907f\u514d\u51fa\u73b0conflict\u7684\u60c5\u51b5\u3002</li> </ul>"},{"location":"Tutorial/Java/Java6/#617-interfaces-and-callbacks","title":"6.1.7 Interfaces and callbacks","text":"<p><code>callback</code>, represents that you specify the action that should occure whenever a particular event happens. \u4e5f\u5c31\u662f\u6709\u4e2a\u53cd\u9988\u673a\u5236\u3002</p> <p>\u4e0b\u9762\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5c31\u662f\u5173\u4e8e <code>ActionListener</code> <pre><code>// here offer an interface;\npublic interface ActionListener{\n    void actionPerformed(ActionEvent event);\n}\n\n// We call the interface;\nclass TimePrinter implements ActionListener{\n    // override the interface;\n    /**\n     * @param event the description of the event;\n     */\n    public void actionPerformed(ActionEvent event){\n        // \n        System.out.println(\"At the tone,the time is \"+Instant.ofEpochMilli(event.getWhen()));\n        Toolkit.getDefaultToolkit().beep();\n    }\n}\n</code></pre></p>"},{"location":"Tutorial/Java/Java6/#618-the-comparator-interface","title":"6.1.8 The Comparator Interface","text":"<p>\u4e0a\u9762\u5c31\u662f\u4e00\u4e2aJava\u7684sort\u4f17\u591a\u91cd\u8f7d<code>overloading</code>\u65b9\u6cd5\u4e2d\u7684\u4e00\u4e2a,\u53ef\u4ee5\u4f20\u5165\u6bd4\u8f83\u5668</p> <pre><code>var comp = new lengthComaprator();\nif(comp.compare(words[i],words[j])&gt;0)...\n\n// method2 \nString[] friends = {\"1\",\"2\"};\n// \u8fd9\u91cc\u5c31\u662f\u5bf9\u5e94\u4e0a\u9762\u7684 sort(T[] a,Comparator&lt;? super T&gt;c)\nArray.sort(friends,new lengthComparator());\n</code></pre>"},{"location":"Tutorial/Java/Java6/#619-object-cloning","title":"6.1.9 Object Cloning","text":"<p>here introduce an interface that about the object cloning;</p> <p>\u6211\u4eec\u8fd9\u91cc\u8981\u533a\u5206\u4e00\u4e0b <code>shallow clone</code> \u548c <code>deep clone</code> \uff1a - <code>shallow clone</code>:\u662f\u8fd0\u7528\u5230 immutable \u4e0d\u53ef\u53d8\u7684\u8bdd\uff0c\u90a3\u4e48\u662f\u53ef\u4ee5\u5229\u7528\u6d45\u514b\u9686\u7684.\u53ea\u590d\u5236\u5bf9\u8c61\u7684\u7b2c\u4e00\u5c42\u6570\u636e\uff0c\u5bf9\u4e8e\u5f15\u7528\u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u5b83\u53ea\u590d\u5236\u5f15\u7528\u5730\u5740\uff0c\u800c\u4e0d\u4f1a\u590d\u5236\u5f15\u7528\u5bf9\u8c61\u672c\u8eab\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u539f\u59cb\u5bf9\u8c61\u7684\u5f15\u7528\u7c7b\u578b\u5b57\u6bb5\u6307\u5411\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48\u6d45\u62f7\u8d1d\u540e\u7684\u8be5\u5b57\u6bb5\u5c06\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u56e0\u6b64\uff0c\u4fee\u6539\u62f7\u8d1d\u5bf9\u8c61\u4e2d\u7684\u5f15\u7528\u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u539f\u6765\u7684\u4e5f\u4f1a\u8fdb\u884c\u6539\u53d8\u3002 - <code>deep clone</code> : \u662f\u8fd0\u7528\u6df1\u62f7\u8d1d\uff0c\u4e00\u4e2a\u8bcd\u6765\u5f62\u5bb9 \u5b8c\u5168\u72ec\u7acb\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u9012\u5f52\u7684\u62f7\u8d1d\u5176\u5305\u542b\u7684\u5168\u90e8\u5f15\u7528\u5bf9\u8c61\uff0c\u5e76\u4e14\u521b\u9020\u51fa\u5168\u65b0\u7684\u5b9e\u4f8b\u3002\u4e0d\u4f1a\u51fa\u73b0\u4e0a\u9762\u7684\u60c5\u51b5\u3002 <pre><code>// shallow clone\nclass ShallowCloneExample implements Cloneable {\n    int value;\n    int[] array;\n\n    public ShallowCloneExample(int value, int[] array) {\n        this.value = value;\n        this.array = array;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone(); // \u4ec5\u590d\u5236\u7b2c\u4e00\u5c42\n    }\n}\n\n// \u4f7f\u7528\u6d45\u62f7\u8d1d\nShallowCloneExample original = new ShallowCloneExample(10, new int[]{1, 2, 3});\nShallowCloneExample clone = (ShallowCloneExample) original.clone();\n\n\n// deep clone\nclass DeepCloneExample implements Cloneable {\n    int value;\n    int[] array;\n\n    public DeepCloneExample(int value, int[] array) {\n        this.value = value;\n        this.array = array.clone(); // \u9012\u5f52\u62f7\u8d1d\u5f15\u7528\u7c7b\u578b\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        DeepCloneExample deepClone = (DeepCloneExample) super.clone();\n        deepClone.array = array.clone(); // \u624b\u52a8\u514b\u9686\u6bcf\u4e2a\u5f15\u7528\u7c7b\u578b\n        return deepClone;\n    }\n}\n\n// \u4f7f\u7528\u6df1\u62f7\u8d1d\nDeepCloneExample original = new DeepCloneExample(10, new int[]{1, 2, 3});\nDeepCloneExample clone = (DeepCloneExample) original.clone();\n</code></pre> \u867d\u7136<code>deep clone</code>\u53ef\u4ee5\u5b8c\u5168\u72ec\u7acb\u539f\u59cb\u7684\u5bf9\u8c61\uff0c\u4f46\u6548\u7387\u6bd4\u8f83\u4f4e\uff0c\u56e0\u4e3a\u5f53\u4e00\u4e2a\u7c7b\u4e2d\u6240\u5305\u542b\u7684\u5b57\u6bb5\u592a\u591a\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u9012\u5f52\u7684\u62f7\u8d1d\u5c31\u4f1a\u5bfc\u81f4\u6548\u7387\u4f4e\u4e0b\u3002</p>"},{"location":"Tutorial/Java/Java6/#62-lambda-expressions","title":"6.2 Lambda expressions","text":"<p>Why use the Lambda expressions? - A lambda expression is a block of code that you can pass around so it can be executed later, once or multiple times. \u4e00\u4e2a\u4ee3\u7801\u6bb5\uff0c\u4f60\u53ef\u4ee5\u7acb\u523b\u6267\u884c\uff0c\u5e76\u4e14\u6267\u884c\u5f88\u591a\u6b21</p> <p>\u53ef\u80fd\u4f60\u4f1a\u60f3\uff0c\u90a3\u4f60\u8c03\u7528\u51fd\u6570\u591a\u6b21\u4e0d\u4e5f\u662f\u4e00\u6837\u7684\u5417\uff1f\u8fd8\u771f\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3aJava\u662fOOP\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u6240\u6709\u7684<code>method</code>\u90fd\u662f\u57fa\u4e8e<code>class/instance</code>\u7684\uff0c\u90a3\u4e48\u5982\u679c\u4f60\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u591a\u6b21\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u9700\u8981\u91cd\u590d\u521b\u5efa\u5b9e\u4f8b\uff0c\u6700\u597d\u60f3\u5230\u7684\u4f8b\u5b50\u5c31\u662f<code>sort</code>\u4e2d\u7684<code>comparator</code>.\u800c<code>lambda expressions</code>\u5c31\u5f88\u5bb9\u6613\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u8003\u8651\u4e8b\u60c5\u7684\u672c\u8d28\uff1a\u5176\u5b9e\u5c31\u662f\u8ddf\u8bed\u8a00\u7684\u7279\u6027\u606f\u606f\u76f8\u5173\u7684\uff0cJava\u662f\u6700\u5178\u578b\u7684OOP\u8bed\u8a00\uff0c\u90a3\u4e48\u4f60\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u57fa\u4e8eclass/instance\u7684\uff0c\u4f60\u8c03\u7528\u65b9\u6cd5\u5c31\u8981\u8003\u8651\u521b\u5efa\u5bf9\u8c61\u7684\u5f00\u9500</p>"},{"location":"Tutorial/Java/Java6/#622-the-syntax-of-lambda-expressions","title":"6.2.2 The syntax of Lambda Expressions","text":"<ul> <li>we want to compute <code>first.length() - second.length()</code></li> <li>\u7136\u540e\u6211\u4eec\u8003\u8651,<code>first</code>\u548c<code>second</code>\u90fd\u662f<code>String</code>\u7c7b\u578b\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5199\u6210\u8fd9\u6837 <code>(String first,String second) -&gt;first.length()-second.length()</code></li> </ul> <p>\u6bd4\u8f83\u672c\u8d28\u7684\u8868\u8fbe\u5c31\u662f  parameters , the <code>-&gt;</code> arrow, and an expression - Another case is that our expression is a code block  <pre><code>// lambda expression;\n(String first,String second)-&gt;{\n    if(first.length()&lt;second.length())\n        return -1;\n    else if(first.length()&gt;second.length())\n        return 1;\n    return 0;\n}\n</code></pre></p> <ul> <li>if the lambda expression has no parameters that you still supply empty parentheses. <pre><code>()-&gt;{\n    for (int i=0;i&lt;100;i++)\n        System.out.println(i);\n}\n</code></pre></li> </ul> <p></p>"},{"location":"Tutorial/Java/Java6/#623-functional-interfaces","title":"6.2.3 Functional Interfaces","text":"<p>you'd better think of a lambda expression as a function, not an object, and to accept that it can be passed to a functional interface.</p> <p><code>@FunctionalInterface</code>  \u8fd9\u4e2a\u6ce8\u91ca\u7684\u76ee\u7684\u5c31\u662f\u663e\u5f0f\u58f0\u660e\u4e00\u4e2a\u63a5\u53e3\u662f\u51fd\u6570\u5f0f\u63a5\u53e3\u3002\u5982\u679c\u4e00\u4e2a\u63a5\u53e3\u4f7f\u7528\u4e86\u8fd9\u4e2a\u6ce8\u91ca\uff0c\u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u5b83\u53ea\u5305\u542b\u5230\u4e00\u4e2a<code>method</code>.</p> <ul> <li>You can supply a lambda expression whenever an object of an interface with a single abstract method is expected.</li> </ul> <pre><code>var timer = new Timer(1000,event-&gt;{\n    System.out.println(\"At the tone\"+Instance.ofEpochMilli(event.getWhen()));\n});\n</code></pre> <p>Actually,conversion to a functional interfaceis the only thing that you can do with a lambda expression in Java.</p>"},{"location":"Tutorial/Java/Java6/#624-method-references","title":"6.2.4 Method References","text":"<ul> <li>Example 1 :   Sometimes, you may call <code>var timer = new Tiemr(1000,event -&gt; System.out.println(event))</code></li> <li>Example 2:   \u8fd9\u4e2a\u65f6\u5019\uff0c\u65b9\u6cd5\u7684\u5f15\u7528\u5c31\u51fa\u6765\u4e86   <code>var timer = new Timer(1000,System.out::println)</code>   This is called Method Reference,It directs the compiler to produce an instance of a functional interface,overriding the single abstract method of the interface to call the given method. </li> <li>\u53ef\u80fd\u6709\u65f6\u5019\uff0c\u4e00\u4e2a\u51fd\u6570\u7b7e\u540d\u6709\u591a\u4e2a<code>overloading</code>\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u4f7f\u7528<code>method reference</code>\u5c31\u53ef\u4ee5\u8ba9\u7f16\u8bd1\u5668\u53bb\u5e2e\u4f60\u5bfb\u627e\u53ef\u4ee5\u4f7f\u7528\u7684\uff0c\u4f8b\u5982 <code>Max</code>\u5c31\u6709\u4e24\u79cd<code>for integer</code>\u548c<code>for double</code></li> </ul>"},{"location":"Tutorial/Java/Java6/#625-constructor-references","title":"6.2.5 Constructor References","text":"<p>\u50cf Method Reference \u4e00\u6837\uff0c\u5176\u5b9e\u5c31\u662f\u6784\u9020\u51fd\u6570\u7684\u5f15\u7528\u3002</p> <p>\u6211\u4eec\u4f7f\u7528<code>Person[] people = stream.toArray(Person[]::new)</code> \u56e0\u4e3a<code>Person::new</code>\u5c31\u662fconstructor reference.</p>"},{"location":"Tutorial/Java/Java6/#626-variable-scope","title":"6.2.6 Variable Scope","text":"<p>\u5728Lambda\u533f\u540d\u51fd\u6570\u4e2d\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u4e00\u79cd\u60c5\u51b5\uff0c\u5c31\u662f\u4f60\u4f1a\u8fd0\u7528\u5230\u8fd9\u4e2amethod\u57df\u4e2d\u7684\u4f20\u5165\u7684parameters.</p> <p>\u4e0b\u9762\u662f\u4e24\u4e2a\u4f8b\u5b50 <pre><code>// legal\npublic static void reapeatMessage(String text,int delay){\n    ActionListener listener = event -&gt;{\n        System.out.println(text);\n        Toolkit.getDefaultToolkit().beep();\n    };\n    new Timer(delay,listener).start();\n}\n\n// illegal\npublic static void countDown(int start,int delay){\n    ActionListener listener = event -&gt;{\n        start -- ; // error;\n        System.out.println(start);\n    };\n    new Timer(delay,listener).start();\n}\n</code></pre></p> <p>\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u662f\u975e\u6cd5\u7684\uff0c\u867d\u7136Java\u53ef\u4ee5\u6355\u6349\u5230\u65b9\u6cd5\u4e2d\u4f20\u5165\u7684\u53c2\u6570\uff0c\u4f46\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7684\u3002\u5c31\u50cf\u8fd9\u4e2a\u4f20\u5165\u7684<code>start</code>\uff0c\u662f\u4e0d\u53ef\u53d8\u7684\u3002</p> <p>The rule is that any captured variable in a lambda expression must be <code>effectively final</code>.</p>"},{"location":"Tutorial/Java/Java6/#63-inner-class","title":"6.3 Inner class","text":"<p>An inner class is a class that is defined inside another class.</p> <ul> <li>Inner class can be hidden from other class in the same package.</li> <li>Inner class methods can access the data from the scope in which they are defined - include the data that would otherwise be private.</li> </ul>"},{"location":"Tutorial/Java/Java6/#64-service-loaders","title":"6.4 Service Loaders","text":"<p>JDK offers a simple machanism for loading services.</p>"}]}