{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Magnus \u7684\u5c0f\u7ad9","text":"You must not be afraid of dreaming a bit bigger! <p>\u5f88\u559c\u6b22\u7684\u4e00\u53e5\u8bdd\uff0c\u795d\u4f60\u4e5f\u795d\u6211</p>"},{"location":"about/","title":"About Me","text":""},{"location":"about/#introduce","title":"Introduce","text":"<ul> <li>\ud83d\udc4b Hi, I\u2019m @Magnus031</li> <li>\ud83d\udc40 I\u2019m a 2022 undergraduate student major in CS in Zhejiang University,China!</li> <li>\ud83c\udf31 I\u2019m currently learning ComputerScience and Economic!</li> </ul> <p>\ud83d\udceb How to reach me</p> <ul> <li>You can reach me at my E-mail zhouweizhan031@gmail dot com</li> <li>Also you can reach me at My qq 1478380198</li> </ul>"},{"location":"about/#language","title":"Language","text":"<ul> <li>\u524d\u7aef :<ul> <li>\u8bed\u8a00 : <ul> <li>HTML </li> <li>CSS </li> <li>TypeScript  </li> </ul> </li> <li>\u6280\u672f\u6808 : <ul> <li>Vue3 </li> <li>React </li> </ul> </li> </ul> </li> <li>\u540e\u7aef<ul> <li>\u8bed\u8a00 : <ul> <li>Java</li> <li>go ...</li> </ul> </li> <li>\u6280\u672f\u6808 : <ul> <li>SpringBoot</li> <li>Mybatis Mybatis-plus</li> </ul> </li> </ul> </li> </ul>"},{"location":"about/#plan","title":"Plan","text":"<ul> <li>\u76ee\u524d\u5728\u51c6\u5907\u8981\u996d</li> <li>Learn all kinds of CS and Economic Lectures</li> <li>\u559c\u6b22\u5199\u6587\u5b57</li> <li>\u6e38\u904d\u6bcf\u4e2a\u57ce\u5e02</li> </ul>"},{"location":"CS-courses/CN/TCP/","title":"TCP/IP","text":""},{"location":"CS-courses/CN/TCP/#introduction-tcpip","title":"Introduction TCP/IP \u534f\u8bae","text":"<p>\u5176\u5b9e\u6307\u4ee3\u7684\u662f\u5229\u7528IP\u8fdb\u884c\u901a\u4fe1\u65f6\u5019\u6240\u5fc5\u987b\u4f7f\u7528\u7684\u534f\u8bae\u7fa4\u7684\u7edf\u79f0 - \u5b9a\u4e49\uff1a \u5177\u4f53\u6765\u8bf4\uff0cIP \u6216 ICMP \uff0cTCP \u6216 UDP\uff0cTELNET \u6216FTP\uff0c\u4ee5\u53caHTTP\u7b49\u90fd\u662f\u5c5e\u4e8eTCP/IP\u7684\u534f\u8bae\uff0c\u4ed6\u4eec\u4e0eTCP\u6216IP\u5173\u7cfb\u7d27\u5bc6\uff0c\u56e0\u6b64\u4e5f\u6709\u53eb\u505a TCP/IP\u4e3a\u7f51\u9645\u534f\u8bae\u65cf\u3002</p> <p></p> <ul> <li>\u4f20\u8f93\u5c42 -&gt; It is called Segment</li> <li>\u7f51\u7edc\u5c42 -&gt;It is called Packet </li> <li>\u6570\u636e\u94fe\u8def\u5c42 -&gt; It is called Frame</li> </ul>"},{"location":"CS-courses/CN/TCP/#_1","title":"\u7f51\u7edc\u5c42","text":""},{"location":"CS-courses/CN/TCP/#ip","title":"IP","text":"<p>IP \u5730\u5740 \u6307\u7684\u662f\u5bf9\u65b9\u4e3b\u673a\u7684\u6807\u8bc6\u7b26</p> <ul> <li>\u7531\u4e8e\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u8bbe\u8ba1\u662f\u5206\u5c42\u8bbe\u8ba1\uff0c\u6781\u5176\u7684\u62bd\u8c61\u4e0e\u5c01\u88c5\uff0c\u8fd9\u5bfc\u81f4\u65e0\u8bba\u6570\u636e\u94fe\u8def\u5c42\u662f\u600e\u4e48\u4f20\u64ad\u7684\uff0c\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230\u4e24\u4e2a\u5229\u7528IP\u5730\u5740\u4f20\u8f93\u7684\u8bbe\u5907\u4f20\u8f93\u8fc7\u7a0b\u3002</li> </ul>"},{"location":"CS-courses/CN/TCP/#_2","title":"\u7279\u70b9","text":"<ul> <li>\u4e0d\u5177\u6709\u91cd\u53d1\u673a\u5236\uff0c\u5373\u4f7f\u662f\u5206\u7ec4\u6570\u636e\u5305\u672a\u80fd\u5230\u8fbe\u5bf9\u7aef\u4e3b\u673a\uff0c\u4e5f\u4e0d\u4f1a\u8fdb\u884c\u91cd\u53d1\uff0c\u56e0\u6b64\u662f \u975e\u53ef\u9760\u6027\u4f20\u8f93\u534f\u8bae</li> </ul>"},{"location":"CS-courses/CN/TCP/#icmp","title":"ICMP","text":"<p>Internet Control Message Protocol \u4e92\u8054\u7f51\u63a7\u5236\u4fe1\u606f\u534f\u8bae</p> <p>\u4f5c\u7528\u662f\u53d1\u9001\u7aef\u7684IP\u6570\u636e\u5728\u53d1\u9001\u9014\u4e2d\u5982\u679c\u9047\u5230\u4e86\u5f02\u5e38\uff0c\u65e0\u6cd5\u6700\u7ec8\u5230\u8fbe\u5bf9\u7aef\uff0c\u90a3\u4e48\u9700\u8981\u7ed9\u53d1\u9001\u7aef\u53d1\u9001ICMP\u7684\u53d1\u751f\u5f02\u5e38\u7684\u901a\u77e5\u3002\u6709\u65f6\u4e5f\u7528\u6765\u8fdb\u884c\u7f51\u7edc\u8bca\u65ad\u5065\u5eb7\u72b6\u51b5\u3002</p> <p>\u56e0\u4e3aIP\u534f\u8bae\u662f\u4e0d\u53ef\u91cd\u4f20\u7684\u534f\u8bae\uff0c\u90a3\u4e48\u5728\u53d1\u751f\u6545\u969c\u65f6\uff0c\u5f88\u81ea\u7136\u7684\u8054\u60f3\u5230\u9700\u8981\u8ba9\u5bf9\u65b9\u77e5\u9053\u6211\u4eec\u54ea\u91cc\u51fa\u9519\u4e86\uff0cICMP\u5c31\u626e\u6f14\u4e86\u8fd9\u4e2a\u89d2\u8272\u3002</p>"},{"location":"CS-courses/CN/TCP/#_3","title":"\u4f20\u8f93\u5c42","text":"<p>\u4f20\u8f93\u5c42\u6700\u91cd\u8981\u7684\u529f\u80fd\u5c31\u662f\u80fd\u591f\u8ba9\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u5b9e\u73b0\u901a\u4fe1\u3002\u56e0\u4e3a\u53cc\u65b9\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7740\u8bb8\u8bb8\u591a\u591a\u7684\u7a0b\u5e8f\uff0c\u90a3\u4e48\u8981\u5206\u6e05\u695a\u6211\u4eec\u662f\u54ea\u51e0\u4e2a\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u5c31\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u6240\u4ee5\u7aef\u53e3\u51fa\u73b0\u4e86\u3002</p> <p>\u540c\u65f6\u4f20\u8f93\u5c42\u6709\u4e24\u79cd\u4f20\u8f93\u534f\u8bae TCP (transfer control protocol)\u4f20\u8f93\u63a7\u5236\u534f\u8bae \u4e0e UDP (User Datagram protocol) \u7528\u6237\u6570\u636e\u4f20\u8f93\u534f\u8bae</p> <p>\u53ef\u4ee5\u7b80\u5355\u7684\u7406\u89e3\u4e3a\u9001\u4fe1\u5458\u7ed9A\u5bb6\u9001\u4fe1\uff0c\u7136\u540eA\u5bb6\u4e2d\u6709\u5c0fB\uff0c\u5c0fC\uff0c\u5c0fD \u9001\u4fe1\u5458\u8981\u77e5\u9053\u5b83\u8981\u628a\u90ae\u4ef6\u9001\u7ed9\u8c01\u3002  </p>"},{"location":"CS-courses/CN/TCP/#port","title":"Port \u7aef\u53e3\u53f7","text":"<p>\u4e3a\u4e86\u5206\u6e05\u8fd9\u4e2a\u6570\u636e\u5305\u662f\u53d1\u9001\u7ed9\u8c01/\u8c01\u9700\u8981\u63a5\u6536\uff0c\u5728\u4e00\u4e2a\u5bbf\u4e3b\u673ahost\u4e2d\u7684\u5404\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e5f\u5c31\u88ab\u5206\u914d\u4e86\u5bf9\u5e94\u7684\u7aef\u53e3\u53f7\u4fbf\u4e8e\u533a\u5206\u3002</p> <p> \u7528\u4e0a\u56fe\u6765\u7b80\u5355\u7684\u8bf4\u660e\uff0c\u5728\u53d1\u9001\u6765\u7684package\u88ab\u63a5\u6536\u4e86\uff0c\u5728\u67d0\u4e2adestination host\u63a5\u6536\u4e86\u8fd9\u4e2a\u6570\u636e\u5305\u7684\u65f6\u5019\uff0c\u4f1a\u89e3\u6784\u5f97\u5230TCPheader\u6587\u4ef6\u4e2d\u7684destination port 80\uff0c\u77e5\u9053\u662f\u53d1\u9001\u7ed980\u7aef\u53e3\u7684SYN\u5305\uff0c\u5c06\u6570\u636e\u8f6c\u53d1\u7ed980\u7aef\u53e3\uff0c\u7136\u540e\u4e00\u76f4\u76d1\u542c\u7740httpd\u7a0b\u5e8f\u5373\u53ef\u3002 \u8fd9\u4e9b\u670d\u52a1\u5668\u7a0b\u5e8f\u5728UNIX\u7cfb\u7edf\u4e2d\u88ab\u79f0\u4e3a\u662f\u5b88\u62a4\u8fdb\u7a0b\uff0c httpd sshd \u542f\u52a8\u4e00\u4e2a\u5c31\u8868\u793a\u5b83\u4eec\u63a5\u6536\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684inetd\uff08\u4e92\u8054\u7f51\u5b88\u62a4\u8fdb\u7a0b\uff09\uff0c\u8d85\u7ea7\u5b88\u62a4\u8fdb\u7a0b\u4f1a\u5728\u63a5\u6536\u5230\u5ba2\u6237\u7aef\u8bf7\u6c42\u4ee5\u540e\u521b\u5efa\u65b0\u7684\u8fdb\u7a0b\u5e76\u8f6c\u5316\u4e3a\u5176\u4ed6\u7684\u5b88\u62a4\u8fdb\u7a0b\u3002</p> <p>TCP \u548c UDP \u4e24\u8005\u5404\u6709\u5229\u5f0a\uff0c\u6ca1\u6709\u8c01\u8bf4\u6709\u7edd\u5bf9\u7684\u4f18\u4e0e\u52a3\uff0c\u53ea\u662f\u5b9e\u7528\u573a\u666f\u4e0d\u540c\uff0c\u7528\u5230\u7684\u65f6\u5019\u4e5f\u4e0d\u540c\u3002</p>"},{"location":"CS-courses/CN/TCP/#_4","title":"\u6570\u636e\u7684\u533a\u5206","text":"<p>\u56e0\u4e3a\u53ef\u80fd\u51fa\u73b0\u4e24\u4e2a\u6570\u636e\u5305\u7684 source port\u548cdestination port \u5b8c\u5168\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u5c31\u4e0d\u80fd\u7b80\u5355\u7684\u901a\u8fc7\u7aef\u53e3\u53f7\u6765\u533a\u5206\uff0c\u6709\u7684\u65f6\u5019\u751a\u81f3\u4e24\u4e2aIP\u5730\u5740\u4e5f\u90fd\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u4f46\u662f\u6240\u7528\u7684\u4f20\u8f93\u534f\u8bae\u4e0d\u4e00\u6837\uff0c\u53ef\u80fd\u662fTCP\u4e5f\u53ef\u80fd\u662fUDP\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8981\u4fdd\u8bc15\u6837\u4e1c\u897f\u5b8c\u5168\u4e00\u6837\uff0c\u624d\u80fd\u8bf4\u660e\u662f\u4e00\u4e2a\u901a\u4fe1\u3002 - \u6e90IP\u5730\u5740 - \u76ee\u6807IP\u5730\u5740 - \u534f\u8bae\u53f7 TCP/UDP - \u6e90\u7aef\u53e3\u53f7 - \u76ee\u6807\u7aef\u53e3\u53f7</p>"},{"location":"CS-courses/CN/TCP/#_5","title":"\u5982\u4f55\u5b9a\u4e49\u7aef\u53e3\u53f7","text":""},{"location":"CS-courses/CN/TCP/#_6","title":"\u6807\u51c6\u65e2\u5b9a\u7aef\u53e3\u53f7","text":"<p>\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u662f\u6709\u5b83\u65e2\u5b9a\u7684\u7aef\u53e3\u53f7\uff0c\u5c24\u5176\u662f\u4e00\u4e9bHTTP,TELNET,FTP\u7b49\u7684\u7aef\u53e3\u53f7\u90fd\u662f\u56fa\u5b9a\u7684\u3002(Well-Known Port Number)</p>"},{"location":"CS-courses/CN/TCP/#_7","title":"\u65f6\u5e8f\u5206\u914d\u6cd5","text":"<p>\u5982\u679c\u8bf4\u4e0a\u9762\u7684\u5206\u914d\u65b9\u6cd5\u662f\u9759\u6001\u7684\uff0c\u90a3\u4e48\u8fd9\u79cd\u65b9\u6cd5\u5c31\u662fDynamic\u52a8\u6001\u5206\u914d\u3002\u6b64\u65f6\u670d\u52a1\u7aef\u6709\u5fc5\u8981 \u786e\u5b9a\u76d1\u542c\u7aef\u53e3\u53f7\uff0c\u4f46\u662f\u63a5\u6536\u670d\u52a1\u7684\u5ba2\u6237\u7aef\u6ca1\u5fc5\u8981\u786e\u5b9a\u7aef\u53e3\u53f7\u3002\u53ef\u4ee5\u7b49\u7740\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u6765\u5206\u914d\uff0c\u8fd9\u6837\u64cd\u4f5c\u7cfb\u7edf\u5c31\u53ef\u4ee5\u52a8\u6001\u7684\u7ba1\u7406\u7aef\u53e3\u53f7\u4e86\u3002</p>"},{"location":"CS-courses/CN/TCP/#tcp","title":"TCP","text":"<p>Transfer Control Protocol</p> <p>TCP\u534f\u8bae\u662f\u4e00\u79cd\u9762\u5411\u6709\u8fde\u63a5\u7684\u4f20\u8f93\u5c42\u534f\u8bae\uff0c\u4ec0\u4e48\u662f\u6709\u8fde\u63a5\u5462\uff1f\u5c31\u662f\u8868\u793a\u7684\u662f\u6211\u4eec\u8981\u65f6\u523b\u8ddf\u8e2a\u4fe1\u606f\u7684\u4f20\u8f93\uff0c\u8981\u4e0d\u65ad\u7684\u7ed9\u53d1\u9001\u7aef\u8fdb\u884c\u76f8\u5e94 \u4e5f\u5c31\u662f sender \u548c receiver \u4e4b\u95f4\u662f\u9700\u8981\u4e92\u76f8\u53d1\u9001\u6d88\u606f\u786e\u8ba4\u8ddf\u8fdb\u6d88\u606f\u8fdb\u5ea6\u7684\u3002\u53ef\u4ee5\u6b63\u786e\u7684\u5904\u7406\u4e22\u5305/\u4e71\u5e8f/\u91cd\u4f20\u7684\u95ee\u9898\u3002\u4f46\u662f\u4e3a\u4e86\u5efa\u7acb\u4e0e\u65ad\u5f00\u94fe\u63a5\uff0c\u9700\u8981\u81f3\u5c117\u6b21\u7684\u53d1\u5305\u548c\u6536\u5305\uff0c\u5bfc\u81f4\u7f51\u7edc\u6d41\u7684\u6d6a\u8d39\uff0c\u56e0\u6b64\u4e0d\u592a\u9002\u5408\u7528\u5728\u89c6\u9891\u4f1a\u8bae\u8fd9\u79cd\u65b9\u9762\u3002</p>"},{"location":"CS-courses/CN/TCP/#_8","title":"\u7279\u70b9","text":"<ul> <li>\u53ef\u9760</li> <li>\u9762\u5411\u8fde\u63a5\u7684\u4f20\u8f93</li> <li>\u81ea\u63a7\u5236\uff0c\u6307\u7684\u662f\u4e0d\u9700\u8981\u5e94\u7528\u7a0b\u5e8f\u8003\u8651\uff0c\u5e94\u7528\u7a0b\u5e8f\u5728\u63a5\u6536\u6570\u636epackage\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u9ed8\u8ba4\u662f\u6b63\u786e\u5904\u7406\u8fc7\u7684\u6570\u636e\u4e86\u3002</li> <li>\u4f46\u662f\u6162\uff0c\u4e0d\u80fd\u7528\u4e8e\u5373\u65f6\u6027\u5f88\u9ad8\u7684\u4fe1\u606f\u4f20\u8f93</li> </ul>"},{"location":"CS-courses/CN/TCP/#tcp_1","title":"TCP\u673a\u5236","text":"<p>ack \u786e\u8ba4\u5e94\u7b54 (acknowledge)</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0cTCP\u5728\u4e24\u4e2a\u5bf9\u8c61\u5efa\u7acb\u8d77\u901a\u4fe1\u7684\u65f6\u5019\uff0c\u4f1a\u5f62\u6210\u7c7b\u4f3c\u5bf9\u8bdd\u4e00\u6837\u7684\u534f\u8bae\uff0c\u4f60\u53d1\u4ec0\u4e48\uff0c\u5bf9\u65b9\u5c31\u8981\u7ed9\u4f60\u5e94\u7b54\u4ec0\u4e48\uff0c\u76f4\u5230\u4f60\u63a5\u6536\u5230\u4e86\u8fd9\u4e2aack\u6807\u5fd7\uff0c\u8bf4\u660e\u4e4b\u524d\u7684\u4fe1\u606f\u5df2\u7ecf\u6210\u529f\u7684\u63a5\u6536\u5230\u4e86\u3002\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u6ca1\u6709\u6536\u5230\u4fe1\u606f\u56de\u590d\uff0c\u5c31\u8bf4\u660e\u9700\u8981\u91cd\u65b0\u53d1\u9001(RTO)\u3002\u8fd9\u91ccCS144\u7684lab\u91cc\u505a\u8fc7\u3002\u5177\u4f53\u673a\u5236\u4e0d\u7ec6\u8bb2</p>"},{"location":"CS-courses/CN/TCP/#_9","title":"\u5982\u4f55\u786e\u8ba4\u91cd\u53d1\u8d85\u65f6\u5462\uff1f","text":"<p>\u91cd\u53d1\u8d85\u65f6\u662f\u6307\u5728\u91cd\u53d1\u6570\u636e\u4e4b\u524d\uff0c\u7b49\u5f85\u786e\u8ba4\u5e94\u7b54\u5230\u6765\u7684\u90a3\u4e2a\u7279\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\uff08RTO\uff09\uff0c\u5f53\u65f6\u95f4\u8d85\u8fc7\u4e86RTO\u5219\u8bf4\u660e\u8981\u91cd\u65b0\u53d1\u9001\u8fd9\u4e2a\u6570\u636e\uff0c\u5f53\u91cd\u53d1\u7684\u6b21\u6570\u8d85\u8fc7\u4e00\u5b9a\u6570\u91cf\uff0c\u5c31\u4f1a\u81ea\u52a8\u7684\u505c\u6b62\u8fde\u63a5\uff0c\u5e76\u4e14\u901a\u77e5\u5e94\u7528\u901a\u4fe1\u5f02\u5e38\u5f3a\u5236\u7ec8\u6b62\u3002</p>"},{"location":"CS-courses/CN/TCP/#tcp_2","title":"TCP\u8fde\u63a5\u7684\u4e09\u6b21\u63e1\u624b","text":"<p>Tips\uff1a \u4e09\u6b21\u63e1\u624b\u6307\u7684\u662f\uff0c\u6211\u4eec\u5728\u5efa\u7acbTCP\u8fde\u63a5\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u53d1\u90013\u4e2a\u5305 (\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u4e92\u76f8\u53d1\u9001\u603b\u5171\u4e09\u6b21)\uff0c\u5206\u522b\u662f SYN,SYN+ACK,ACK \u6765\u786e\u5b9a\uff0c\u5728\u6b64\u671f\u95f4\uff0c\u6211\u4eec\u90fd\u9700\u8981\u7b49\u5f85\u670d\u52a1\u5668\u7ed9\u4f60acknowledge\u6765\u786e\u8ba4\u662f\u5426\u6210\u529f\u63a5\u53d7\u3002\u5b8c\u6210\u4e86\u4e09\u6b21\u63e1\u624b\u624d\u7b97\u771f\u6b63\u7684\u5b8c\u6210\u4e86TCP\u4e00\u4e2a\u5b8c\u6574\u7684\u8fc7\u7a0b\u3002 \u5728\u4e09\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u544a\u8bc9\u4e86\u5b8c\u6210\u4e86TCP\u8fde\u63a5\u7684\u5efa\u7acb\uff0c\u5176\u5b9e\u4e5f\u662f\u4f1a\u5305\u542b\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982MSS(Maximum Segment Size)\u6700\u5927\u6d88\u606f\u957f\u5ea6\u7b49\u7b49\uff0c\u4e00\u4e9b\u8fde\u63a5\u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u8f93\u89c4\u8303\u90fd\u4f1a\u5305\u542b\u5728\u670d\u52a1\u5668\u53d1\u6765\u7684\u5305\u4e2d</p> <p></p>"},{"location":"CS-courses/CN/TCP/#tcp_3","title":"TCP\u8fde\u63a5\u7684\u56db\u6b21\u6325\u624b","text":"<p>TCP\u7684\u56db\u6b21\u6325\u624b\u548c\u4e09\u6b21\u63e1\u624b\u672c\u8d28\u4e00\u6837\uff0c\u5176\u5b9e\u5c31\u662f\u5e94\u7b54\u4ea4\u4e92\u3002\u90a3\u4e48\u56db\u6b21\u6325\u624b\u5c31\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u4e4b\u95f4\u53d1\u90014\u4e2a\u5305\u8fdb\u884c\u65ad\u5f00\u8fde\u63a5\u7684\u786e\u8ba4\u3002 - FIN \u7b2c\u4e00\u6b21\u6325\u624b\uff0c\u662f\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u7aef\u8fdb\u884c\u6325\u624b\u3002\u53d1\u51fa\u65ad\u5f00\u8fde\u63a5\u7684\u8bf7\u6c42 - ACK \u7b2c\u4e8c\u6b21\u6325\u624b\uff0c\u662f\u670d\u52a1\u5668\u7aef\u5411\u5ba2\u6237\u7aef\u8fdb\u884c\u7684\u6325\u624b\uff0c\u53d1\u51fa\u8bf7\u6c42\u7684\u5e94\u7b54\uff0c\u540c\u610f\u65ad\u5f00\u8fde\u63a5\u3002 - FIN \u7b2c\u4e09\u6b21\u6325\u624b\uff0c\u662f\u670d\u52a1\u5668\u5411\u5ba2\u6237\u7aef\u7684\u6325\u624b\uff0c\u53d1\u51fa\u8bf7\u6c42\uff0c\u8ba9\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fdb\u884c\u65ad\u5f00\u8fde\u63a5\u4e86\u3002 - ACK \u7b2c\u56db\u6b21\u6325\u624b\uff0c\u662f\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u7aef\u8fdb\u884c\u7684\u6325\u624b\uff0c\u8868\u793a\u7684\u662f\u540c\u610f\u4e86\u8bf7\u6c42\uff0c\u6b63\u5f0f\u65ad\u5f00\u8fde\u63a5\u3002</p>"},{"location":"CS-courses/CN/TCP/#_10","title":"\u6ed1\u52a8\u7a97\u53e3\u673a\u5236","text":"<p>\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u53ea\u53d1\u4e00\u4e2a\u6bb5\uff0c\u8fd8\u8981\u7b49\u5f85\u5b8c\u6210\u5e94\u7b54\u4e4b\u540e\u624d\u80fd\u7ee7\u7eed\u53d1\u9001\uff0c\u8fd9\u6837\u4f1a\u5728\u7f51\u7edc\u62e5\u5835\u7684\u65f6\u5019\u9020\u6210\u6027\u80fd\u5927\u5e45\u4e0b\u964d\u3002\u56e0\u4e3a\u4f1a\u7531\u4e8e\u7b49\u5f85\u7684\u65f6\u95f4\u5ef6\u957f\u800c\u4e0b\u964d\u3002\u6211\u4eec\u8fd9\u91cc\u8003\u8651\u5f00\u4e2a\u7a97\u53e3\u65e0\u9700\u7b49\u5f85\u786e\u8ba4\u5e94\u7b54\u800c\u53ef\u4ee5\u7ee7\u7eed\u53d1\u9001\u6570\u636e\u7684\u6700\u5927\u503c\uff0c\u540c\u65f6\u7a97\u53e3\u4e2d\u8981\u8bb0\u5f97\u4fdd\u7559\u7a97\u53e3\u5185\u7684\u6570\u636e\u76f4\u5230\u63a5\u6536\u5230\u4e86\u6210\u529f\u4f20\u8f93\u7684\u5e94\u7b54\u7684\u65f6\u5019\u624d\u53ef\u4ee5\u505c\u6b62\u3002</p> <p>\u6bd4\u5982\u4e0a\u56fe\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u7a97\u53e3\uff0c\u5b83\u67094\u4e2a\u6bb5\u3002\u6bcf\u6210\u529f\u63a5\u6536\u5230\u4e86\u4e00\u4e2a\u6570\u636e\u5e94\u7b54\u7684\u65f6\u5019\u5c31\u8fdb\u884c\u6ed1\u52a8\u7a97\u53e3\u3002</p>"},{"location":"CS-courses/CN/TCP/#_11","title":"\u6ed1\u52a8\u7a97\u53e3\u7684\u7a97\u53e3\u63a7\u5236\u4e0e\u91cd\u53d1","text":"<ul> <li> <p>case1 \u5e94\u7b54\u672a\u80fd\u8fd4\u56de\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6570\u636e\u5df2\u7ecf\u8fbe\u5230\u4e86\u5bf9\u7aef\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u4e0d\u9700\u8981\u91cd\u53d1\u3002\u5728\u5229\u7528\u4e86\u7a97\u53e3\u63a7\u5236\u4e4b\u540e\uff0c\u6709\u4e9b\u6570\u636e\u6ca1\u6709\u5f97\u5230\u5e94\u7b54\u4e5f\u4e0d\u7528\u91cd\u53d1\uff0c\u56e0\u4e3a\u5728TCP\u534f\u8bae\u4e2d\uff0c\u6211\u4eec\u4f1a\u6709\u4e00\u4e2areassembler\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5f97\u5230\u7684\u662f\u670d\u52a1\u5668\u5df2\u7ecf\u63a5\u6536\u5230\u7684\u6570\u636e\u6210\u529f\u987a\u5e8f\u6392\u5e8f\u7684\u7ed3\u679c\uff0c\u6bd4\u5982\u6ca1\u6709\u6536\u52301001\u7684\u6570\u636e\u5e94\u7b54\uff0c\u4f46\u662f\u6536\u5230\u4e862001\u7684\u6570\u636e\u5e94\u7b54\uff0c\u5c31\u8bf4\u660e\u670d\u52a1\u7aef\u5df2\u7ecf\u63a5\u6536\u5230\u4e861001\uff0c\u53ea\u662f\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\uff0c\u53d1\u56de\u7684\u5e94\u7b54\u6ca1\u6709\u6536\u5230\uff0c\u8fd9\u79cd\u65f6\u5019\u5c31\u5e94\u8be5\u76f4\u63a5\u628a2001\u4e4b\u524d\u7684buffer\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u6e05\u9664\u3002</p> </li> <li> <p>case2 \u5f53\u7a97\u53e3\u6bd4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u7684\u63a5\u6536\u5230\u7684\u5e94\u7b54\u5982\u679c\u8d85\u8fc7\u4e863\u6b21\uff0c\u90fd\u9700\u89811001\u7684\u62a5\u6587\u8fdb\u884c\u91cd\u53d1\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u5c061001\u5e8f\u53f7\u7684\u62a5\u6587\u8fdb\u884c\u91cd\u53d1\u4e86\u3002</p> </li> </ul>"},{"location":"CS-courses/CN/TCP/#udp","title":"UDP","text":"<p>User Datagram Protocol</p>"},{"location":"CS-courses/CN/TCP/#introduction","title":"Introduction","text":"<p>UDP\u6709\u522b\u4e8eTCP\uff0c\u662f\u4e00\u79cd\u9762\u5411\u65e0\u8fde\u63a5\u7684\u4f20\u8f93\u534f\u8bae\uff0c\u4e0d\u4f1a\u8003\u8651\u5bf9\u65b9\u662f\u5426\u771f\u7684\u6536\u5230\u4e86\u53d1\u9001\u8fc7\u53bb\u7684\u6570\u636e\uff0c\u53ea\u8d1f\u8d23\u53d1\u9001\u3002\u90a3\u4e48\u68c0\u9a8c\u7684\u5de5\u4f5c\u5c31\u4ea4\u7ed9\u5e94\u7528\u7a0b\u5e8f\u89e3\u51b3\uff0c\u5c31\u662f\u7b80\u5355\u7684\u6765\u8bf4\u5b83\u5f88\u7eaf\u7cb9\uff0c\u4e00\u6b21\u53ea\u5e72\u4e00\u4ef6\u4e8b\uff0c\u90a3\u5c31\u662f\u8d1f\u8d23\u628a\u6570\u636e\u4f20\u51fa\u53bb\uff0c\u5c31OK\u4e86\u3002</p>"},{"location":"CS-courses/CN/TCP/#_12","title":"\u7279\u70b9","text":"<ul> <li>\u7b80\u5355\u9ad8\u6548</li> <li>\u9762\u5411\u65e0\u8fde\u63a5</li> <li>\u53ef\u4ee5\u968f\u65f6\u7684\u53d1\u9001\u6570\u636e</li> </ul>"},{"location":"CS-courses/CN/TCP/#_13","title":"\u4f7f\u7528\u573a\u666f \uff08\u5305\u5c11/\u5373\u65f6\uff09","text":"<ul> <li>\u5305\u603b\u91cf\u8f83\u5c11\u7684\u901a\u4fe1DNS,SNMP</li> <li>\u89c6\u9891/\u97f3\u9891\u7b49\u591a\u5a92\u4f53\u5373\u65f6\u901a\u4fe1</li> <li>\u9650\u5b9a\u4e8eLAN\u7b49\u7279\u5b9a\u7f51\u7edc\u4e2d\u7684\u5e94\u7528\u901a\u4fe1</li> <li>\u5e7f\u64ad\u901a\u4fe1</li> </ul>"},{"location":"CS-courses/CN/TCP/#tcp-header-file-format","title":"TCP \u9996\u90e8\u683c\u5f0f(header file format)","text":"<p>\u9996\u5148\u662f\u4e3a\u4ec0\u4e48\u662f32\u4f4d\uff1f</p> <p>\u56e0\u4e3a\uff0c\u5018\u82e5\u662f64\u4f4d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u8fd1\u4f3c\u65e0\u9650\u5927\uff0c\\(2^{64}\\)\u6765\u8868\u793a\u5b57\u8282\u7684\u7d22\u5f15\u5b9e\u5728\u662f\u6709\u70b9\u6d6a\u8d39\u4e86\uff0c\u56e0\u4e3a\u5bf9\u4e8eTCP\u7684\u9996\u90e8\u6765\u8bf4\u7a7a\u95f4\u662f\u5f88\u5b9d\u8d35\u7684\u3002\u56e0\u6b64\u6211\u4eec\u8003\u8651\u4e86\u4e00\u79cd\\(wrap \\ number\\)\u4e5f\u5c31\u662f32\u4f4d\u3002\u7136\u540e\u8d77\u59cb\u7684\\(SYN\\)\u662f\u968f\u673a\u6570<code>uint32_t</code>\uff0c\u7136\u540e\u8fdb\u884c\u5faa\u73af\u8868\u793a\u7c7b\u4f3c\u4e0b\u56fe\u7684\u8868\u6765\u8868\u793a\u6bd4\u8f83\u6613\u61c2\u3002 </p> <ul> <li>sequence number \u5e8f\u5217\u53f7 \u8868\u793a\u7684\u662f\u53d1\u9001\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u6ed1\u52a8\u7a97\u53e3\u7684\u5de6\u8fb9\u7f18\u3002</li> <li>Acknowledgement Number \u786e\u8ba4\u5e94\u7b54\u53f7 \u8868\u793a\u7684\u662f\u4e0b\u4e00\u6b21\u5e94\u8be5\u6536\u5230\u7684\u6570\u636e\u7684\u5e8f\u5217\u53f7</li> <li> <p>Data Offset \u6570\u636e\u504f\u79fb \u8868\u793a\u7684\u662fTCP\u6240\u4f20\u8f93\u7684\u6570\u636e\u90e8\u5206\u5e94\u8be5\u4eceTCP\u5305\u7684\u54ea\u4e00\u4f4d\u5f00\u59cb\u8ba1\u7b97\uff0c\u4e5f\u53ef\u4ee5\u770b\u6210\u662fTCP\u9996\u90e8\u957f\u5ea6\u3002</p> </li> <li> <p>checkSum \u6821\u9a8c\u548c \u4f5c\u7528\u662f\u4e00\u79cd\u8fdb\u884c\u8def\u7531\u5668\u5185\u5b58\u6545\u969c\u6216\u7a0b\u5e8f\u6f0f\u6d1e\u5bfc\u81f4\u7684\u6570\u636e\u662f\u5426\u88ab\u7834\u574f\u7684\u4e00\u79cd\u68c0\u67e5\u3002\u56e0\u4e3a\u6570\u636e\u94fe\u8def\u7684FCS\u5df2\u7ecf\u53ef\u4ee5\u68c0\u67e5\u4e86\u5728\u566a\u58f0\u5e72\u6270\u7684\u901a\u4fe1\u9014\u4e2d\u51fa\u73b0\u7684\u4f4d\u9519\u8bef\uff0c\u90a3\u4e48\u8fd9\u91cc\u7684\u6821\u9a8c\u548c\u5c31\u662f\u770b\u534f\u8bae\u9996\u90e8\u548c\u6570\u636e\u662f\u5426\u88ab\u7834\u574f\u3002 \u8fd9\u91cc\u53c2\u8003\u4e0a\u9762\u7684UDPCheckSum</p> </li> <li> <p>Control Flag\u63a7\u5236\u4f4d \u6bcf\u4e00\u4f4d\u90fd\u6709\u4e0d\u540c\u7684\u4f5c\u7528 </p> </li> </ul>"},{"location":"CS-courses/CN/TCP/#udp_1","title":"UDP \u9996\u90e8\u6587\u4ef6","text":"<p>\u5c31\u7b80\u5355\u7684\u6765\u8bf4\uff0cUDP\u7684\u9996\u90e8header\u4e2d\u7684checksum\u662f\u53ef\u9009\u7684\u3002\u5982\u679c\u4e0d\u60f3\u68c0\u67e5\u5c31\u5199\u51680.\u5018\u82e5\u60f3\u68c0\u67e5\uff0c\u90a3\u4e48\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u5c31\u628achecksum\u5b9a\u4e49\u4e3a\u524d\u9762\u6240\u6709segments\u4e4b\u548c\u53d6\u4f59\u4e4b\u540e\u7684\u8865\u7801\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9\u6240\u6709\u52a0\u8d77\u6765\u7684\u548c\u4e3a\\(4'hFFFF\\)\u4e5f\u5c31\u662f\u5168\u90e8\u4e3a1.\u5728\u68c0\u9a8c\u7684\u65f6\u5019\uff0c\u5982\u679c\u53d1\u73b0\u6709\u4e00\u4f4d\u4e0d\u4e3a1\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u5dee\u51fa\u73b0\u4e86\u9519\u8bef\u3002</p> <ul> <li>\u4e3a\u4ec0\u4e48\u8981\u8ba1\u7b97UDP\u4f2a\u9996\u90e8\u7684\u7406\u7531\uff1f \u56e0\u4e3a\u5bf9\u4e8eTCP/IP\u4e2d\u8bc6\u522b\u4e00\u4e2a\u8fdb\u884c\u901a\u4fe1\u7684\u5e94\u7528\u9700\u89815\u5927\u8981\u7d20\uff0c\u4ed6\u4eec\u5206\u522b\u662f<ul> <li>source IP </li> <li>destination IP</li> <li>source Port</li> <li>destination Port</li> <li>protocol number TCP/UDP</li> </ul> </li> </ul> <p>### \u5e94\u7528\u5c42</p> <p>The Application layer here included 3 layers in the OSI </p>"},{"location":"CS-courses/CN/TCP/#www","title":"WWW","text":"<p>\u6d4f\u89c8\u5668\u4e0e\u670d\u52a1\u7aef\u4e4b\u95f4\u901a\u4fe1\u6240\u7528\u7684\u534f\u8bae\u662fHTTP(HyperText Transfer Protocol)\u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae\uff0c\u800c\u4f20\u8f93\u6570\u636e\u7684\u4e3b\u8981\u683c\u5f0f\u5c31\u662fHTML(HyperText Markup Language)\u8d85\u6587\u672c\u6807\u8bc6\u8bed\u8a00\u3002WWW\u4e2d\u7684HTTP\u5c5e\u4e8eOSI\u5e94\u7528\u5c42\u7684\u534f\u8bae\uff0c\u800cHTML\u5c5e\u4e8e\u8868\u793a\u5c42\u7684\u534f\u8bae\u3002</p>"},{"location":"CS-courses/CN/TCP/#e-mail","title":"E-Mail","text":"<p>SMTP Simple Mail Transfer Protocol</p> <p>\u800c\u7535\u5b50\u90ae\u4ef6\u534f\u8bae\u5728MIME\u534f\u8bae\u7684\u62d3\u5c55\u4e4b\u540e\uff0c\u53ef\u4ee5\u53d1\u9001\u51fa\u4e86\u6587\u672c\u683c\u5f0f\u7684\u7535\u5b50\u90ae\u4ef6\u4e86\uff0c\u800cMIME\u534f\u8bae\u4e5f\u5c5e\u4e8eOSI\u53c2\u8003\u6a21\u578b\u7684\u7b2c\u516d\u5c42----\u8868\u793a\u5c42\u3002</p>"},{"location":"CS-courses/CN/TCP/#ftp","title":"FTP","text":"<p>File Transfer Protocol\u6587\u4ef6\u4f20\u8f93\u534f\u8bae</p> <p>FTP\u8fdb\u884c\u6587\u4ef6\u4f20\u8f93\u7684\u65f6\u5019\u4f1a\u5efa\u7acb\u4e24\u4e2aTCP\u8fde\u63a5\uff0c\u5206\u522b\u662f\u53d1\u51fa\u4f20\u8f93\u8bf7\u6c42\u65f6\u6240\u9700\u8981\u7528\u5230\u7684\u63a7\u5236\u8fde\u63a5\u548c\u5b9e\u9645\u4f20\u8f93\u6240\u8981\u7528\u5230\u7684\u6570\u636e\u8fde\u63a5\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u5148\u8981\u53d1\u9001\u4e00\u4e2arequest\u8bf7\u6c42\u548c\u5b9e\u9645\u4f20\u8f93\u3002</p>"},{"location":"CS-courses/CN/TCP/#telnet-ssh","title":"TELNET \u548c SSH","text":"<p>\u8fdc\u7a0b\u767b\u5f55</p>"},{"location":"CS-courses/CN/TCP/#package","title":"Package \u5305\u4f20\u8f93","text":"<p> \u6211\u4eec\u7684\u6570\u636e\u5305\u5176\u5b9e\u662f\u6570\u636e + \u82e5\u5e72\u5934\u6587\u4ef6\uff0c\u56e0\u4e3a\u8ba1\u7b97\u673a\u7f51\u7edc\u662f\u5206\u5c42\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u6bcf\u4e2a\u5206\u5c42\u4e2d\u90fd\u4f1a\u4e3a\u6570\u636e\u52a0\u4e00\u4e2aheader\u5934\u6587\u4ef6\uff0c\u5305\u542b\u4e86\u8be5\u5c42\u7684\u5fc5\u8981\u6e90\u4fe1\u606f\uff0c\u5982\u53d1\u9001\u76ee\u6807\u5730\u5740\u4ee5\u53ca\u534f\u8bae\u76f8\u5173\u7684\u4fe1\u606f\u3002\u4ece\u4e0b\u4e00\u5c42\u6765\u770b\uff0c\u4e0a\u4e00\u5c42\u6536\u5230\u7684\u5305\u5168\u90e8\u90fd\u88ab\u8ba4\u4e3a\u662f\u672c\u5c42\u7684\u6570\u636e\uff0c\u5305\u62ec\u5176\u4ed6\u5c42\u672a\u89e3\u6784\u7684\u5934\u6587\u4ef6\u3002</p> <p></p>"},{"location":"CS-courses/DesignPattern/DesignPattern/","title":"DesignPattern","text":""},{"location":"CS-courses/DesignPattern/DesignPattern/#introduce","title":"Introduce","text":"<p>From wiki :</p> <p>Software design pattern refers to a reusable, proven solution to a specific, recurring problem typically focused on component-level design, though they can sometimes span multiple components. Design patterns address specific issues related to object creation, interaction, or behavior.</p>"},{"location":"CS-courses/DesignPattern/DesignPattern/#factory-design-pattern","title":"Factory Design Pattern","text":"<p>\u5de5\u5382\u8bbe\u8ba1\u6a21\u5f0f</p> <p>\u662f\u4e00\u79cd\u521b\u5efa\u578b\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u7528\u4e8e\u89e3\u51b3\u5bf9\u8c61\u7684\u521b\u5efa\u95ee\u9898\uff0c\u65e8\u5728\u901a\u8fc7\u8bb2\u5bf9\u8c61\u5b9e\u4f8b\u5316\u8fc7\u7a0b\u5c01\u88c5\u5230\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u7c7b/\u65b9\u6cd5\u4e2d\u4ece\u800c\u5b9e\u73b0\u66f4\u9ad8\u7684\u7075\u6d3b\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002</p>"},{"location":"CS-courses/DesignPattern/DesignPattern/#simple-factory","title":"Simple Factory","text":"<p>\u7b80\u5355\u5de5\u5382\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u901a\u8fc7\u4e00\u4e2a\u5de5\u5382\u7c7b\uff0c\u6839\u636e\u4e0d\u540c\u6761\u4ef6\u521b\u5efa\u5e76\u8fd4\u56de\u5177\u4f53\u7684\u5b9e\u4f8b</p>"},{"location":"CS-courses/DesignPattern/DesignPattern/#factory-method","title":"Factory Method","text":"<p>\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\u6216\u62bd\u8c61\u7c7b\uff0c\u7531\u5b50\u7c7b\u51b3\u5b9a\u5b9e\u4f8b\u5316\u54ea\u79cd\u4ea7\u54c1\u3002</p> <ul> <li>\u6bcf\u4e2a\u5177\u4f53\u4ea7\u54c1\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u5de5\u5382\u7c7b</li> <li>\u65b0\u589e\u4ea7\u54c1\u65f6\u53ea\u9700\u8981\u62d3\u5c55\u5de5\u5382\u7c7b\uff0c\u9075\u5faa\u5f00\u95ed\u539f\u5219</li> </ul>"},{"location":"CS-courses/DesignPattern/DesignPattern/#singleton-design-pattern","title":"Singleton Design Pattern","text":"<p>\u63a5\u4e0b\u6765\u6211\u4eec\u4ecb\u7ecd\u5355\u4f8b\u6a21\u5f0f </p> <p>from wiki Introduction: In object-oriented programming, the singleton pattern is a software design pattern that restricts the instantiation of a class to a singular instance. It is one of the well-known \"Gang of Four\" design patterns, which describe how to solve recurring problems in object-oriented software.[1] The pattern is useful when exactly one object is needed to coordinate actions across a system. </p> <p>\u4f9d\u65e7\u662f\u901a\u8fc7 <code>RPC</code> \u9879\u76ee\u7684\u4f8b\u5b50\u6765\u8fdb\u884c\u9610\u8ff0\u3002\u9996\u5148\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u9879\u76ee\u662f\u4e00\u4e2a<code>RPC</code>\u6846\u67b6\uff0c\u76ee\u7684\u662f\u80fd\u591f\u63d0\u4f9b\u7ed9\u4e0d\u540c\u7684consumer\u8fdb\u884c\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53c8\u4e0d\u80fd\u8ba9\u6bcf\u4e2aconsumer\u8fdb\u884c\u5355\u72ec\u7684\u914d\u7f6e\u6587\u4ef6\u7684\u914d\u7f6e\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u5355\u4f8b\u6a21\u5f0f\u6765\u8fdb\u884c\u914d\u7f6e\u6587\u4ef6\u7684\u8bfb\u53d6\u3002\u5728\u5f15\u5165 <code>RPC</code> \u6846\u67b6\u542f\u52a8\u7684\u65f6\u5019\uff0c\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u914d\u7f6e\u5e76\u521b\u5efa\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u4e4b\u540e\u5c31\u96c6\u4e2d\u5730\u4ece\u8fd9\u4e2a\u5bf9\u8c61\u4e2d\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u3002\u51cf\u5c11\u4e86\u6027\u80fd\u7684\u5f00\u9500</p>"},{"location":"CS-courses/DesignPattern/DesignPattern/#property","title":"property","text":"<ul> <li>Advantages : <ul> <li>\u4fdd\u8bc1\u4e86\u7cfb\u7edf\u5185\u5b58\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u51cf\u5c11\u4e86\u5185\u5b58\u7684\u5f00\u9500</li> <li>\u53ef\u4ee5\u907f\u514d\u5bf9\u8d44\u6e90\u7684\u591a\u91cd\u5360\u7528</li> <li>\u8bbe\u7f6e\u5168\u5c40\u8bbf\u95ee\u70b9\uff0c\u4e25\u683c\u63a7\u5236\u8bbf\u95ee</li> </ul> </li> <li>Disadvantages : <ul> <li>\u4e0d\u65b9\u4fbf\u8fdb\u884c\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u5168\u5c40\u5b9e\u4f8b</li> <li>\u91cd\u70b9\u5173\u6ce8\u5e76\u53d1\u8bbf\u95ee\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u4f1a\u5b58\u5728\u91cd\u590d\u521b\u5efa\u5355\u4e2a\u5b9e\u4f8b\u7684\u60c5\u51b5</li> </ul> </li> </ul>"},{"location":"CS-courses/DesignPattern/DesignPattern/#_1","title":"\u5e76\u53d1\u5904\u7406\u7684\u51e0\u79cd\u89e3\u51b3\u65b9\u5f0f","text":""},{"location":"CS-courses/DesignPattern/DesignPattern/#_2","title":"\u53cc\u91cd\u9501\u68c0\u67e5","text":"<pre><code>public class Singleton {\n    private static volatile Singleton instance;\n\n    private Singleton() {\n    }\n\n    public static Singleton getInstance() {\n        if (instance == null) {                         // \u7b2c\u4e00\u6b21\u68c0\u67e5\n            synchronized (Singleton.class) {\n                if (instance == null) {                 // \u7b2c\u4e8c\u6b21\u68c0\u67e5\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n</code></pre> <p>\u5b57\u9762\u610f\u601d\uff0c\u5c31\u662f\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u4e86\u8fd9\u4e2a\u5b9e\u4f8b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u76f4\u63a5\u8fd4\u56de <code>instance</code> \u8fd9\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u3002\u5018\u82e5\u6ca1\u6709\u521b\u5efa\u8fc7\u8fd9\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u90a3\u4e48\u6211\u4eec\u8fdb\u884c\u53cc\u91cd\u9501\u68c0\u67e5\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u4fdd\u8bc1\u5728\u591a\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u521b\u5efa\u8fd9\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u3002\u9996\u5148\u7b2c\u4e00\u6b21\u8fdb\u884c\u9501\u68c0\u67e5 <code>instance == null</code> \u5982\u679c\u4e3a<code>true</code> \u5219\u8bf4\u660e\u6211\u4eec\u5f53\u524d\u8fd8\u6ca1\u6709\u6210\u529f\u7684\u521b\u5efa\u51fa\u6765<code>instace</code> \u5b9e\u4f8b\uff0c\u53ef\u4ee5\u8fdb\u5165\u63a5\u4e0b\u6765\u7684\u540c\u6b65\u5757\u3002\u7b2c\u4e8c\u6b21\u8fdb\u884c\u9501\u68c0\u67e5\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 <code>synchronized</code> \u5173\u952e\u5b57\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u4fdd\u8bc1\u5728\u591a\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u8fdb\u5165\u8fd9\u4e2a\u540c\u6b65\u5757\uff0c\u7136\u540e\u8fdb\u884c\u5b9e\u4f8b\u7684\u521b\u5efa\u3002</p> <p>\u51e0\u70b9\u6ce8\u610f\u4e8b\u9879 :</p> <ol> <li><code>volatile</code> : \u5173\u952e\u5b57\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u4fdd\u8bc1\u53ef\u89c1\u6027\uff0c\u9632\u6b62\u6307\u4ee4\u91cd\u6392\uff0c\u4ece\u800c\u5f71\u54cd\u5230\u591a\u7ebf\u7a0b\u5e76\u53d1\u5bf9\u4e8e<code>instance</code>\u521b\u5efa\u4ea7\u751f\u7684\u5f71\u54cd\u3002</li> <li><code>synchronized(Singleton.class)</code> \u662f\u7ed9<code>Singleton.class</code>\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u8fdb\u884c\u52a0\u9501\u3002 <p>\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 <code>synchronized(this)</code> ?     \u7b54\u6848\u662f\u56e0\u4e3a\uff0c\u5f53\u524d <code>instance</code> \u8fd9\u4e2a\u5bf9\u8c61\u8fd8\u672a\u88ab\u6210\u529f\u7684\u521b\u5efa\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5bf9<code>Singleton.class</code>\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u8fdb\u884c\u52a0\u9501\uff0c\u4fdd\u8bc1\u5728\u591a\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u8fdb\u5165\u8fd9\u4e2a\u540c\u6b65\u5757\u3002</p> </li> </ol> <p>\u4ee5\u4e0a\u5c31\u662f\u5bf9\u4e8e\u5355\u4f8b\u6a21\u5f0f\u7684\u7b80\u5355\u4ecb\u7ecd</p>"},{"location":"LeetCode/DP/DP/","title":"\u52a8\u6001\u89c4\u5212","text":""},{"location":"LeetCode/DP/DP/#introduce","title":"Introduce","text":"<p>\u4e0b\u9762\u662f <code>wiki</code> \u4e0a\u7684\u5b9a\u4e49:</p> <p>Dynamic programming is both a mathematical optimization method and an algorithmic paradigm. The method was developed by Richard Bellman in the 1950s and has found applications in numerous fields, from aerospace engineering to economics.</p> <p>In both contexts it refers to simplifying a complicated problem by breaking it down into simpler sub-problems in a recursive manner. While some decision problems cannot be taken apart this way, decisions that span several points in time do often break apart recursively. Likewise, in computer science, if a problem can be solved optimally by breaking it into sub-problems and then recursively finding the optimal solutions to the sub-problems, then it is said to have optimal substructure.</p> <p>If sub-problems can be nested recursively inside larger problems, so that dynamic programming methods are applicable, then there is a relation between the value of the larger problem and the values of the sub-problems.[1] In the optimization literature this relationship is called the Bellman equation.</p> <p>\u52a8\u6001\u89c4\u5212\u95ee\u9898\u8003\u8651\u7684\u65f6\u5019\uff0c\u4e3b\u8981\u7684\u662f\u627e\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u5bf9\u4e8e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u53ef\u4ee5\u8bf4\u662f\u5229\u7528\u4e4b\u524d\u89e3\u51b3\u7684\u5b50\u95ee\u9898\u6765\u89e3\u51b3\u6211\u4eec\u5f53\u524d\u9047\u5230\u7684\u65b0\u7684\u95ee\u9898\u3002\u6bd4\u8f83\u5f62\u8c61\u7684\u5c31\u662f\u505a\u8868\uff0c\u6211\u4eec\u5c06\u904d\u5386\u5230\u6b64\u523b\u7684\u72b6\u6001\u4e3a\u6b62\u7684\u6240\u6709\u5b50\u72b6\u6001\u8fdb\u884c\u505a\u8868\u8bb0\u5f55\uff0c\u5f53\u9047\u5230\u540e\u9762\u7684\u65b0\u7684\u5b50\u95ee\u9898\u7684\u65f6\u5019\uff0c\u5c31\u5229\u7528\u5f53\u524d\u5df2\u83b7\u5f97\u7684\u5b50\u72b6\u6001\u6765\u89e3\u51b3\u9047\u5230\u7684\u95ee\u9898\u3002</p> <p>Dynamic Programming \u4e0e \u8d2a\u5fc3\u7b97\u6cd5\u7684\u4e00\u70b9\u533a\u522b\uff0c\u4e8c\u8005\u90fd\u662f\u8003\u8651\u6700\u4f18\u89e3\u6765\u89e3\u51b3\u95ee\u9898 \u4f46\u662f <code>DP</code> \u8003\u8651\u7684\u662f\u5168\u5c40\u6700\u4f18\u89e3 <code>global optimal solution</code>\uff0c\u56e0\u6b64\u9700\u8981\u901a\u8fc7\u6bd4\u8f83\u5f53\u524d\u6240\u8bb0\u5f55\u7684\u72b6\u6001\u3002\u4f46\u662f\u8d2a\u5fc3\u6240\u8bb0\u5f55\u7684\u662f\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u7684\u524d\u63d0\u4e0b\u6240\u80fd\u83b7\u5f97\u7684\u6700\u4f18\u89e3\u3002<code>local optimal solution</code></p>"},{"location":"LeetCode/DP/DP/#_2","title":"\u4f8b\u9898","text":""},{"location":"LeetCode/DP/DP/#1","title":"1 \u5b8c\u5168\u5e73\u65b9\u6570","text":"<p> \u9898\u76ee\u6765\u6e90</p> <p></p>"},{"location":"LeetCode/DP/DP/#_3","title":"\u9898\u89e3","text":"<p>\u6211\u4eec\u8fd9\u91cc\u8003\u8651\u52a8\u6001\u89c4\u5212\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a\u4efb\u610f\u7ed9\u5b9a\u7684<code>n</code>,\u6211\u4eec\u90fd\u5b58\u5728\u591a\u79cd\u5bf9\u4e8e\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u7ec4\u5408\uff0c\u90a3\u4e48\u600e\u4e48\u6837\u624d\u80fd\u77e5\u9053\u6700\u5c0f\u7684\u7ec4\u5408\u6570\u5462\uff1f\u5c31\u9700\u8981\u52a8\u6001\u89c4\u5212\u4e86\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8868\uff0c\u5f53\u524d<code>a[i]</code>\u4e2d\u8bb0\u5f55\u7684\u5c31\u662f\u6700\u5c0f\u7684\u7ec4\u5408\u6570\u76ee\uff0c\u597d\u5904\u662f\u6211\u4eec\u4e4b\u540e\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\uff0c\u53ef\u4ee5\u514d\u53bb\u5f88\u591a\u7684\u91cd\u590d\u6b65\u9aa4\u3002\u7136\u540e\uff0c\u6211\u4eec\u5bf9\u4e8e\\([1,m]\\)\u7684\u6bcf\u4e2a\u8868\u5143\u7d20\u8fdb\u884c\u904d\u5386\u3002\u6709\u70b9\u7c7b\u4f3c\u722c\u697c\u68af\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\uff0c\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\uff0c<code>numSquare(12)</code>\u7684\u6c42\u6cd5\u3002\u4e00\u5f00\u59cb\u6211\u7684\u9519\u8bef\u601d\u8def\u662f\u5229\u7528\u8d2a\u5fc3\uff0c\u8ddd\u79bb\\(12\\)\u6700\u8fd1\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u662f\\(9\\)\uff0c\u90a3\u4e48\u6211\u5c31\u9519\u8bef\u7684\u4ee5\u4e3a\\(12\\)\u7684\u6700\u5c0f\u7ec4\u5408\u5c31\u662f\\(a[9]+a[3]\\)\u7684\u6b21\u6570.\u4f46\u5176\u5b9e\u4ed6\u53ef\u4ee5\u662f\\(a[4]+a[4]+a[4]=3\\) \u4e5f\u5c31\u662f\u6709\u4ee5\u4e0b\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(a[i] = \\min\\{a[j*j]+a[i-j*j]\\}\\) \u63a5\u4e0b\u6765\u7684\u5c31\u7b80\u5355\u4e86\u3002</p> <p>\u603b\u7ed3\u4e00\u4e0b \u8fd9\u9898\u5c31\u662f \u52a8\u6001\u89c4\u5212\uff0c\u76ee\u7684\u662f\u8981\u627e\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u4ee5\u53ca\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8bdd\u662f\u8fd1\u4f3c\u6210\\(O(N^\\frac{3}{2})\\) \\(\u222b_1^n\u200bf(x)dx\u2264\\sum_{i=1}^n\u200bf(i)\u2264\u222b_0^n\u200bf(x)dx\\)</p>"},{"location":"LeetCode/DP/DP/#code","title":"Code","text":"<pre><code>class Solution {\npublic:\n    int a[10000]={0};\n    int numSquares(int n) {\n        int m = (int)sqrt(n);\n        if(m*m == n)\n            return 1;\n        for(int i=1;i&lt;=m;i++){\n            a[i*i] = 1;\n        }\n        for(int i=2;i&lt;=n;i++){\n            m = (int)sqrt(i);\n            // i is square number;\n            if(m*m==i)\n                continue;\n            else{\n                // \u5f80\u524d\u904d\u5386 \u770b\u770b\u662f\u5426\u5b58\u5728\n                a[i] = 10000;\n                for(int j=m;j&gt;=1;j--){\n                    if(a[j*j]+a[i-j*j]&lt;a[i])\n                        a[i] = a[j*j]+a[i-j*j];\n                }\n            }\n        }\n        return a[n];\n    }\n};\n</code></pre>"},{"location":"LeetCode/DP/DP/#2","title":"2 \u96f6\u94b1\u5151\u6362","text":"<p> \u9898\u76ee\u6765\u6e90</p> <p></p>"},{"location":"LeetCode/DP/DP/#_4","title":"\u9898\u89e3","text":"<p>\u51c6\u786e\u7684\u6765\u8bf4\uff0c\u8fd9\u9898\u5f88\u7b80\u5355\uff0c\u8ddf\u4e0a\u4e00\u9898\u5c31\u662f\u4e00\u4e2a\u6a21\u5b50\u91cc\u523b\u51fa\u6765\u7684\uff0c\u6240\u4ee5\u5c31\u4e0d\u9700\u8981\u518d\u8d58\u8ff0\u4e86\u3002\u6bd4\u8f83\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u9898\u6709\u4e00\u4e2a\\(-1\\)\u4e5f\u5c31\u662f\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u8bb0\u5f97\u8003\u8651\u4e00\u4e0b\u3002\u522b\u7684\u6ca1\u6709\u95ee\u9898\u4e86\u5c31\u3002</p>"},{"location":"LeetCode/DP/DP/#code_1","title":"Code","text":"<pre><code>class Solution {\npublic:\n    int coinChange(vector&lt;int&gt;&amp; coins, int amount) {\n        if(amount == 0)\n            return 0;\n        sort(coins.begin(),coins.end());\n        int a[amount+1];\n        for(int i=0;i&lt;=amount;i++)\n            a[i]=-1;\n        a[0] = 0;\n        int index,q;\n        int m = coins.size();\n        for(q=0;q&lt;m&amp;&amp;coins[q]&lt;=amount;q++){\n            if(amount==coins[q])\n                return 1;\n            a[coins[q]]=1;\n        }\n        // index \u8bb0\u5f55\u7684\u662fcoins\u4e2d\u4e0d\u5927\u4e8e\u7684\u6700\u5927\u7d22\u5f15\u5750\u6807;\n        index = q-1;\n        for(int i=1;i&lt;=amount;i++){\n            if(a[i]==1)\n                continue;\n            else{\n                int min = 10001;\n                for(int j=0;j&lt;=index&amp;&amp;coins[j]&lt;i;j++){\n                    if(a[coins[j]]==-1||a[i-coins[j]]==-1)\n                        continue;\n                    if(a[coins[j]]+a[i-coins[j]]&lt;min)\n                        min = a[coins[j]]+a[i-coins[j]];\n                }\n                if(min!=10001)\n                    a[i]=min;\n            }\n        }\n        return a[amount];\n    }\n};\n</code></pre>"},{"location":"LeetCode/DP/DP/#3","title":"3 \u6768\u8f89\u4e09\u89d2","text":""},{"location":"LeetCode/DP/DP/#_5","title":"\u9898\u89e3","text":"<p>\u6768\u8f89\u4e09\u89d2\uff0c\u6211\u4eec\u7b80\u5355\u7684\u770b\u9898\u76ee\uff0c\u53ef\u4ee5\u77e5\u9053\uff0c\u4e3b\u8981\u662f\u770b\u6768\u8f89\u4e09\u89d2\u7684\u7b80\u5355\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u5c31\u662f:</p> \\[temp[j] = result[i-1][j-1] + result[i-1][j]\\] <p>\u7136\u540e\u5c31\u662f\u4e09\u89d2\u7684\u5468\u8fb9\u90fd\u8865\u4e0a<code>1</code>\u5373\u53ef\u3002</p>"},{"location":"LeetCode/DP/DP/#code_2","title":"Code","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; generate(int numRows) {\n        vector&lt;vector&lt;int&gt;&gt; result;\n        result.push_back({1});\n        result.push_back({1,1});\n        // initial;\n        if( numRows == 1)\n            return {{1}};\n        else if(numRows==2)\n            return result;\n        for(int i=2;i&lt;numRows;i++){\n            // The number of this level elements number;\n            int num = i+1;\n            vector&lt;int&gt; tmp;\n            tmp.resize(num);\n            tmp[0] = 1;\n            for(int j=1;j&lt;num-1;j++){\n                tmp[j] = result[i-1][j-1]+result[i-1][j];\n            }\n            tmp[num-1] = 1;\n            result.push_back(tmp);\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"LeetCode/DP/DP/#4","title":"4 \u6253\u5bb6\u52ab\u820d","text":""},{"location":"LeetCode/DP/DP/#1_1","title":"\u9898\u89e31","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(N)\\)</p> <p>\u4e3b\u8981\u7684\u601d\u8def\u662f\uff0c\u5c31\u662f\u6211\u4eec\u8bbe\u7f6e\u7684\u8fd9\u4e2a\\(money\\)\u6570\u7ec4\u7684\u5b9a\u4e49\u7684\u533a\u522b\uff0c\u6211\u4eec\u8fd9\u4e2a\u8bbe\u7f6e\u7684\u662f\u904d\u5386\u5230 \\(money[i]\\) \u7684\u65f6\u5019\uff0c\u8868\u793a\u7684\u662f\u904d\u5386\u5230\u8fd9\u4e2a\u623f\u95f4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u7684\u6700\u5927money\u6570\uff08\u5305\u62ec\u81ea\u5df1\uff09\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a</p> \\[ money[i] = \\max\\{nums[i]+money[i-2],money[i-1]\\} \\] <p>\u56e0\u4e3a\u6211\u4eec\u9009\u62e9\u4e86\u81ea\u5df1<code>i</code>\u8fd9\u4e2a\u623f\u95f4\uff0c\u90a3\u4e48\u53ea\u80fd\u8003\u8651 <code>i-2</code>\u8fd9\u4e2a\u623f\u95f4\u4e86\uff0c\u6216\u8005\u6211\u4eec<code>i-1</code> \u8fd9\u4e2a\u6700\u4f18\u89e3\u3002\u90a3\u4e48\u6211\u4eec\u5230\u6700\u540e\u7684\u4e00\u4e2a\u623f\u95f4\u7684\u65f6\u5019\uff0c\u5c31\u81ea\u7136\u662f\u6700\u4f18\u7684\u3002</p>"},{"location":"LeetCode/DP/DP/#code_3","title":"Code","text":"<pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        int num = nums.size();\n        if(num==1)\n            return nums[0];\n        else if(num == 2)\n            return max(nums[0],nums[1]);\n        vector&lt;int&gt; money;\n        money.resize(num);\n        money[0] = nums[0];\n        money[1] = max(nums[0],nums[1]);\n        for(int i=2;i&lt;num;i++){\n            // \u53ef\u4ee5\u9009\u62e9\u4e0d\u5077\u524d\u4e00\u4e2a\u623f\u95f4\n            money[i]=max(nums[i]+money[i-2],money[i-1]);\n        }\n        return max(money[num-1],money[num-2]);\n    }\n};\n</code></pre>"},{"location":"LeetCode/DP/DP/#2_1","title":"\u9898\u89e32","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(N^2)\\)</p> <p>\u4e3b\u8981\u7684\u601d\u8def\u662f\uff0c\u5c31\u662f\u6211\u4eec\u8bbe\u7f6e\u7684\u8fd9\u4e2a\\(money\\)\u6570\u7ec4\u7684\u5b9a\u4e49\u7684\u533a\u522b\uff0c\u6211\u4eec\u8fd9\u4e2a\u8bbe\u7f6e\u7684\u662f\u904d\u5386\u5230 \\(money[i]\\) \u7684\u65f6\u5019\uff0c\u8868\u793a\u7684\u662f\u4e00\u5b9a\u4f1a\u9009\u62e9\u4e86\u81ea\u5df1\u8fd9\u4e2a\u623f\u95f4\u5e76\u4e14\u904d\u5386\u5230\u8fd9\u4e2a\u623f\u95f4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u7684\u6700\u5927money\u6570\uff08\u5305\u62ec\u81ea\u5df1\uff09\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a</p> \\[ money[i]=nums[i]+max\\{money[i-2]\\}\\] <p>\u56e0\u4e3a\u6211\u4eec\u9009\u62e9\u4e86\u81ea\u5df1\\(i\\)\u8fd9\u4e2a\u623f\u95f4\uff0c\u90a3\u4e48\u53ea\u80fd\u8003\u8651 <code>i-2</code>\u8fd9\u4e2a\u623f\u95f4\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u6700\u7ec8\u7684\u7b54\u6848\u5c31\u662f\u8fd9\u4e2a\u57fa\u7840\u4e0a\u7684\u6700\u540e\u4e24\u4e2a\u623f\u95f4\u7684\u53d6\u6700\u5927\u503c\u5373\u662f\u6211\u4eec\u7684\u6700\u7ec8\u9700\u8981\u7684\u7b54\u6848\u3002</p>"},{"location":"LeetCode/DP/DP/#code_4","title":"Code","text":"<pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        int num = nums.size();\n        vector&lt;int&gt; money;\n        money.resize(num);\n        money[0] = nums[0];\n        money[1] = nums[1];\n        for(int i=2;i&lt;num;i++){\n            // \u53ef\u4ee5\u9009\u62e9\u4e0d\u5077\u524d\u4e00\u4e2a\u623f\u95f4\n            int max = -1;\n            for(int j = i-2;j&gt;=0;j--){\n                if(money[j]&gt;max)\n                    max = money[j];\n            }\n            money[i]=nums[i]+max;\n        }\n        return max(money[num-1],money[num-2]);\n    }\n};\n</code></pre>"},{"location":"LeetCode/DP/DP/#5-k","title":"5 \u548c\u4e3a K \u7684\u5b50\u5e8f\u5217","text":"<p>\u9898\u76ee\u6765\u6e90 </p> <p></p>"},{"location":"LeetCode/DP/DP/#1_2","title":"\u9898\u89e31 \u66b4\u529b\u641c\u7d22","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\\(O(N^2)\\)</p> <p>\u66b4\u529b\u641c\u7d22\u7684\u601d\u8def\u5c31\u662f\uff0c\u5c31\u662f\u904d\u5386\u6bcf\u4e00\u4e2a\u7ec4\u5408\\((i,j)\\)\u7684\u5b50\u6570\u7ec4\u548c\uff0c\u67e5\u770b\u662f\u5426\u5b58\u5728\u7b49\u4e8e\\(k\\)\u7684\u5b50\u6570\u7ec4\u3002\u90a3\u4e48\u6211\u4eec\u6709\u9012\u63a8\u5f0f\u3002</p> \\[ result[i] = \\begin{cases}  result[i-1] + nums[i] &amp; \\text{if } i &gt; 0 \\\\ nums[0] &amp; \\text{if } i = 0  \\end{cases} \\] <p>\u4e00\u5f00\u59cb\u6211\u7684\u601d\u8def\u662f\u5f00\u4e86\u4e00\u4e2a\\(N*N\\)\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u8fd9\u6837\u5728\u8dd1\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u5185\u5b58\u8d85\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u6362\u601d\u8def\uff0c\u4ec5\u5f00\u4e00\u4e2a\\(O(N)\\)\u7684\u6570\u7ec4\uff0c\u7136\u540e\u5229\u7528\u9012\u63a8\u5f0f\u6765\u9a8c\u8bc1\u662f\u5426\u4e3a\\(k\\).\u8dd1\u662f\u8dd1\u901a\u4e86\uff0c\u4f46\u8fd8\u662f\u82b1\u8d39\u4e86 \\(\\frac{N*(N-1)}{2}\\)\u7684\u65f6\u95f4\uff0c\\(O(N^2)\\)\u7684\u65f6\u95f4\u8fd8\u4e0d\u662f\u6700\u4f18\u7684\u3002</p>"},{"location":"LeetCode/DP/DP/#code_5","title":"Code","text":"<pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        int size = nums.size();\n        vector&lt;int&gt;result;\n        result.resize(size);\n        int count = 0;\n        result[0] = nums[0];\n        if(result[0]==k)\n            count++;\n        for(int i=1;i&lt;size;i++){\n            result[i] = result[i-1] + nums[i];\n        }\n\n        for(int i = 1;i&lt;size;i++){\n            int temp = result[i];\n            for(int j = 0;j&lt;=i;j++){\n                if(temp==k)\n                    count++;\n                temp -= nums[j];\n            }\n        }\n        return count;\n    }\n};\n</code></pre>"},{"location":"LeetCode/DP/DP/#2_2","title":"\u9898\u89e32 \u524d\u7f00\u548c+\u54c8\u5e0c\u8868\u4f18\u5316","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(N)\\)</p> <p>\u601d\u8def\u5176\u5b9e\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u60f3\u5230\u4e86\uff0c\u56e0\u4e3a\u505a\u8fc7\u7c7b\u4f3c \u4e24\u6570\u4e4b\u548c\u7684\u9898\u76ee\uff0c\u8fd9\u91cc\u4e5f\u662f\u4e00\u6837\uff0c\u6211\u4eec\u4ece\u5de6\u5f80\u53f3\u904d\u5386\uff0c\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u4e00\u4e2a\u9012\u63a8\u5f0f\uff1a \\(pre[j] - pre[i-1] == k\\)\u8fd9\u4e2a\u662f\u6211\u4eec\u8981\u5224\u65ad\u7684\u5f0f\u5b50\uff0c\u800c\\(pre[j]\\)\u8868\u793a\u7684\u5c31\u662f\\((0,j)\\)\u7684\u524d\u7f00\u548c\uff0c\u6211\u4eec\u5c06\u4e0a\u8ff0\u7684\u5f0f\u5b50\u8fdb\u884c\u53d8\u6362\uff0c\u5f97\u5230\u4e0b\u8ff0\u7684\u5185\u5bb9\uff1a \\(pre[j]-k == pre[i-1]\\) \u5176\u5b9e\u5c31\u5f88\u81ea\u7136\u7684\u60f3\u5230\u662f\u5426\u5b58\u5728\u95ee\u9898\u4f7f\u7528\u54c8\u5e0c\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u9a6c\u7684\u5f97\u5230\u7528\u4e00\u4e2a\\(mp\\)\u6765\u5b58\u653e\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u6211\u4eec\u6709\u8fd9\u6837\u7684\u4e00\u4e32\u6570\u7ec4\\(\\{1,2,3\\},k=5\\) \u90a3\u4e48\u6211\u4eec\u5c31\u6709</p> i \\(pre[i]\\) \\(pre[i]-k\\) \u662f\u5426\u67e5\u5230\\(mp[pre[i]-k]\\) 0 1 -4 Nope 1 3 -2 Nope 2 6 1 Find! k mp[k] 0 1 1 1 3 1 <p>\u6211\u4eec\u770b\u4e0a\u8ff0\u7684\u52a0\u9ed1\u4f8b\u5b50\uff0c\u5c31\u662f\u627e\u5230\\(\\{2,3\\}\\)\u8fd9\u4e2a\u548c\u4e3a\\(5\\)\u7684\u5b50\u6570\u7ec4\u3002</p>"},{"location":"LeetCode/DP/DP/#code_6","title":"Code","text":"<pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        // mp \u8bb0\u5f55\u7684\u662f \u622a\u6b62 i \u7684\u524d\u7f00\u548c\n        unordered_map&lt;int,int&gt;mp;\n        mp[0] = 1;\n        int pre = 0,count = 0;\n        for(int &amp;num : nums){\n            pre+=num;\n            if(mp.find(pre-k)!=mp.end()){\n                count+=mp[pre-k];\n            }\n            mp[pre]++;\n        }\n        return count;\n    }\n};\n</code></pre>"},{"location":"LeetCode/Greedy/Greedy/","title":"\u8d2a\u5fc3\u7b97\u6cd5","text":""},{"location":"LeetCode/Greedy/Greedy/#introduce","title":"Introduce","text":"<p>\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u5b57\u9762\u610f\u601d\u5c31\u662f\u9009\u53d6\u5f53\u524d\u72b6\u6001\u4e0b\u7684\u6700\u4f18\u89e3\uff0c\u4e5f\u5c31\u662f\u672c\u5730\u6700\u4f18\u89e3<code>local optimal solution</code></p> <p>\u4e0b\u9762\u662f <code>wiki</code> \u7684\u5b9a\u4e49:</p> <p>A greedy algorithm is any algorithm that follows the problem-solving heuristic of making the locally optimal choice at each stage.[1] In many problems, a greedy strategy does not produce an optimal solution, but a greedy heuristic can yield locally optimal solutions that approximate a globally optimal solution in a reasonable amount of time.</p> <p>For example, a greedy strategy for the travelling salesman problem (which is of high computational complexity) is the following heuristic: \"At each step of the journey, visit the nearest unvisited city.\" This heuristic does not intend to find the best solution, but it terminates in a reasonable number of steps; finding an optimal solution to such a complex problem typically requires unreasonably many steps. </p>"},{"location":"LeetCode/Greedy/Greedy/#_2","title":"\u4f8b\u9898","text":""},{"location":"LeetCode/Greedy/Greedy/#1","title":"1 \u8df3\u8dc3\u6e38\u620f","text":"<p> \u9898\u76ee\u6765\u6e90</p> <p></p>"},{"location":"LeetCode/Greedy/Greedy/#_3","title":"\u9898\u89e3","text":"<p>\u6211\u4eec\u8fd9\u9898\u4e3b\u8981\u662f\u8d2a\u5fc3\u7b97\u6cd5\u3002\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\\(distance\\)\u6570\u7ec4\uff0c\u4ed6\u7684\u4f5c\u7528\u662f\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\\(i\\)\uff0c\u6240\u80fd\u8df3\u5230\u7684\u6700\u5927\u4f4d\u7f6e\u3002\u6211\u4eec\u9996\u5148\u8fdb\u884c\u4e00\u904d\u904d\u5386\u3002\u7136\u540e\u6309\u987a\u5e8f\u4f9d\u6b21\u904d\u5386\u4ece\u8be5\u70b9\u5f00\u59cb\u5230\u80fd\u8df3\u8dc3\u7684\u6700\u5927\u8ddd\u79bb\u7684\u8fc7\u7a0b\u4e2d\u5bfb\u627e\u4e0b\u4e00\u4e2a\u80fd\u8df3\u8dc3\u7684\u6700\u5927\u8ddd\u79bb\uff0c\u4f9d\u6b21\u5f80\u590d\uff0c\u6211\u4eec\u6a21\u62df\u8df3\u8dc3\u7684\u8fc7\u7a0b\uff0c\u8fd9\u5176\u4e2d\u5176\u5b9e\u5c31\u662f\u8fd0\u7528\u4e86\u8d2a\u5fc3\u7684\u7b97\u6cd5\uff0c\u9009\u53d6\u5f53\u524d\u72b6\u6001\u4e2d\u80fd\u8dc3\u8fc1\u7684\u6700\u5927\u503c\u8fdb\u884c\u8df3\u8dc3\u3002</p>"},{"location":"LeetCode/Greedy/Greedy/#code","title":"Code","text":"<pre><code>class Solution {\npublic:\n    bool canJump(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; distance;\n        int len = nums.size();\n        if(len==1)\n            return true;\n        for(int i =0;i&lt;len;i++){\n            // temp represents that the next boundary position that we can jump;\n            distance.push_back(nums[i]+i);\n        }\n        int index = 0;\n        for(int j=0;j&lt;=len-2;){\n            // The case that after we update the array, we get the destination, avoid ;\n            if(distance[j]&gt;=len-1)\n                return true;\n            int max = distance[j];\n            for(int p = j+1;p&lt;=distance[j];p++){\n                if(distance[p]&gt;max){\n                    index = p;\n                    max = distance[p];\n                }\n            }\n            if(distance[j]==max)\n                break;\n            j = index;\n        } \n        return false;\n    }\n};\n</code></pre>"},{"location":"LeetCode/Greedy/Greedy/#2-ii","title":"2 \u8df3\u8dc3\u6e38\u620fII","text":"<p>\u9898\u76ee\u6765\u6e90 </p>"},{"location":"LeetCode/Greedy/Greedy/#_4","title":"\u9898\u89e3","text":"<p>\u8fd9\u9898\u5c31\u66f4\u7b80\u5355\u4e86\u3002\u5728\u4e0a\u4e00\u9898\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u4e2a<code>count</code>\u4f5c\u4e3a\u8bb0\u5f55\u8df3\u8dc3\u6b21\u6570\u5373\u53ef\u3002over</p>"},{"location":"LeetCode/Heap/Heap/","title":"\u5806","text":"<p>\u5806 \u4e5f\u5c31\u662f\u4f18\u5148\u961f\u5217 </p> <ul> <li>Max-Heap</li> <li>Min-Heap </li> </ul> <p>\u5728 Java \u7684 <code>Collections</code> \u4e2d\u7684 <code>Priority_Queue</code>  \u662f\u5b9a\u4e49\u7684\u6700\u5c0f\u5806\uff0c\u5982\u679c\u60f3\u8ba9\u5b83\u4e3a\u6700\u5927\u5806\uff0c\u5219\u9700\u8981\u4f20\u5165\u91cd\u8f7d\u8fc7\u540e\u7684<code>Comparable</code>\u63a5\u53e3\uff0c\u800c<code>Cpp</code>\u7684 <code>stl</code>\u6070\u6070\u76f8\u53cd\uff0c\u5b83\u9ed8\u8ba4\u7684\u662f\u6700\u5927\u5806\u3002\u6240\u4ee5\u6211\u5728\u5199\u9898\u7684\u65f6\u5019\uff0c\u4e00\u822c\u5c31\u662f\u770b\u9700\u8981\u5b9a\u4e49\u7684\u662f\u4ec0\u4e48\u5806\uff0c\u800c\u8fdb\u884c\u9009\u62e9\u8bed\u8a00\u5077\u61d2\u4e86 x</p>"},{"location":"LeetCode/Heap/Heap/#_2","title":"\u4f8b\u9898","text":""},{"location":"LeetCode/Heap/Heap/#1-k","title":"1 \u6570\u7ec4\u4e2d\u7684\u7b2ck\u4e2a\u6700\u5927\u7684\u5143\u7d20","text":"<p>\u9898\u76ee\u6765\u6e90</p> <p>\u7ed9\u5b9a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u6574\u6570 <code>k</code>\uff0c\u8bf7\u8fd4\u56de\u6570\u7ec4\u4e2d\u7b2c <code>k</code> \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c <code>k</code> \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c <code>k</code> \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002</p> <p>\u4f60\u5fc5\u987b\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p>"},{"location":"LeetCode/Heap/Heap/#_3","title":"\u9898\u89e3","text":"<p>\u5f88\u7b80\u5355\u7684\u601d\u8def\uff0c\u6211\u4eec\u65e2\u7136\u8981\u627e\u7b2c k \u5927\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u5f88\u81ea\u7136\u7684\u60f3\u6cd5\u5c31\u662f\uff0c\u5b83\u53c8\u662f\u6700\u5927\u7684<code>k</code>\u4e2a\u5143\u7d20\u4e2d\u7684\u6700\u5c0f\u503c\u3002\u6240\u4ee5\u6211\u4eec\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u7ef4\u62a4\u4e00\u4e2a\u6700\u5c0f\u5806\u3002\u7b49\u904d\u5386\u5b8c\u6240\u6709\u7684\u5143\u7d20\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u77e5\u9053\u6700\u540e\u7684\u5806\u7684\u6700\u5c0f\u503c----\u90a3\u4e2a\u5c31\u662f\u6570\u7ec4\u4e2d\u7684\u7b2c<code>K</code>\u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002</p>"},{"location":"LeetCode/Heap/Heap/#code","title":"Code","text":"<pre><code>class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        PriorityQueue &lt;Integer&gt; pq = new PriorityQueue&lt;&gt;();\n        // Step1: we set a Min-Heap;\n        for(int i=0;i&lt;k;i++){\n            pq.add(nums[i]);\n        }\n        // Step2: \n        int len = nums.length;\n        for(int i = k;i&lt;len;i++){\n            int e = nums[i];\n            int minE = pq.peek();\n            if(minE&lt;e){\n                pq.poll();\n                pq.add(e);\n            }\n        }\n        return pq.peek();\n    }\n}\n</code></pre>"},{"location":"LeetCode/Tree/BinaryTree/","title":"\u4e8c\u53c9\u6811","text":""},{"location":"LeetCode/Tree/BinaryTree/#_2","title":"\u5bf9\u4e8e\u4e8c\u53c9\u6811\u7684\u5e38\u89c1\u51e0\u79cd\u89e3\u9898\u7b56\u7565","text":"<ol> <li>\u9012\u5f52</li> <li>DFS</li> <li>BFS</li> </ol> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u56f4\u7ed5\u7740\u8fd9\u51e0\u70b9\u8fdb\u884c\u5c55\u5f00</p>"},{"location":"LeetCode/Tree/BinaryTree/#_3","title":"\u4f8b\u9898","text":""},{"location":"LeetCode/Tree/BinaryTree/#_4","title":"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u5bbd\u5ea6","text":"<p>\u9898\u76ee\u6765\u6e90\u5b57\u8282</p> <p> \u9898\u76ee\u6765\u6e90</p> <p>\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9<code>root</code>\uff0c\u8fd4\u56de\u6811\u7684\u6700\u5927\u5bbd\u5ea6\u3002 \u6811\u7684\u6700\u5927\u5bbd\u5ea6\u662f\u6240\u6709\u5c42\u4e2d\u6700\u5927\u7684\u5bbd\u5ea6\u3002 \u6bcf\u4e00\u5c42\u7684\u5bbd\u5ea6\u88ab\u5b9a\u4e49\u4e3a\u8be5\u5c42\u6700\u5de6\u548c\u6700\u53f3\u7684\u975e\u7a7a\u8282\u70b9\uff08\u5373\uff0c\u4e24\u4e2a\u7aef\u70b9\uff09\u4e4b\u95f4\u7684\u957f\u5ea6\u3002\u5c06\u8fd9\u4e2a\u4e8c\u53c9\u6811\u89c6\u4f5c\u4e0e\u6ee1\u4e8c\u53c9\u6811\u7ed3\u6784\u76f8\u540c\uff0c\u4e24\u7aef\u70b9\u95f4\u4f1a\u51fa\u73b0\u4e00\u4e9b\u5ef6\u4f38\u5230\u8fd9\u4e00\u5c42\u7684<code>null</code>\u8282\u70b9\uff0c\u8fd9\u4e9b<code>null</code>\u8282\u70b9\u4e5f\u8ba1\u5165\u957f\u5ea6\u3002 \u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u5c06\u4f1a\u5728  <code>32 \u4f4d</code> \u5e26\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002</p> <p></p> <p>\u4e0b\u9762\u662f\u7b80\u5355\u7684\u4ee3\u7801\u5b9e\u73b0: <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        unsigned long long res = 1;\n        vector&lt;pair&lt;TreeNode*, unsigned long long&gt;&gt;arr;\n        arr.emplace_back(root,1L);\n        while(!arr.empty()){\n            vector&lt;pair&lt;TreeNode*,unsigned long long&gt;&gt;tmp;\n            for(auto &amp;[node,index]:arr){\n                if(node-&gt;left)\n                    tmp.emplace_back(node-&gt;left,index*2);\n                if(node-&gt;right)\n                    tmp.emplace_back(node-&gt;right,index*2+1);\n            }\n            res = max(res,arr.back().second-arr[0].second+1);\n            arr = move(tmp);\n        }\n        return res;\n\n    }\n\n};\n</code></pre> \u6211\u4eec\u8fd9\u9898\u4e3b\u8981\u4f7f\u7528\u7684\u662f<code>BFS</code>\u6765\u8fdb\u884c\u5c42\u5e8f\u904d\u5386\uff0c\u83b7\u5f97\u6bcf\u4e00\u5c42\u7684\u6700\u5de6\u548c\u6700\u53f3\u8fb9\u975e<code>null</code>\u8282\u70b9\uff0c\u4ece\u800c\u83b7\u5f97\u6bcf\u4e00\u5c42\u7684\u5bbd\u5ea6\uff0c\u4f9d\u6b21\u904d\u5386\u4ece\u800c\u83b7\u5f97\u6700\u5927\u7684\u4e8c\u53c9\u6811\u5bbd\u5ea6\u3002</p> <p>\u8fd9\u91cc\u63d0\u4e00\u53e5\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 <code>move</code> \u5c06<code>vector&lt;pair&lt;TreeNode* , unsigned long long&gt;&gt; tmp</code> \u590d\u5236\u7ed9\u4e86 <code>res</code></p> <p>\u5bf9\u4e8e <code>move</code> \u53ef\u4ee5\u53c2\u8003  </p>"},{"location":"LeetCode/windows/windows/","title":"\u6ed1\u52a8\u7a97\u53e3","text":"<p>\u6ed1\u52a8\u7a97\u53e3\u5176\u5b9e\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u5728\u89e3\u9898\u7684\u65f6\u5019\u907f\u514d\u4e86\u66b4\u529b\u679a\u4e3e\u800c\u4ea7\u751f\u7684\u5927\u91cf\u5197\u4f59\uff0c\u5e38\u89c1\u7684\u8fd0\u7528\u5728\u6570\u7ec4\u904d\u5386\u7684\u65f6\u5019\u9700\u8981\u627e\u5230\u7684\u4e00\u6bb5\u8fde\u7eed\u7684\u5177\u6709\u67d0\u4e2a\u7279\u5f81\u7684\u6570\u636e</p> <p>\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u627e\u5230\u7684\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u9700\u8981\u505a\u7684\u662f:</p> <ul> <li>\u5148\u627e\u5230\u4e00\u6bb5\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u533a\u95f4</li> <li>\u5f00\u59cb\u7ef4\u62a4\u4e24\u4e2a\u5de6\u53f3\u6307\u9488</li> <li>\u540c\u65f6\u7ef4\u62a4\u82e5\u5e72\u4e2a\u53d8\u91cf -&gt; \u7528\u4e8e\u4fdd\u8bc1\u5de6\u53f3\u6307\u9488\u533a\u95f4\u5185\u90e8\u7b26\u5408\u6761\u4ef6</li> <li>\u8fdb\u884c\u5faa\u73af\u5f80\u590d\u7684\u6267\u884c\u7ef4\u62a4\u533a\u95f4\u7684\u64cd\u4f5c\uff0c\u76f4\u5230\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4/\u8fde\u7eed\u533a\u57df</li> </ul>"},{"location":"LeetCode/windows/windows/#_2","title":"\u4f8b\u9898","text":""},{"location":"LeetCode/windows/windows/#1","title":"1 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":"<p>\u9898\u76ee\u6765\u6e90</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709<code>n</code>\u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6b63\u6574\u6570<code>target</code>\u3002 \u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u603b\u548c\u5927\u4e8e\u7b49\u4e8e <code>target</code> \u7684\u957f\u5ea6\u6700\u5c0f\u7684  \u5b50\u6570\u7ec4 <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> \uff0c\u5e76\u8fd4\u56de\u5176\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de<code>0</code>\u3002</p> <p></p> <pre><code>class Solution {\npublic:\n    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\n        int len = nums.size();\n        int min = -1;\n        int sum = 0;\n        for(int i=0;i&lt;len;i++){\n            sum += nums[i];\n            if(sum&gt;=target){\n                min = i+1;\n                break;\n            }\n        }\n        if(min==-1)\n            // it indicates that it doesn't exist;\n            return 0;\n        int left = 0;\n        int right = min;\n        while(right&lt;len){\n            for(;sum&gt;=target;left++){\n                sum -= nums[left];\n            }\n            if(right-left+1 &lt; min)\n                min = right-left+1;\n            for(;sum&lt;target&amp;&amp;right&lt;len;right++)\n                sum += nums[right];\n        }\n        if(right==len&amp;&amp;sum&gt;target){\n            for(;sum&gt;=target;left++){\n                sum-=nums[left];\n            }\n        }\n        min = (min &gt; right - left + 1) ? right - left + 1 : min;\n\n        return min;\n    }\n};\n</code></pre>"},{"location":"LeetCode/windows/windows/#_3","title":"\u9898\u89e3","text":"<p>\u8fd9\u9898\u7684\u601d\u8def\u5c31\u6bd4\u8f83\u6e05\u6670\uff0c\u5c31\u662f\u5148\u627e\u5230\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6 (sum &gt;= target) \u7684\u6570\u7ec4\uff0c\u7136\u540e\u5f00\u59cb\u7ef4\u62a4\u5de6\u53f3\u4e24\u4e2a\u6307\u9488 <code>left</code> \u548c <code>right</code>,\u901a\u8fc7\u53f3\u79fb <code>left</code> \u5de6\u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u7f29\u5c0f\u540e\u7684\u533a\u95f4\u957f\u5ea6(update),\u4f46\u53f3\u79fb<code>right</code>\u6307\u9488\u7684\u76ee\u7684\u662f\u83b7\u5f97\u5168\u65b0\u7684\u7b26\u5408\u6761\u4ef6\u7684\u533a\u95f4\uff0c\u4f9d\u6b21\u5f80\u590d\u3002 \u540c\u65f6\uff0c\u5728\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u5bf9<code>left</code>\u6307\u9488\u5355\u72ec\u505a\u4e00\u6b21\u53f3\u79fb\u5904\u7406\uff0c\u6765\u505a\u6700\u540e\u7684\u4e00\u6b21\u66f4\u65b0\u6700\u5c0f\u533a\u95f4\u7684\u64cd\u4f5c\u3002 </p>"},{"location":"LeetCode/windows/windows/#2","title":"2 \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c","text":"<p>\u9898\u76ee\u6765\u6e90</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code>\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a <code>k</code> \u7684\u6ed1\u52a8\u7a97\u53e3\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u4fa7\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u53f3\u4fa7\u3002\u4f60\u53ea\u53ef\u4ee5\u770b\u5230\u5728\u6ed1\u52a8\u7a97\u53e3\u5185\u7684 <code>k</code> \u4e2a\u6570\u5b57\u3002\u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\u3002</p> <p>\u8fd4\u56de \u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c \u3002</p> <p></p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        vector&lt;int&gt;result;\n        priority_queue&lt;pair&lt;int,int&gt;&gt; pq;\n        int len = nums.size();\n        for(int i=0;i&lt;k;i++){\n            pq.emplace(nums[i],i);\n        }\n        result.push_back(pq.top().first);\n        for(int i = k;i&lt;len;i++){\n            pq.emplace(nums[i],i);\n            while(pq.top().second&lt;=i-k){\n                pq.pop();\n            }\n            result.push_back(pq.top().first);\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"LeetCode/windows/windows/#_4","title":"\u9898\u89e3","text":"<p>\u7b80\u5355\u7684\u6765\u8bf4\u5c31\u662f\uff0c\u6211\u4eec\u6784\u9020\u4e86\u4e00\u4e2a\u6700\u5927\u5806<code>priority_queue&lt;pair&lt;int,int&gt;&gt; pq</code>,\u91cc\u9762\u5b58\u653e\u7684\u662f\u4e00\u4e2a\u5143\u7ec4\\((nums[i],i)\\)\uff0c\u7136\u540e\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u8fd9\u4e2a\u6700\u5927\u5806\u5373\u53ef\uff0c\u5728\u6bcf\u6b21\u5c06\u7a97\u53e3\u5f80\u53f3\u5e73\u79fb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u65f6\u523b\u5173\u6ce8\u6700\u5927\u5806\u7684\u5806\u9876\uff0c\u5f88\u81ea\u7136\u7684\u60f3\u5230\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6bcf\u6b21\u7ef4\u62a4\u7684\u65f6\u5019\uff0c\u89c2\u5bdf\u8fd9\u4e2a\u5806\u9876\u5143\u7d20\u662f\u5426\u662f\u6ed1\u5757\u5185\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\u5018\u82e5\u8fd9\u4e2a\u6700\u5927\u503c\u4e0d\u662f\u6ed1\u5757\u5185\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u8fd9\u4e2a\u5806\u9876\u5f39\u51fa\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u76f4\u5230\u5806\u9876\u7684\u5143\u7d20\u662f\u6ed1\u5757\u5185\u7684\u6700\u5927\u503c\u3002\u8fd9\u6837\u7684\u597d\u5904\u662f\u4e0d\u7528\u50cf\u6211\u4eec\u4e00\u5f00\u59cb\u7684\u65b9\u6848\u4e00\u6837\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u6ed1\u5757\u6700\u5de6\u8fb9\u662f\u4e4b\u524d\u6ed1\u5757\u5185\u7684\u6700\u5927\u5143\u7d20\uff0c\u5728\u5411\u53f3\u8fb9\u79fb\u52a8\u7684\u4e00\u4e2a\u5355\u4f4d\u4e4b\u540e\uff0c\u5c31\u8fc5\u901f\u7684\u5bf9\u5269\u4e0b\u7684\u5185\u5bb9\u8fdb\u884c<code>sort</code>\u3002\u8fd9\u4e2a\u505a\u6cd5\u7684\u65f6\u95f4\u6210\u672c\u5176\u5b9e\u662f\u633a\u5927\u7684\uff0c\u5c24\u5176\u662f\u5728\u5982\u679c\u6211\u4eec\u5728\u4e00\u4e2a\u964d\u5e8f\u7684\u5e8f\u5217\u4e2d\uff0c\u90a3\u4e48\u5c31\u7b49\u4e8e\u8bf4\u6bcf\u6b21\u90fd\u8981\u8fdb\u884c\u6392\u5e8f\uff0c\u4f8b\u5982\u4ee5\u4e0b\u7684\u60c5\u51b5\uff1a</p> \\[\\{10,9,8,7,6,5,4,3,2,1\\},k = 3\\] <p>\u90a3\u4e48\u5c31\u662f\u6bcf\u6b21\u90fd\u9700\u8981\u91cd\u65b0\u6392\u5e8f\uff0c\u4f46\u5018\u82e5\u7ef4\u62a4\u4e00\u4e2a\u7b80\u5355\u7684\u6700\u5927\u5806\uff0c\u6211\u4eec\u7684\u5355\u6b65\u64cd\u4f5c\u4e5f\u53ea\u9700\\(O(\\log{N})\\)\u7684\u590d\u6742\u5ea6\uff0c\u5c31\u7b97\u662f\u6bcf\u4e00\u6b65\u90fd\u9700\u8981\u7ef4\u62a4\uff0c\u90a3\u4e5f\u53ea\u9700\u8981\\(O(N\\log{N})\\)\u7684\u590d\u6742\u5ea6\uff0c\u4f46\u5018\u82e5\u662f\\(O(N\\log{N})\\)\u7684\u5185\u7f6e\u6392\u5e8f\uff0c\u5982\u679c\u9047\u5230\u7279\u6b8a\u60c5\u51b5\uff0c\u5c31\u9700\u8981\\(O(N^2\\log{N})\\)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u8fd9\u53ef\u662f\u4e00\u7b14\u5f88\u5927\u7684\u5f00\u9500\uff01</p>"},{"location":"Tech/Web/Asyn/","title":"Asynchronous with Synchronous","text":"<p>\u5f02\u6b65\u4e0e\u540c\u6b65\u7f16\u7a0b</p> <ul> <li>\u9996\u5148\u533a\u5206\u4e00\u4e0b\u6982\u5ff5\uff0c\u4ec0\u4e48\u662f\u540c\u6b65/\u5f02\u6b65\uff1f</li> <li>\u540c\u6b65: \u8868\u793a\u7684\u662f\u7a0b\u5e8f\u6309\u7167\u987a\u5e8f\u6267\u884c</li> <li>\u5f02\u6b65: \u8868\u793a\u7684\u662f\u7a0b\u5e8f\u4e0d\u6309\u7167\u987a\u5e8f\u6267\u884c,\u4e5f\u5c31\u662f\u4e3b\u7ebf\u7a0b\u53d1\u5c04\u4e00\u4e2a\u5b50\u7ebf\u7a0b\u6765\u6267\u884c\uff0c\u8fd9\u6837\u7684\u6548\u7387\u66f4\u9ad8 </li> </ul> <p>\u4e0b\u9762\u7ed9\u5f20\u56fe\u6bd4\u8f83\u597d\u7406\u89e3:</p> <p></p> <p>\u5177\u4f53\u6765\u7406\u89e3\u4e00\u4e0b\u5f02\u6b65\u7f16\u7a0b\uff1a \u5f02\u6b65\u7f16\u7a0b\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1f \u672c\u8d28\u662f\u4ece\u4e3b\u7ebf\u7a0b\u53d1\u5c04\u5b50\u7ebf\u7a0b\uff0c\u56e0\u4e3a\u5b50\u7ebf\u7a0b\u662f\u4e0d\u4f1a\u5f71\u54cd\u4e3b\u7ebf\u7a0b\uff0c\u5728\u64cd\u4f5c\u7cfb\u7edf\u91cc\u5b66\u8fc7\u5bf9\u4e8e\u5b50\u7ebf\u7a0b\u6765\u8bf4\uff0c\u6211\u4eec\u8fdb\u884c\u4e86<code>fork</code>\u64cd\u4f5c\uff0c\u4e8c\u8005\u5171\u4eab\u4ee3\u7801\uff0c\u6570\u636e\u7b49\"\u76f8\u5bf9\u9759\u6001\"\u7684\u8d44\u6e90\uff0c\u800c\u7ef4\u62a4\u5c5e\u4e8e\u5404\u81ea\u7684\u5bc4\u5b58\u5668\uff0c\u6808\uff0cPC\u7b49\u201c\u76f8\u5bf9\u52a8\u6001\u201d\u7684\u8d44\u6e90\u3002\u6216\u8005\u8bf4\u8fd9\u6837\u7406\u89e3\uff0c\u7ebf\u7a0b\u662f\u53ea\u4eab\u6709\u81ea\u5df1\u7684\u72ec\u7acb\u52a8\u6001\u8d44\u6e90\uff0c\u4f46\u90a3\u4e9b\u9759\u6001\u7684\u8d44\u6e90\u5c31\u662f\u5171\u4eab\u7684\u4e86\u3002\u800c\u5728\u524d\u7aef\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u5728\u5904\u7406\u4e00\u4e9b\u7b80\u77ed\u3001\u5feb\u901f\u7684\u64cd\u4f5c\u65f6\u5019\uff0c\u5f80\u5f80\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u5c31\u53ef\u4ee5\u5b8c\u6210\uff0c\u4e3b\u7ebf\u7a0b\u4f5c\u4e3a\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u4e0d\u80fd\u63a5\u53d7\u591a\u65b9\u9762\u7684\u8bf7\u6c42\uff0c\u4e5f\u5c31\u662f\u8bf4\u5355\u4e2a\u4e8b\u4ef6\u6ca1\u6709\u5b8c\u6210\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u4f1a\u5904\u7406\u5176\u4ed6\u7684\u8bf7\u6c42\u3002  \u6211\u4eec\u73b0\u5728\u6709\u4e00\u4e2a\u6309\u94ae\uff0c\u6309\u4e0b\u5c31\u4f1a\u5f62\u6210\u6b7b\u5faa\u73af\uff0c\u6574\u4e2a\u9875\u9762\u4f1a\u5931\u53bb\u54cd\u5e94\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u79cd\u65f6\u5019\u5c31\u4e0d\u80fd\u4f7f\u7528\u4e3b\u7ebf\u7a0b\u6765\u5b8c\u6210\u8fd9\u4e2a\u4e8b\u4ef6\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u540e\u7eed\u4e8b\u4ef6\u7684<code>terminated</code>,\u56e0\u6b64\u6211\u4eec\u9009\u62e9\u4f7f\u7528\u5b50\u7ebf\u7a0b\u6765\u5e76\u884c\u5b8c\u6210\u8fd9\u4e2a\u4e8b\u4ef6\u3002\u6240\u4ee5\u6211\u4eec\u5c31\u8003\u8651\u4e86\u5f02\u6b65\u6765\u5904\u7406\uff0c\u7531\u4e8e\u5b50\u7ebf\u7a0b\u4e00\u65e6\u53d1\u5c04\u4e86\u5c31\u4f1a\u548c\u4e3b\u7ebf\u7a0b\u5931\u53bb\u540c\u6b65\uff0c\u65e0\u6cd5\u786e\u8ba4\u5b83\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u9700\u8981\u6709<code>callback</code>\u56de\u8c03\u51fd\u6570\u6765\u5904\u7406\u5b9e\u73b0\u5f02\u6b65\u4efb\u52a1\u7684\u7ed3\u679c\u5904\u7406\u3002</p> <p>\u8fd9\u4e2a\u4f8b\u5b50\u5176\u5b9e\u5c31\u662f\u5bf9\u4e8e<code>setTimeout</code>\u51fd\u6570\u7684\u4f7f\u7528\uff0c<code>setTimeout(event,time)</code> waiting for time to call the event. <pre><code>function print(){\n    document.getElementById(\"demo\").innerHTML=\"RUNOOB!\";\n}\n// waiting for 3000 ms call this function;\nsetTimeout(print,3000);\n</code></pre></p>"},{"location":"Tech/Web/Asyn/#promise-object","title":"<code>Promise</code> Object","text":"<p>A <code>promise object</code> contains both the producing code and calls the consuming code.</p> <p>\u7b80\u5355\u7684\u7406\u89e3\u5c31\u662f\uff0c\u4e00\u4e2a<code>promise object</code> \u8d1f\u8d23\u4e86\u5f02\u6b65\u64cd\u4f5c\u7684\u6267\u884c\u548c\u7ed3\u679c\u7684\u4f7f\u7528\u3002 \u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\uff0c<code>promise object</code>\u5bf9\u8c61\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5c01\u88c5\uff0c\u4ed6\u540c\u65f6\u5305\u542b\u4e86\u751f\u4ea7\u548c\u7ed3\u679c\u53cd\u9988\u4e24\u90e8\u5206\u5185\u5bb9\u4e8e\u4e00\u4f53\u3002</p> <p>\u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50(\u6a21\u677f)\uff1a <pre><code>let myPromise = new Promise(function(myResolve, myReject) {\n// \"Producing Code\" (May take some time)\n\n  myResolve(); // when successful\n  myReject();  // when error\n});\n\n// \"Consuming Code\" (Must wait for a fulfilled Promise)\nmyPromise.then(\n  function(value) { /* code if successful */ },\n  function(error) { /* code if some error */ }\n);\n</code></pre> \u4e5f\u5c31\u662f\u628a\u4e00\u6574\u4e2a\u8fc7\u7a0b\uff0c\u6267\u884c\u548c\u53cd\u9988\u7ed3\u679c\u90fd\u5c01\u88c5\u5230\u4e86<code>myPromise</code>\u4e2d\u53bb\u3002</p> <ul> <li>\u4e00\u4e2a<code>promise object</code>\u53ef\u4ee5<ul> <li>pending </li> <li>fulfilled</li> <li>rejected \u6216\u8005\u4e00\u79cd\u66f4\u672c\u8d28\u7684\u65b9\u6cd5\u662f\u628a<code>promise object</code>\u770b\u6210\u72b6\u6001\u673a\u7684\u67d0\u4e2a\u72b6\u6001<code>state</code>\u4ee5\u53ca\u63a5\u4e0b\u6765\u7684<code>result</code>.</li> </ul> </li> </ul> State pending fulfilled rejected result undefined a result value an error object"},{"location":"Tech/Web/Asyn/#how-to-use-promise-object","title":"How to use <code>Promise object</code>","text":"<p><pre><code>function myDisplayer(some) {\n  document.getElementById(\"demo\").innerHTML = some;\n}\n\nlet myPromise = new Promise(function(myResolve, myReject) {\n  let x = 0;\n\n// The producing code (this may take some time)\n\n  if (x == 0) {\n    myResolve(\"OK\");\n  } else {\n    myReject(\"Error\");\n  }\n});\n\nmyPromise.then(\n  function(value) {myDisplayer(value);},\n  function(error) {myDisplayer(error);}\n);\n</code></pre> \u6211\u4eec\u6765\u770b\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a<code>myPromise</code>\u4f5c\u4e3a<code>promise object</code>\u7684\u5b9e\u4f8b\uff0c<code>myResolve</code>\u548c<code>myReject</code>\u662f\u4e24\u4e2a\u5185\u7f6e\u7684\u51fd\u6570\uff0c\u5206\u522b\u7528\u4e8e\u4f20\u9012\u6210\u529f/\u5931\u8d25\u7684\u7ed3\u679c\u3002\u6211\u4eec\u770b\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6709<code>x==0</code>\u90a3\u4e48\u59cb\u7ec8\u662f<code>myResolve</code>\u4e2d\u4f20\u9012\u4e86<code>OK</code>\u8fdb\u5165<code>.then</code>\u9636\u6bb5\uff0c\u7136\u540e\u7531\u4e8e<code>success</code>\uff0c\u90a3\u4e48\u5728<code>Promise</code>\u88ab\u6210\u529f\u8c03\u7528\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u6267\u884c<code>myDisplay(value).</code></p> <p>\u518d\u6765\u4e00\u4e2a\u901a\u4fd7\u6613\u61c2\u7684\u4f8b\u5b50 <pre><code>// simply use of callback function\nsetTimeout(function() { myFunction(\"I love You !!!\"); }, 3000);\n\nfunction myFunction(value) {\n  document.getElementById(\"demo\").innerHTML = value;\n}\n\n\n// simply using promise\nlet myPromise = new Promise(function(myResolve, myReject) {\n  setTimeout(function() { myResolve(\"I love You !!\"); }, 3000);\n});\n\nmyPromise.then(function(value) {\n  document.getElementById(\"demo\").innerHTML = value;\n});\n</code></pre></p>"},{"location":"Tech/Web/Asyn/#async","title":"<code>async</code> \u5173\u952e\u5b57","text":"<p>The keyword <code>async</code> before a function makes the funcion return a promise.</p> <p>\u73b0\u5728\u5c31\u6bd4\u8f83\u597d\u7406\u89e3\u4e86\uff0c\u5728<code>function()</code>\u4e4b\u524d\u52a0\u4e0a<code>async</code>\u5173\u952e\u5b57\u5c31\u8868\u793a\u7684\u662f<code>return</code>\u7684\u7ed3\u679c\u662f\u4e00\u4e2a<code>promise object</code>\u751f\u4ea7\u51fd\u6570\u4e4b\u540e\u7684<code>result</code>.\u53ef\u80fd\u73b0\u5728\u4e0d\u592a\u597d\u7406\u89e3\uff0c\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a <pre><code>// The function with `async` keyword\nasync function myFunction(){\n    return \"hello\";\n}\n\n// the above function is the same as the function below\nfunction myFunction(){\n    return Promise.resolve(\"Hello\");\n} \n</code></pre> \u56e0\u4e3a\u8fd9\u4e2a<code>return</code> \u7684\u7ed3\u679c\u6211\u4eec\u53ef\u4ee5\u9ed8\u8ba4\u4ed6\u603b\u662f<code>success</code>,\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528<code>resolve</code>.</p> <pre><code>async function myFunction(){\n    return \"hello\";\n}\n\nmyFunction().then{\n    function(value){\n        myDisplayer(value);\n    }\n    function(error){\n        myDisplayer(error);\n    }\n}\n</code></pre>"},{"location":"Tech/Web/Asyn/#await-operation","title":"<code>await</code> operation","text":"<p>It expects a Promise object(representing an asynchronous computation) \u5b83\u663e\u6027\u7684\u8868\u793a\u4e86\u4e00\u4e2a\u8bb8\u8bfa\u5bf9\u8c61\uff0c\u4e5f\u5c31\u662f\u8bf4\u660e\u5b83\u4f1a\u8fdb\u884c\u5f02\u6b65\u8ba1\u7b97\u3002</p> <ul> <li>It can only be used inside an <code>async</code> function.</li> <li>The <code>await</code> keyword makes the function pause the execution and wait for a resolved promise before it continues. \u5148\u7b49\u5f02\u6b65\u7684<code>resolve promise</code>\u518d\u7ee7\u7eed\u6267\u884c\u51fd\u6570\u7684\u503c\u3002</li> </ul> <p>\u4e0b\u9762\u7ed9\u4e2a\u4f8b\u5b50 <pre><code>// waiting for a timeout\nasync function myDisplay() {\n  let myPromise = new Promise(function(resolve) {\n    setTimeout(function() {resolve(\"I love You !!\");}, 3000);\n  });\n  document.getElementById(\"demo\").innerHTML = await myPromise;\n}\n\nmyDisplay();\n</code></pre> \u6211\u4eec\u4e0a\u9762\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5f88\u597d\u7406\u89e3\uff0c\u8981\u8fbe\u5230\u7684\u6548\u679c\u5c31\u662f\u57283000ms\u4e4b\u540e\u663e\u793a<code>I love you !!</code>\u7684\u5185\u5bb9\u3002\u56e0\u4e3a\u8fd9\u79cd\u6bd4\u8f83\u5c0f\uff0c\u53c8\u9891\u7e41\u52a8\u6001\u7684\u53d8\u52a8\uff0c\u6240\u4ee5\u9700\u8981\u7528\u5f02\u6b65\u6765\u5b9e\u73b0\u3002</p> <p>\u4e00\u4e2a\u66f4\u6df1\u5165\u7684\u4f8b\u5b50  <pre><code>async function getFile() {\n  let myPromise = new Promise(function(resolve) {\n    // \u8fd9\u91cc\u751f\u6210\u4e86\u4e00\u4e2a XMLHttpRequest\u7684\u5b9e\u4f8b\u5bf9\u8c61;\n    let req = new XMLHttpRequest();\n    req.open('GET', \"mycar.html\");\n    req.onload = function() {\n      if (req.status == 200) {\n        resolve(req.response);\n      } else {\n        resolve(\"File not Found\");\n      }\n    };\n    req.send();\n  });\n  document.getElementById(\"demo\").innerHTML = await myPromise;\n}\n\ngetFile();\n</code></pre></p> <p>\u6211\u4eec\u5148\u770b\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c<code>onload</code>\u662f\u6307\u5728\u8bf7\u6c42\u5b8c\u6210\u4e4b\u540e\uff0c\u5e76\u4e14\u5b8c\u6210\u8bf7\u6c42\u63a5\u6536\u54cd\u5e94\u4e4b\u540e\uff0c\u81ea\u52a8\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\u3002\u56e0\u4e3a<code>req.state==200</code>\u5c31\u662f\u8868\u793a\u7684\u662f\u6210\u529f\u83b7\u5f97\u54cd\u5e94\uff0c\u5426\u5219\u5c31\u662f\u5176\u4ed6\u7684\u95ee\u9898<code>response code</code>\u3002\u5728\u6210\u529f\u627e\u5230\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u4e4b\u540e\uff0c<code>resolve</code>\u5c31\u4f1a\u4f20\u9012\u5185\u5bb9\u5230<code>document.getElementById(\"demo\").innerHTML = await myPromise;</code>\u8fd9\u4e2a\u8bed\u53e5\u4e2d\uff0c\u628a\u83b7\u53d6\u5230\u5230\u5185\u5bb9\u7ed9\u6253\u5370\u51fa\u6765\u3002</p>"},{"location":"Tech/Web/Asyn/#ajax","title":"AJAX\u6280\u672f","text":"<p>\u4ec0\u4e48\u662fAJAX?</p> <p>AJAX = Asynochronous JavaScript and XML \u5f02\u6b65\u7684JavaScript \u548c XML,\u5b83\u4e0d\u662f\u4e00\u79cd\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u800c\u662f\u4e00\u79cd\u4f7f\u7528\u73b0\u6709\u6807\u51c6\u7684\u65b0\u65b9\u6cd5\u3002\u7c7b\u4f3c\u7684\u5176\u5b9e\u8fd8\u6709<code>JSX</code> (JavaScript+XML)</p> <p>\u8bb2\u4eba\u8bdd\u5c31\u662f\u8bf4\uff1a 1. AJAX\u662f\u4e00\u79cd\u5728\u65e0\u9700\u91cd\u65b0\u52a0\u8f7d\u6574\u4e2a\u7f51\u9875\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u591f\u66f4\u65b0\u90e8\u5206\u7f51\u9875\u7684\u6280\u672f\uff0c 2. AJAX\u901a\u8fc7\u5728\u540e\u53f0\u4e0e\u670d\u52a1\u5668\u4ea4\u6362\u6570\u636e\uff0c\u5e76\u80fd\u591f\u66f4\u65b0\u90e8\u5206\u7f51\u9875</p> <p></p> <p>\u5f88\u597d\u7406\u89e3\uff0c\u5176\u5b9e\u5c31\u662f\u4e8b\u4ef6\u89e6\u53d1\uff0c\u4e5f\u5c31\u662f\u9700\u8981AJAX\u7684\u65f6\u5019\uff0c\u4f1a\u521b\u9020\u4e00\u4e2a<code>XMLHttpRequest</code>\u8fd9\u6837\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8bf7\u6c42\u4f20\u7ed9\u670d\u52a1\u5668\uff0c\u5728\u5f97\u5230\u670d\u52a1\u5668\u7684\u7b54\u590d\u4e4b\u540e\uff0c\u8fdb\u884c\u5bf9\u4e8e\u7f51\u9875\u66f4\u65b0\u6765\u5b8c\u6210\u6d88\u606f\u7684\u53cd\u9988\u3002\u6b64\u8fc7\u7a0b\u4e2d\u4e0d\u9700\u8981\u5b8c\u6210\u91cd\u65b0\u52a0\u8f7d\u7f51\u9875\u3002 -&gt; \u591a\u7528\u4e8e\u52a8\u6001\u9875\u9762\uff0c\u9002\u5408\u4e8e\u9891\u7e41\u8bf7\u6c42\u548c\u66f4\u65b0\u9875\u9762\uff0c\u5982\u804a\u5929\u5e94\u7528\u3001\u65b0\u6d88\u606f\u63d0\u9192\u7b49\uff0c\u7528\u6237\u4f1a\u52a8\u6001\u89e6\u53d1\u90e8\u5206\u9875\u9762\u66f4\u65b0\uff0c\u800c\u4e0d\u5f71\u54cd\u5176\u4ed6\u7684\u5185\u5bb9\u3002</p> <p>\u8fd9\u91cc\u8bb2\u4e00\u4e0b \u4ec0\u4e48\u662f\u91cd\u65b0\u52a0\u8f7d\u7f51\u9875\uff1a \u5728\u67e5\u8be2\u4e86\u4e00\u4e0b\u4e4b\u540e\u53d1\u73b0\uff0c\u60f3\u6cd5\u5f88\u81ea\u7136\uff0c\u4e3a\u4ec0\u4e48\u4e8c\u8005\u8981\u533a\u5206\u5f00\u6765\uff0c\u6211\u4eec\u5229\u7528\u4e24\u4e2a\u8bcd\u6765\u533a\u5206 \u9759\u6001 \u548c \u52a8\u6001\uff0c\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u91cd\u65b0\u52a0\u8f7d\u7f51\u9875\uff1f\u6216\u8005\u8bf4\u91cd\u65b0\u52a0\u8f7d\u7f51\u9875\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1f\u91cd\u65b0\u4ece\u670d\u52a1\u5668\u4e2d\u83b7\u53d6\u6574\u4e2a\u7f51\u9875\u7684\u6570\u636e\uff0c\u90a3\u4e48\u8fd9\u5c31\u4f1a\u8bbe\u8ba1\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u5de5\u7a0b\u91cf\uff0c\u591a\u7528\u4e8e\u9700\u8981\u6709\u5927\u89c4\u6a21\u53d8\u66f4/\u72b6\u6001\u91cd\u7f6e\u7684\u573a\u666f\uff0c\u6bd4\u5982 \u7528\u6237\u767b\u9646/\u4e3b\u9898\u5207\u6362\uff0c\u4e0d\u9002\u5408\u9891\u7e41\u7684\u5237\u65b0\u3002</p>"},{"location":"Tutorial/JS%26TS/JS/","title":"JavaScript","text":"<p>\u4e8b\u4ef6\u9a71\u52a8</p>"},{"location":"Tutorial/JS%26TS/JS/#_1","title":"\u6b63\u5219\u8868\u8fbe\u5f0f","text":"<p>\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u63cf\u8ff0\u5b57\u7b26\u6a21\u5f0f\u7684\u5bf9\u8c61\u3002\u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u4e8e\u5bf9\u5b57\u7b26\u4e32\u6a21\u5f0f\u5339\u914d\u53ca\u68c0\u7d22\u66ff\u4ee3\uff0c\u662f\u5bf9\u5b57\u7b26\u4e32\u6267\u884c\u5339\u914d\u7684\u5f3a\u5927\u5de5\u5177\u3002</p> <p>In JS,regular expressions are represented by RegExp objects.RegExp objects may be created with the <code>RegExp()</code> constructor, of course, but they are more often created using a special literal syntax.</p> <ul> <li> <p><code>let pattern = new RegExp(\"s$\")</code></p> <p>-&gt; It represents all the strings that ends with the letter <code>s</code> - <code>$</code>, a special meta-character that match the end  of  a substring.</p> </li> </ul> <p>The Syntax is <code>/pattern/modifiers</code> - Example :    - <code>/w3schools/i</code> \u8868\u793a\u7684\u662f<code>w3schools</code> \u8fd9\u4e2a\u9700\u8981\u88ab\u67e5\u627e\u7684\u5b57\u7b26\u4e32\uff0c<code>i</code>\u8868\u793a\u7684\u662f\u5ffd\u7565\u5927\u5c0f\u5199     <code>/w3schools/</code> represents that matches any string that contains the substring \"w3school\"/</p> <ul> <li><code>search()</code> <p>\u8fd9\u4e2a\u65b9\u6cd5\u7684\u4f5c\u7528\u662f\u5229\u7528\u4e00\u4e2a\u8868\u8fbe\u5f0f\u6765\u67e5\u627e\u548c\u8fd4\u56de\u627e\u5230\u7684\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e</p> </li> </ul> <pre><code>let text = \"Visit W3Schools!\";\nlet n = text.search(text);\nconsole.log(n) // 6\n</code></pre> <ul> <li><code>replace()</code> <p>This method replaces a specified value with another value in string</p> </li> </ul> <pre><code>let text = \"Visit Microsoft!\";\nlet reuslt = text.replace(\"Microsoft\",\"W3Schools\");\n</code></pre> <p>\u4e0b\u9762\uff0c\u6211\u4eec\u7ed3\u5408\u4e00\u4e0bRegExp\u6765\u8fdb\u884c\u67e5\u627e <pre><code>let text = \"Visit Microsoft!\";\n// \u5c06\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5305\u542b \u5ffd\u7565\u5927\u5c0f\u5199\u7684 `microsoft` \u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210`W3Schools`\nlet result = text.replace(/microsoft/i,\"W3Schools\");\n</code></pre></p>"},{"location":"Tutorial/JS%26TS/JS/#regular-expression-modifiers","title":"Regular Expression Modifiers","text":"<ul> <li><code>i</code> Perform case-intensitive matching \u5ffd\u7565\u5927\u5c0f\u5199</li> <li> <p><code>g</code> Perform a global match (find all) \u5bfb\u627e\u6240\u6709 \u8fd9\u4e2a\u600e\u4e48\u7406\u89e3\u5462\uff1f\u5c31\u662f\u5c06\u5f85\u67e5\u627e\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u7b26\u5408\u6807\u51c6\u7684\u5b57\u7b26\u4e32\u90fd\u67e5\u627e\u51fa\u6765</p> </li> <li> <p><code>m</code> Perform multiline matching \u7528\u4e8e\u591a\u884c\u5b57\u7b26\u4e32\u4e2d\u7684\u67e5\u627e\uff0c \u5e76\u4e14<code>^</code> \u548c <code>$</code> \u5e94\u8be5\u5339\u914d\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u548c\u7ed3\u675f <pre><code>const str = \"hello\\nworld\";\nconst regex = /^world/m\nconsole.log(str.match(regex)); // \u8f93\u51fa [\"world\"]\n</code></pre></p> </li> <li> <p><code>d</code> perform stat and end matching</p> </li> </ul>"},{"location":"Tutorial/JS%26TS/JS/#bom","title":"BOM\u7f16\u7a0b","text":"<p>Browser Object Model \u6d4f\u89c8\u5668\u5bf9\u8c61\u6a21\u578b</p> <ul> <li>BOM \u662f\u7531\u4e00\u7cfb\u5217\u5bf9\u8c61\u7ec4\u6210\uff0c\u8bbf\u95ee\u3001\u63a7\u5236\u3001\u4fee\u6539\u6d4f\u89c8\u5668\u5c5e\u6027\u548c\u65b9\u6cd5\uff08\u901a\u8fc7window\u5bf9\u8c61\u53ca\u5c5e\u6027\u7684\u4e00\u7cfb\u5217\u65b9\u6cd5\u63a7\u5236\u6d4f\u89c8\u5668\u884c\u4e3a\u7684\u4e00\u79cd\u7f16\u7a0b\uff09</li> </ul> <p></p> <p> \u6211\u4eec\u6bd4\u8f83\u4e0a\u4e0b\u4e24\u4e2a\u56fe\u5206\u6790\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7f51\u9875\u5176\u5b9e\u662f\u7531\u5f88\u591a\u4e2a<code>window</code>\u5bf9\u8c61\u7ec4\u6210\u7684   - <code>history</code> \u5bf9\u8c61 \u8bbf\u95ee\u6d4f\u89c8\u5668\u7684\u6d4f\u89c8\u5386\u53f2   - <code>location</code> \u5bf9\u8c61 \u6d4f\u89c8\u5668\u7684\u5730\u5740\u680f   - <code>console</code> \u5bf9\u8c61 \u6d4f\u89c8\u5668\u5f00\u53d1\u8005\u5de5\u5177\u7684\u63a7\u5236\u53f0   - <code>screen</code> \u5bf9\u8c61 \u4ee3\u8868\u5c4f\u5e55   - <code>document</code> \u5bf9\u8c61 \u4ee3\u8868\u7684\u662f\u6d4f\u89c8\u5668\u6253\u5f00\u7684html\u6587\u6863   - <code>navigator</code> \u5bf9\u8c61 \u5f53\u524d\u6d4f\u89c8\u5668\u8f6f\u4ef6\u672c\u8eab   - <code>sessionStorage</code> \u5bf9\u8c61 \u4f1a\u8bdd\u7ea7\u5b58\u50a8   - <code>localStorage</code> \u5bf9\u8c61 \u6301\u4e45\u7ea7\u5b58\u50a8 <code>window</code> \u5bf9\u8c61 API <code>window</code> \u5bf9\u8c61\u5c5e\u6027 API  \u901a\u8fc7<code>window</code>\u5bf9\u8c61\u53ca\u5176\u5c5e\u6027\u7684API\uff0c\u63a7\u5236\u6d4f\u89c8\u5668\u7684\u5c5e\u6027\u548c\u884c\u4e3a</p> <p>\u6211\u4eec\u5176\u5b9e\u5c31\u662f\u5bf9\u4e0d\u540c\u7684\u5bf9\u8c61\u8fdb\u884c\u7f16\u8f91\u5de5\u4f5c \u90a3\u4e48BOM\u7f16\u7a0b\u5176\u5b9e\u5c31\u662f\u901a\u8fc7<code>window</code>\u5bf9\u8c61\u53ca\u5c5e\u6027\u6765\u63a7\u5236\u6d4f\u89c8\u5668\u884c\u4e3a\u7684\u4e00\u79cd\u7f16\u7a0b\u3002</p>"},{"location":"Tutorial/JS%26TS/JS/#bom_1","title":"BOM\u5e38\u89c1\u7f16\u7a0b","text":""},{"location":"Tutorial/JS%26TS/JS/#_2","title":"\u4e09\u79cd\u5f39\u7a97\u65b9\u5f0f","text":"<ul> <li><code>alert</code></li> <li><code>prompt</code></li> <li><code>confirm</code> <p><code>window</code> \u5bf9\u8c61\u65e0\u9700\u81ea\u5df1\u521b\u5efa\uff0c\u662f\u81ea\u5e26\u7684</p> </li> </ul> <pre><code>function fun1(){\n    window.alert(\"hello\");\n\n    // res \u662f\u8f93\u5165\u7684\u5185\u5bb9\n    var res = window.prompt(\"hello,\u8bf7\u8f93\u5165\u59d3\u540d\");\n    console.log(res)\n\n    var res1 = window.confirm(\"\u786e\u5b9a\u8981\u5220\u9664\u5417?\");\n    console.log(res1)\n\n}\n</code></pre>"},{"location":"Tutorial/JS%26TS/JS/#_3","title":"\u5b9a\u65f6\u4efb\u52a1","text":"<pre><code>function func4(){\n    window.setTimeout(function(){\n        console.log(\"hello\")\n    },2000);\n}\n</code></pre>"},{"location":"Tutorial/JS%26TS/JS/#history","title":"history \u5c5e\u6027 \u8bbf\u95ee\u5386\u53f2","text":"<ul> <li>\u4e0a\u4e00\u9875</li> <li>\u4e0b\u4e00\u9875</li> </ul> <pre><code>function funA(){\n    // \u5411\u524d\u7ffb\u9875\n    history.back()\n}\n\nfunction funcB(){\n    // \u5411\u524d\u7ffb\u9875\n    history.forward()\n}\n</code></pre>"},{"location":"Tutorial/JS%26TS/JS/#location","title":"location","text":"<pre><code>function func(){\n    // \u4fee\u6539\u5730\u5740\u680f\u4e2d\u7684URL -&gt; \u8d85\u94fe\u63a5\n    // The fields but not method;\n    window.location.href = \"http://www.atguigu.com\"\n}\n</code></pre>"},{"location":"Tutorial/JS%26TS/JS/#session-storage","title":"session Storage \u4f1a\u8bdd\u7ea7\u6570\u636e","text":"<pre><code>function funcE(){\n    window.sessionStorage.setItem(\"keyA\",\"valueA\")\n    // \u952e\u540d\n    console.log(sessionStorage.getItem(\"keyA\"))\n}\n</code></pre> <p>\u6d4f\u89c8\u5668\u91cd\u542f\u7684\u65f6\u5019\uff0c<code>session Storage</code>\u4e2d\u7684\u6570\u636e\u5c31\u4f1a\u88ab\u6e05\u7a7a\uff0c\u4f46\u662f<code>local Storage</code>\u4e2d\u7684\u6570\u636e\u4ecd\u7136\u4f1a\u5b58\u5728</p>"},{"location":"Tutorial/JS%26TS/JS/#local-storage","title":"local Storage \u6301\u4e45\u7ea7\u5b58\u50a8\u6570\u636e","text":"<pre><code>function funcF(){\n    window.localStorage.setItem(\"keyA\",\"valueA\")\n}\n</code></pre>"},{"location":"Tutorial/JS%26TS/JS/#dom","title":"DOM \u7f16\u7a0b","text":"<p>DOM -&gt; Documentation Object Model </p> <p> \u901a\u8fc7<code>documentation</code>\u7684API\u5b9e\u73b0\u9875\u9762\u5143\u7d20\u7684\u66f4\u6539\u3002 \u9996\u5148\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u6709<code>DOM</code>\u5355\u72ec\u7684\u5206\u5f00\u5462\uff1f\u56e0\u4e3a<code>DOM</code>\u4e2d\u6240\u5305\u542b\u7684API\u8fc7\u4e8e\u4e30\u5bcc\uff0c\u5c31\u5355\u72ec\u7684\u5355\u5f00\u4e86\u4e00\u4e2a\u3002\u8fd8\u6709\u5c31\u662f\u53ef\u80fd\u6709\u4eba\u4f1a\u89c9\u5f97\u6211\u53ef\u4ee5\u5728<code>html</code>\u4e0a\u7684\u6e90\u4ee3\u7801\u8fdb\u884c\u66f4\u6539\u554a\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u662f\u5f53\u9879\u76ee\u6574\u4e2a\u53d1\u5e03\u4e86\u4e4b\u540e\uff0c\u6211\u4eec\u57fa\u672c\u4e0a\u4e0d\u4f1a\u5927\u6982\u524d\u7aef\u7684\u6e90\u4ee3\u7801\uff0c\u800c\u4e14\u5bf9\u4e8e\u4e0d\u540c\u7684\u7528\u6237\uff0c\u6240\u9762\u5bf9\u7684\u90fd\u662f\u4e0d\u540c\u7684\u3002\u90a3\u4e48\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u5c31\u9700\u8981<code>DOM</code>\u7f16\u7a0b\u4e86\u3002\u65e0\u6cd5\u6ee1\u8db3\u5b9e\u65f6\u4fee\u6539\u6e90\u4ee3\u7801\u3002</p> <p> \u6211\u4eec\u7684\u6e90\u4ee3\u7801<code>index.html</code>\u662f\u90e8\u7f72\u5728\u670d\u52a1\u5668\u4e0a\u7684\uff0c\u4f46\u662f\u4f60\u6d4f\u89c8\u5668\u6240\u505a\u7684\u53ea\u662f\u5229\u7528\u670d\u52a1\u5668\u4e0a\u7684\u6e90\u4ee3\u7801\u6765\u6e32\u67d3\u751f\u4ea7\u4e86\u4e00\u4e2a<code>document</code>\u7684\u5bf9\u8c61\uff0c\u4f60\u6240\u5448\u73b0\u7684\u90fd\u662f<code>document</code>\u8fd9\u4e2a\u5bf9\u8c61\u6240\u5c55\u793a\u51fa\u6765\u7684\u5185\u5bb9\uff0c\u4f60\u53ef\u4ee5\u5982\u4e0b\u56fe\u4e00\u6837\uff0c\u5728\u5de5\u5177\u680f\u5185\u90e8\u8fdb\u884c\u5bf9<code>document</code>\u5bf9\u8c61\u7684\u4fee\u6539\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5230\u4f60\u670d\u52a1\u5668\u4e0a\u7684\u6e90\u4ee3\u7801. \u4f46\u662f\u4f60\u5237\u65b0\u6d4f\u89c8\u5668\uff0c\u5176\u5b9e\u5c31\u662f\u91cd\u65b0\u4ece\u670d\u52a1\u5668\u83b7\u53d6<code>document</code>\u7684\u5185\u5bb9\uff0c\u91cd\u65b0\u6e32\u67d3\u3002 </p> <p>document \u4e2d\u7684\u5bf9\u8c61\u662f\u5c42\u5c42\u5305\u542b\u5173\u7cfb\uff0c\u6811\u5f62\u7ed3\u6784</p> <p>DOM \u6811\u7684\u8282\u70b9\u7c7b\u578b - \u5143\u7d20\u8282\u70b9 element \u6807\u7b7e - \u5c5e\u6027\u8282\u70b9 attribute \u5c5e\u6027 - \u6587\u672c\u6807\u7b7e text \u4e24\u4e2a\u6807\u7b7e\u4e2d\u95f4\u5305\u542b\u7684\u6587\u672c;</p>"},{"location":"Tutorial/JS%26TS/JS/#dom_1","title":"DOM \u83b7\u53d6\u5143\u7d20\u7684\u51e0\u79cd\u65b9\u5f0f","text":"<ol> <li>\u83b7\u5f97<code>document</code> dom \u6811</li> <li>\u4ece<code>document</code>\u4e2d\u83b7\u53d6\u8981\u64cd\u4f5c\u7684\u5143\u7d20</li> <li>\u76f4\u63a5\u83b7\u53d6</li> <li>\u95f4\u63a5\u83b7\u53d6</li> <li>\u5bf9\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c</li> <li>\u64cd\u4f5c\u5143\u7d20\u7684\u5c5e\u6027</li> <li>\u64cd\u4f5c\u5143\u7d20\u7684\u6587\u672c</li> <li>\u64cd\u4f5c\u5143\u7d20\u7684\u6837\u5f0f</li> <li> <p>\u589e\u5220\u5143\u7d20</p> </li> <li> <p>\u76f4\u63a5\u83b7\u53d6</p> </li> <li><code>documentById</code></li> <li><code>documentByTagName</code></li> <li><code>documentByClass</code></li> <li>\u95f4\u63a5\u83b7\u53d6</li> <li>\u6839\u636e\u7236\u5143\u7d20     <pre><code>function fun5(){\n    var div01 = document.getElementById(\"div01\");\n    var cs = div01.children //\u901a\u8fc7\u7236\u5143\u7d20\uff0c\u83b7\u53d6\u5168\u90e8\u5b50\u5143\u7d20\n    var cs1 = div01.firstElementChild;\n    var cs2 = div01.lastElementChild;\n    for(var i=0;i&lt;cs.length;i++)\n        console.log(cs[i])\n}\n</code></pre></li> <li>\u6839\u636e\u5b50\u5143\u7d20\uff0c\u83b7\u53d6\u7236\u4eb2\u5143\u7d20</li> <li>\u6839\u636e\u5b50\u5143\u7d20\uff0c\u83b7\u53d6\u5144\u5f1f\u5143\u7d20     <pre><code>function func6(){\n    var child = document.getElementById(\"1\")\n    var sibling = child.previousElementSibling\n    var nextSibling = child.nextElementSibling\n}\n</code></pre></li> </ol>"},{"location":"Tutorial/JS%26TS/JS/#dom_2","title":"DOM \u64cd\u7eb5\u5143\u7d20","text":"<ul> <li> <p>\u64cd\u7eb5\u5143\u7d20\u7684\u5c5e\u6027   <pre><code>function changeAttribute(){\n  var in1 = document.getElementById(\"in1\")\n  // \u4fee\u6539\u5c5e\u6027\u503c\n  in1.style.color = \"green\"\n}\n</code></pre></p> </li> <li> <p>\u64cd\u7eb5\u5143\u7d20\u7684\u6837\u5f0f   <pre><code>function changeAttribute(){\n  var in1 = document.getElementById(\"in1\")\n  // \u4fee\u6539\u6837\u5f0f\u503c\n   in1.style.color = \"green\"\n  // \u539f\u59cb\u6837\u5f0f\u4e2d\u7684 - \u53d8\u6210\u9a7c\u5cf0\u5f0f\u5b50 \n   in1.style.borderRadius = 13px \n}\n</code></pre></p> </li> <li> <p>\u64cd\u7eb5\u5143\u7d20\u7684\u6587\u672c</p> </li> <li><code>document.innerHTML</code></li> <li><code>document.innerText</code></li> </ul>"},{"location":"Tutorial/JS%26TS/JS/#dom_3","title":"DOM \u4e2d\u7684\u589e\u5220\u5143\u7d20","text":""},{"location":"Tutorial/JS%26TS/TS/","title":"TypeScript","text":""},{"location":"Tutorial/JS%26TS/TS/#interface","title":"Interface \u63a5\u53e3","text":"<p>TypeScript \u7684\u63a5\u53e3\u662f\u4e00\u7cfb\u5217\u62bd\u8c61\u65b9\u6cd5\u7684\u58f0\u660e\uff0c\u662f\u4e00\u4e9b\u65b9\u6cd5\u7279\u5f81\u7684\u96c6\u5408\u3002</p> <p>\u4e0b\u9762\u662f\u63a5\u53e3\u7684\u5b9a\u4e49 <pre><code>interface interface_name{\n    // \u65b9\u6cd5\u540d + \u7c7b\u578b\n}\n</code></pre></p> <pre><code>interface IPerson { \n    firstName:string, \n    lastName:string, \n    sayHi: ()=&gt;string \n} \n\nvar customer:IPerson = { \n    firstName:\"Tom\",\n    lastName:\"Hanks\", \n    sayHi: ():string =&gt;{return \"Hi there\"} \n} \n\nconsole.log(\"Customer \u5bf9\u8c61 \") \nconsole.log(customer.firstName) \nconsole.log(customer.lastName) \nconsole.log(customer.sayHi()) \n\n\n// \u63a5\u53e3\u4e0e\u6570\u7ec4\ninterface namelist{\n    [index:number] : string\n}\n\nvar list2:namelist = [\"Google\",\"Runoob\",\"Taobao\"];\n</code></pre> <p>\u63a5\u53e3\u4e5f\u53ef\u4ee5\u7ee7\u627f <pre><code>interface Person{\n    age:number\n}\n\ninterface Musician extends Person{\n    instrumemt:string\n}\n</code></pre></p>"},{"location":"Tutorial/Java/Java12/","title":"Chapter12 Concurrency","text":"<p>Concurrency \u672c\u7ae0\u4e3b\u8981\u8bb2\u7684\u662f\u7ebf\u7a0b\uff0c\u9ad8\u5e76\u53d1\u7684\u5185\u5bb9\u6bd4\u8f83\u91cd\u8981</p> <p>This Chapters will talk about the topic of Multitasks </p> <p>\u591a\u8fdb\u7a0b\u548c\u591a\u7ebf\u7a0b\u7684\u533a\u522b\u662f\u4ec0\u4e48\u5462\uff1f</p> <ul> <li>\u6bcf\u4e2a\u8fdb\u7a0b\u5177\u6709\u5b8c\u6574\u7684\u4e00\u5957\u81ea\u5df1\u7684\u53d8\u91cf\u96c6\u5408</li> <li>\u6bcf\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u662f\u5171\u4eab\u6570\u636e\u7684\uff0c\u4ece\u800c\u65b9\u4fbf\u4ed6\u4eec\u8fdb\u884c\u6709\u6548\u7387\u5e76\u4e14\u66f4\u5bb9\u6613\u7684\u8fdb\u884c\u4ea4\u4e92\u6bd4\u8d77\u591a\u8fdb\u7a0b\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002</li> <li>\u591a\u7ebf\u7a0b\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u4e00\u4e2a\u6d4f\u89c8\u5668\u9700\u8981\u5177\u6709\u540c\u6b65\u4e0b\u8f7d\u591a\u56fe\u7247\u7684\u80fd\u529b\uff0c\u4e00\u4e2a\u7f51\u7edc\u670d\u52a1\u5668\u5177\u6709\u670d\u52a1\u5e76\u53d1\u7684\u9700\u6c42\u7684\u80fd\u529b\u3002</li> </ul>"},{"location":"Tutorial/Java/Java12/#121-what-are-threads","title":"12.1 What are threads?","text":"<p>Here is the following code block to take a short look of <code>thread</code>;</p> <pre><code>Runnable r = ()=&gt;{\n    try{\n        for (int i=0;i&lt;STEPS;i++){\n            double amount = MAX_AMOUNT * Math.random();\n            bank.transfer(0,1,amount);\n            Thread.sleep((int)(DELAY*Math.random()));\n        }\n    }catch(InterruptedException e){\n\n    }\n}\n\nvar t = new Thread(r);\nt.start();\n</code></pre> <p>\u9996\u5148\uff0c\u6211\u4eec\u6765\u770b <code>Runnable r = ()=&gt;{// task code}</code> \u8fd9\u4e2a\u662f\u4e00\u4e2a<code>Lambda</code> \u51fd\u6570\uff0c\u5176\u4e2d <code>Runnable</code> \u662f\u4e00\u4e2a\u51fd\u6570\u63a5\u53e3\uff0c\u53ef\u4ee5\u7528\u8fd9\u4e2a\u6765\u521b\u9020\u4e00\u4e2a\u7ebf\u7a0b\u7684\u5b9e\u4f8b\u3002</p> <pre><code>// you can also define the thread by its subclass of the thread class.\nclass MyThread extends Thread{\n    public void run(){\n        // task code;\n    }\n}\n</code></pre>"},{"location":"Tutorial/Java/Java12/#122-thread-states","title":"12.2 Thread States","text":"<p>Threads can be 6 states:</p> <ul> <li>New </li> <li>Runnable</li> <li>Blocked </li> <li>Waiting</li> <li>Time Waiting</li> <li>Terminated</li> </ul> <p></p> <p><code>New Threads</code>:</p> <p>When You create a thread with <code>new</code> operator before <code>start</code>. It indicates that the thread is not running yet.</p> <p><code>Runnable Threads</code>:</p> <p>After I use the <code>start</code> method, the thread is in the <code>runnable</code> state.</p> <p>\u6ce8\u610f\uff0c\u4f46\u662f\u5904\u4e8e <code>runnable</code> \u9636\u6bb5\u7684\u7ebf\u7a0b\uff0c\u4e0d\u4e00\u5b9a\u65f6\u523b\u5728<code>running</code>.\u8fd9\u53d6\u51b3\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7ed9\u4ed6\u5206\u914d\u7684\u8d44\u6e90\u8c03\u5ea6\uff0c\u662f\u5426\u5f53\u524d\u662f\u8fd9\u4e2a\u7ebf\u7a0b\u5728\u8dd1\u3002\u4e5f\u53ef\u80fd\u5904\u4e8e <code>waiting</code> \u548c <code>blocked</code> \u9636\u6bb5\u3002</p> <p>The following 2 states are <code>blocked</code> and <code>waiting</code>: They are temporarily inactive. They does not execute any code and consumes minimal resources. \u4e24\u8005\u6709\u4e2a\u533a\u522b\u5c31\u5728\u4e8e\u662f <code>\u88ab\u52a8</code> \u8fd8\u662f <code>\u4e3b\u52a8</code></p> <p><code>blocked</code>: \u963b\u585e\u6001\uff0c\u5176\u5b9e\u5c31\u662f\u5728\u8be5\u7ebf\u7a0b\u60f3\u83b7\u53d6\u9501\u7684\u65f6\u5019\uff0c\u4f46\u662f\u53d1\u73b0\u9501\u88ab\u5176\u4ed6\u7ebf\u7a0b\u6240\u5360\u7528\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u5e94\u8be5\u8fdb\u5165\u963b\u585e\u6001\u4e86\uff0c\u7b49\u5176\u4ed6\u7ebf\u7a0b\u7684\u9501\u5b8c\u5168\u91ca\u653e\u7684\u65f6\u5019\uff0c\u624d\u80fd\u83b7\u53d6\u9501\uff0c\u4ece\u800c\u79bb\u5f00<code>blocked</code>.</p> <p><code>waiting</code>: When the thread waits for another thread to notify the scheduler of a condition. \u4ee5\u4e00\u8a00\u853d\u4e4b\uff0c\u5c31\u662f\u8bf4\u5f53\u67d0\u4e2a\u7ebf\u7a0b\u5728\u4e3b\u52a8\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6\u6ee1\u8db3\u7684\u65f6\u5019\uff0c\u76f4\u5230\u88ab\u5176\u4ed6\u7684\u7ebf\u7a0b\u660e\u786e\u7684\u5524\u9192</p> <ul> <li>\u7ebf\u7a0b\u901a\u8fc7 <code>Object.wait()</code> \u6216\u8005 <code>Thread.join()</code> \u8fdb\u5165 <code>waiting</code> \u72b6\u6001</li> <li>\u7ebf\u7a0b\u5fc5\u987b\u7b49\u5f85\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u901a\u8fc7 <code>notify()</code> \u6216 <code>notifyAll()</code> \u5524\u9192</li> <li><code>waiting</code> \u72b6\u6001\u4e0d\u4f1a\u5360\u7528CPU\u65f6\u95f4</li> </ul> <p><code>time waiting</code> There are several methods that have a timeout parameter.Calling them causes the thread to enter the timed waiting state.</p> <p><code>terminated</code></p> <ul> <li>It dies a natural death because the <code>run</code> method exits normally.</li> <li>It dies abruptly because an uncaught exception terminates the <code>run</code> method.</li> </ul>"},{"location":"Tutorial/Java/Java12/#some-methods","title":"Some methods","text":""},{"location":"Tutorial/Java/Java12/#123-thread-properties","title":"12.3 Thread Properties","text":""},{"location":"Tutorial/Java/Java12/#1231-interrupting-threads","title":"12.3.1 Interrupting threads","text":"<p>The following Java release version stops the <code>stop()</code> and <code>suspend()</code> method.</p> <p>But with the replacement of using <code>interrupt()</code> method. Or the <code>return</code> statements in the <code>run</code> method body.</p> <ul> <li>The <code>blocked</code> status thread can not be checked by <code>Thread().currentThread().isInterrupted()</code> . Take the place of it , we will use <code>InterruptedException()</code> to terminated the <code>blocked</code> thread.</li> </ul> <pre><code>// Here is the example:\nRunnable r = () -&gt; {\n try\n {\n    . . .\n    while (!Thread.currentThread().isInterrupted() &amp;&amp; more work to do)\n    {\n        // do more work\n    }\n }catch(InterruptedException e){\n // thread was interrupted during sleep or wait\n }finally\n {\n    // cleanup, if required\n }\n // exiting the run method terminates the thread\n};\n</code></pre> <p>If you call the <code>sleep()</code> method.Do not use the <code>isInterrupted()</code> to check.</p>"},{"location":"Tutorial/Java/Java12/#1232-daemon-threads","title":"12.3.2 Daemon Threads","text":"<p>A daemon thread is simply a thread that has no other role in life than to serve others.<code>timer</code> is the thread that sends regular <code>timer ticks</code> to other threads or threads that clean up stale cache entries.</p>"},{"location":"Tutorial/Java/Java12/#1234-handlers-for-uncaught-exceptions","title":"12.3.4 Handlers for Uncaught Exceptions","text":"<p>there is no <code>catch</code> clause to which the exception can be propagated. Instead, just before the thread dies, the exception is passed to a handler for uncaught exceptions.</p> <p>You can install a handler into any thread with the <code>setUncaughtExceptionHandler()</code> method.</p>"},{"location":"Tutorial/Java/Java12/#1235-thread-priorities","title":"12.3.5 Thread Priorities","text":"<p><code>setPriority()</code> In the Oracle JVM for Linux, thread priorities are the same!</p>"},{"location":"Tutorial/Java/Java12/#124-synchronization","title":"12.4 Synchronization \u540c\u6b65","text":""},{"location":"Tutorial/Java/Java12/#the-race-condition","title":"The race condition \u7ade\u6001\u51b2\u7a81","text":"<p>from the <code>wiki</code> reference:</p> <p>A race condition can arise in software when a computer program has multiple code paths that are executing at the same time. If the multiple code paths take a different amount of time than expected, they can finish in a different order than expected, which can cause software bugs due to unanticipated behavior. A race can also occur between two programs, resulting in security issues.</p> <p>Critical race conditions cause invalid execution and software bugs. Critical race conditions often happen when the processes or threads depend on some shared state. Operations upon shared states are done in critical sections that must be mutually exclusive. Failure to obey this rule can corrupt the shared state.</p>"},{"location":"Tutorial/Java/Java12/#lock-objects","title":"Lock Objects","text":"<pre><code>myLock.lock();\ntry{\n    // critical section;\n}finally{\n    myLock.unlock();\n}\n</code></pre> <p>This construct guarantees that there only one thread at a time can enter the critical section. No other thread has the chance to get past the <code>lock</code> statement.</p> <p></p>"},{"location":"Tutorial/Java/Java12/#1244-condition-objects","title":"12.4.4 Condition Objects","text":"<p>\u6211\u4eec\u7ecf\u5e38\u4f1a\u53d1\u73b0\u6709\u4e9b\u65f6\u5019\uff0c\u4e00\u4e9b\u7ebf\u7a0b\u5728\u8fdb\u5165<code>critical section</code>\u7684\u65f6\u5019\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u7684\u65f6\u5019\uff0c\u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u5f15\u5165\u4e00\u4e2a <code>condition object</code> \u6765\u7ba1\u7406\u90a3\u4e9b\u83b7\u5f97\u9501\uff0c\u4f46\u662f\u4e0d\u80fd\u6b63\u786e\u7684\u5b8c\u6210\u5de5\u4f5c\u7684\u7ebf\u7a0b\u3002</p> <p>\u4e0b\u9762\u4e3e\u4e86\u4e00\u4e2a\u4f8b\u5b50\uff0c\u90a3\u5c31\u662f\u5f53\u94f6\u884c\u53ea\u6709\u76c8\u5229\u7684\u65f6\u5019\uff0c\u624d\u80fd\u8ba9\u5176\u4ed6\u7528\u6237\u53d6\u94b1\u3002\u5982\u679c\u4e0d\u76c8\u5229\uff0c\u5c31\u4e00\u76f4\u5904\u4e8e\u50f5\u6301\u72b6\u6001\uff0c\u9700\u8981\u7b49\u5f85\u522b\u7684\u7ebf\u7a0b\u6765\u8ba9\u5b83\u589e\u52a0\u6536\u5165\uff0c\u4f46\u522b\u7684\u7ebf\u7a0b\u53c8\u65e0\u6cd5\u8fdb\u884c\uff0c\u5c31\u9677\u5165\u4e86\u50f5\u5c40\u3002\u6b64\u65f6\u5c31\u5f15\u5165\u4e86<code>condition objects</code>.</p> <p><pre><code>public void transfer(int from, int to, int amount)\n{\n    bankLock.lock();\n    try\n    {\n        while (accounts[from] &lt; amount)\n        {\n        // wait\n        . . .\n        }\n        // transfer funds\n        . . .\n    }\n    finally\n    {\n        bankLock.unlock();\n    }\n}\n\nclass Bank\n{\n private Condition sufficientFunds;\n . . .\n public Bank()\n {\n . . .\n sufficientFunds = bankLock.newCondition();\n }\n}\n</code></pre> \u5f53 <code>transfer</code> \u53d1\u73b0<code>sufficient funds</code> \u4e0d\u53ef\u5f97\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5c31\u4f1a <code>sufficient.await()</code>.\u5f53\u524d\u7ebf\u7a0b\u5c31\u4f1a\u88ab\u8feb\u653e\u5f03\u8fd9\u4e2a\u9501\uff0c\u8ba9\u5176\u4ed6\u7684\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u5165<code>critical section</code>.</p> <p>There is an essential difference between a thread that is waiting to acquire a lock and a thread that has called <code>await</code>. Once a thread calls the <code>await</code> method, it enters a <code>wait set</code> for that condition. The thread is not made <code>runnable</code> when the lock is available. Instead, it stays deactivated until another thread has called the <code>signalAll</code> method on the same condition.</p> <p><code>sufficientFunds.signAll()</code> \u7684\u4f5c\u7528\u662f\u5524\u9192\u6240\u6709\u5728<code>waiting list</code> \u4e2d\u7684\u7ebf\u7a0b</p> <pre><code>// One example\npublic void transfer(int from, int to, int amount)\n{\n    bankLock.lock();\n    try\n    {\n        while (accounts[from] &lt; amount)\n            sufficientFunds.await();\n        // transfer funds\n        // . . .\n        sufficientFunds.signalAll();\n    }\n    finally\n    {\n        bankLock.unlock();\n    }\n}\n</code></pre> <p>\u62f1\u624b\u8ba9\u51fa\uff0c\u4ee5\u514d\u9677\u5165\u50f5\u6301\u72b6\u6001\u3002</p>"},{"location":"Tutorial/Java/Java12/#synchronized","title":"<code>synchronized</code> \u5173\u952e\u5b57","text":"<p><code>synchronized</code> \u5173\u952e\u5b57\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u63a7\u5236\u7ebf\u7a0b\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u8bbf\u95ee\uff0c\u786e\u4fdd\u5728\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u8bbf\u95ee\u88ab\u540c\u6b65\u7684\u65b9\u6cd5\u6216\u4ee3\u7801\u5757\uff0c\u4ece\u800c\u907f\u514d\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898</p> <p>\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 <code>synchronized</code> \u5173\u952e\u5b57  <pre><code>// code block 1 \npublic synchronized void method(){\n    // method body;\n}\n\n// code block 2\npublic void method(){\n    this.intrinsicLock.lock();\n    try{\n       // method body;\n    }\n}\n</code></pre> \u4e0a\u9762\u4e24\u6bb5 code block \u662f\u7b49\u4ef7\u7684\uff0c\u6211\u4eec\u7528 <code>synchronized</code> \u5173\u952e\u5b57\u6765\u7b49\u4ef7\u7684\u5b8c\u6210\u8fd9\u4e00\u64cd\u4f5c\uff0c\u8ba9\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002</p> <p>\u5728\u4e0a\u9762\u90a3\u4e48\u591a\u94fa\u57ab\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u5f88\u81ea\u7136\u7684\u7406\u89e3\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u4e86\u3002 <pre><code>class Bank\n{\n    private double[] accounts;\n    public synchronized void transfer(int from, int to, int amount) \n    throws InterruptedException\n    {\n        while (accounts[from] &lt; amount)\n            wait(); // wait on intrinsic object lock's single condition\n        accounts[from] -= amount;\n        accounts[to] += amount;\n        notifyAll(); // notify all threads waiting on the condition\n    }\n    public synchronized double getTotalBalance() { . . . }\n}\n</code></pre></p> <p><code>wait()</code> \u548c <code>notifyAll()</code> \u5c31\u5206\u522b\u662f\u5c06\u7ebf\u7a0b\u52a0\u5165 <code>waiting list</code> \u548c \u5524\u9192\u6240\u6709\u5728 <code>waiting on the condition threads</code>.</p>"},{"location":"Tutorial/Java/Java12/#1246-synchronized-blocks","title":"12.4.6 Synchronized Blocks","text":"<p>Another way to enter acquiring the lock;</p> <p>\u9501\u5bf9\u8c61\u7684\u8bbe\u7f6e\uff0c\u6211\u4eec\u5728\u540c\u6b65\u5757\u7684\u65f6\u5019\uff0c\u5b9a\u4e49\u4e86\u9501\u5bf9\u8c61<code>private Lock lock = new Object()</code>,\u540e\u7eed\u6211\u4eec\u4e5f\u5229\u7528\u4e86<code>synchronized (lock)</code> \u8fdb\u884c\u5bf9\u9501\u5bf9\u8c61\u7684\u540c\u6b65\u8bbe\u7f6e\u3002</p> <p>\u4e3b\u8981\u662f\u8fd9\u6837\u53ef\u4ee5\u66f4\u52a0\u7684\u7075\u6d3b\u8fdb\u884c\u9501\u7684\u5bf9\u8c61\u7684\u8bbe\u7f6e</p> <ul> <li><code>this</code></li> <li><code>class</code></li> <li><code>lock</code> \u81ea\u5b9a\u4e49\u7684\u9501\u5bf9\u8c61</li> </ul>"},{"location":"Tutorial/Java/Java12/#1247-the-monitor-concept","title":"12.4.7 The monitor concept","text":"<p>The powerful tools to make multithreading safe without forcing programmers to think about explicit locks.</p> <ul> <li><code>monitor</code> \u662f JVM \u5185\u7f6e\u7684\u9501\uff0c\u6bcf\u4e2aJava\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a\u9690\u5f0f <code>monitor</code></li> <li>\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6301\u6709\u5bf9\u8c61 <code>monitor</code> \u5176\u4ed6\u7ebf\u7a0b\u5c31\u4f1a\u8fdb\u884c <code>block</code>\uff0c\u81ea\u52a8\u52a0\u5165 <code>waiting list</code></li> <li>\u7ebf\u7a0b\u9000\u51fa <code>synchronized</code> \u5757\u7684\u65f6\u5019\uff0c\u91ca\u653e<code>monitor</code></li> </ul>"},{"location":"Tutorial/Java/Java12/#1248-volatile-modifier","title":"12.4.8 volatile modifier","text":"<ul> <li> <p>\u4fdd\u8bc1\u4e86\u7ebf\u7a0b\u4e4b\u95f4\u7684\u53ef\u89c1\u6027 (Visibility)</p> <p>\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u4fee\u6539\u4e86<code>volatile</code> \u53d8\u91cf\u7684\u503c\uff0c\u5176\u4ed6\u7ebf\u7a0b\u80fd\u7acb\u523b\u770b\u5230\u8fd9\u4e2a\u66f4\u65b0</p> </li> <li> <p>\u9632\u6b62\u6307\u4ee4\u7684\u91cd\u6392 (Reordering)</p> <p>\u5c31\u50cf\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7ebf\u7a0b\u4e4b\u95f4\u7684\u540c\u6b65\u7684\u65f6\u5019\u6240\u8bf4\uff0c\u6709\u65f6\u5019\u7f16\u8bd1\u5668(\u8fd9\u91cc\u5e94\u8be5\u662f CPU &amp;&amp; JVM) \u4f1a\u5bf9\u6307\u4ee4\u8fdb\u884c\u91cd\u62cd\uff0c\u5bfc\u81f4\u4f1a\u51fa\u73b0\u4e00\u4e9b\u4e0a\u9501\u7684\u9519\u8bef</p> </li> </ul>"},{"location":"Tutorial/Java/Java12/#1249-final-variables","title":"12.4.9 Final Variables","text":"<p>There is one situation that we no use <code>lock</code> or the <code>volatile</code> modifier, that it is safe to access a shared field when We use <code>final</code>.</p> <p><code>final var accounts = new HashMap&lt;String, Double&gt;()</code></p> <p>\u5982\u679c\u6ca1\u6709 <code>final</code> \u8fd9\u4e2a\u91cf\u8bcd\uff0c\u6211\u4eec\u65e0\u6cd5\u4fdd\u8bc1\u591a\u7ebf\u7a0b\u53ef\u4ee5\u5b89\u5168\u7684\u770b\u89c1 <code>accounts</code> \u7684\u66f4\u65b0\u3002</p>"},{"location":"Tutorial/Java/Java12/#12410-atomics","title":"12.4.10 Atomics","text":"<p>\u64cd\u4f5c\u7684\u539f\u5b50\u6027 \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6709\u4ecb\u7ecd\uff0c\u4e0d\u505a\u8fc7\u591a\u8d58\u8ff0</p>"},{"location":"Tutorial/Java/Java12/#12411-deadlocks","title":"12.4.11 Deadlocks","text":"<p>\u6b7b\u9501 \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6709\u4ecb\u7ecd\uff0c\u4e0d\u505a\u8fc7\u591a\u7684\u8d58\u8ff0</p>"},{"location":"Tutorial/Java/Java12/#125-thread-safe-collections","title":"12.5 Thread-safe collections","text":""},{"location":"Tutorial/Java/Java12/#1251-blocking-queues","title":"12.5.1 Blocking Queues","text":"<p><code>blocking queue</code> \u963b\u585e\u961f\u5217\u662fJava\u63d0\u4f9b\u7684\u4e00\u79cd\u7ebf\u7a0b\u5b89\u5168\u7684\u6570\u636e\u7ed3\u6784\u3002\u4e3b\u8981\u662f\u7528\u4e8e\u89e3\u51b3\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u7684\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\u3002</p> <ul> <li> <p><code>Block queue push</code>     \u5f53\u961f\u5217\u5df2\u7ecf\u6ee1\u7684\u65f6\u5019\uff0c\u751f\u4ea7\u8005\uff08\u8bd5\u56fe\u5f80\u961f\u5217\u4e2d\u6dfb\u52a0\u5143\u7d20\u7684\u5bf9\u8c61\uff09\u4f1a\u8fdb\u5165<code>block</code>\u72b6\u6001\uff0c\u7b49\u5230\u961f\u5217\u672a\u6ee1\u7684\u65f6\u5019\u518d\u8fdb\u884c\u586b\u5165\u3002</p> </li> <li> <p><code>Block queue pop</code>     \u5f53\u961f\u5217\u7a7a\u7684\u65f6\u5019\uff0c\u6d88\u8d39\u8005\uff08\u8bd5\u56fe\u5f80\u961f\u5217\u4e2d\u53d6\u51fa\u5143\u7d20\u7684\u5bf9\u8c61\uff09\u4f1a\u8fdb\u5165<code>block</code>\u72b6\u6001\uff0c\u7b49\u5230\u961f\u5217\u4e2d\u6709\u5143\u7d20\u7684\u65f6\u5019\u624d\u4f1a\u586b\u5165\u3002</p> </li> </ul>"},{"location":"Tutorial/Java/Java12/#advantages","title":"Advantages","text":"<ul> <li><code>Producers and Consumers</code><ol> <li>\u751f\u4ea7\u8005\u7ebf\u7a0b\u5c06\u6570\u636e\u653e\u5165\u961f\u5217\uff0c\u6d88\u8d39\u8005\u7ebf\u7a0b\u4ece\u961f\u5217\u4e2d\u53d6\u6570\u636e</li> <li><code>blocking queue</code> \u53ef\u4ee5\u81ea\u52a8\u7684\u5e73\u8861\u6570\u636e\u6d41\uff0c\u5728\u751f\u4ea7\u8005\u8fc7\u5feb\uff0c\u6d88\u8d39\u8005\u8fc7\u6162\u70b9\u65f6\u5019\u5f62\u6210\u4e00\u4e2a<code>balance</code>.</li> </ol> </li> </ul>"},{"location":"Tutorial/Java/Java12/#1252-efficient-maps-sets-and-queues","title":"12.5.2 Efficient Maps, Sets and Queues","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>java.util.concurrent</code> \u5305\u4e2d\u7684\u4e00\u4e9b\u6570\u636e\u7ed3\u6784 <code>ConcurrentHashMap</code>,<code>ConcurrentSkipListSet</code>,<code>ConcurrentLinkedQueue</code>.</p> <p>The concurrent hash map can efficiently support a large number of readers and a bounded number of writers.</p>"},{"location":"Tutorial/Java/Java12/#1253-atomic-update-of-map-entries","title":"12.5.3 Atomic update of map entries","text":"<p>\u5f15\u5165\u4e86 <code>map.compute(word,(k,v)-&gt;v == null ? 1 : v+1)</code> \u7684\u539f\u5b50\u64cd\u4f5c\uff0c\u907f\u514d\u4e86\u65e7\u7248\u672c\u7684 <code>replace</code> \u7684\u4f7f\u7528.</p>"},{"location":"Tutorial/Java/Java12/#126-threads-pool","title":"12.6 Threads Pool","text":"<p>\u7ebf\u7a0b\u6c60</p> <p>\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u5f88\u73b0\u5b9e\u7684\u95ee\u9898\uff0c\u5bf9\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u662f\u4e00\u4ef6\u5f88\u9ebb\u70e6\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u4f60\u9700\u8981\u8ddf\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92\u3002\u4f46\u662f\u6211\u4eec\u53c8\u4f1a\u7ecf\u5e38\u7684\u9047\u5230\u90a3\u79cd\u5177\u6709\u5f88\u5927\u6570\u91cf\u7684<code>short-lived</code> \u7ebf\u7a0b\uff0c\u8fd9\u79cd\u65f6\u5019\u6211\u4eec\u5c31\u9009\u62e9\u4e86\u4e00\u79cd\u53eb\u505a\u7ebf\u7a0b\u6c60\u7684\u65b9\u5f0f\u3002</p>"},{"location":"Tutorial/Java/Java12/#introduce","title":"Introduce","text":"<p>\u7ebf\u7a0b\u6c60\u4e2d\u5b58\u5728\u5f88\u591a\u9884\u7559\u7684\u7ebf\u7a0b\u7b49\u5f85\u8c03\u5ea6\u548c\u8fd0\u884c\uff0c\u5e76\u4e14\u63d0\u4f9b\u7ed9\u5b83\u4e00\u4e2a <code>Runnable</code> \u63a5\u53e3\uff0c\u53ea\u8981<code>run</code>\u65b9\u6cd5\u5b58\u5728\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ebf\u7a0b\u5c31\u4e0d\u4f1a\u6d88\u4ea1\uff0c\u53ea\u662f\u5728\u961f\u5217\u4e2d\u7b49\u5f85\u88ab\u8c03\u5ea6\u3002</p>"},{"location":"Tutorial/Java/Java4/","title":"Chapter4 Objects and classes","text":""},{"location":"Tutorial/Java/Java4/#41-introduce","title":"4.1 Introduce","text":""},{"location":"Tutorial/Java/Java4/#42-predefined-classes","title":"4.2 Predefined Classes","text":""},{"location":"Tutorial/Java/Java4/#421-objects-and-object-variables","title":"4.2.1 Objects and object variables","text":""},{"location":"Tutorial/Java/Java4/#constructor-function","title":"constructor function","text":"<p>constructor function is a special method whose purpose is to construct and initialize objects. \u6784\u5efa\u548c\u521d\u59cb\u5316\u5bf9\u8c61</p> <p>[Tips] All the objects constructed in the heap in Java,which means that you can only use <code>new</code> to create a object.</p> <p>[Tips]  What is the <code>toString</code> means? It is a special method in represent this object in String type.</p>"},{"location":"Tutorial/Java/Java4/#422-create-a-object","title":"4.2.2 Create a object","text":"<p><pre><code>    Date deadline; // deadline doesn't refer to a object now;\n    s = deadline.toString();\n</code></pre> The above will cause a compiler-time error; - Method1 : You should use the constructor function to let <code>to String</code> represents a object.</p> <ul> <li>Method2 : You can also let deadline refers to an existing object;</li> </ul> <p></p> <p>The above is the difference between C++ and Java in the object referrence.</p>"},{"location":"Tutorial/Java/Java4/#423-mutator-and-access-methods","title":"4.2.3 Mutator and Access Methods","text":"<p>\u4fee\u6539\u65b9\u6cd5\u548c\u83b7\u53d6\u65b9\u6cd5.</p> <p>\u5f88\u597d\u7406\u89e3 \u5b57\u9762\u610f\u601d\u3002\u524d\u8005\u662f\u4f1a\u8ba9\u67d0\u4e2a\u5bf9\u8c61\u8fdb\u884c\u66f4\u6539/\u4fee\u9970\uff0c\u4f46\u662f\u540e\u8005\u662f\u76f4\u63a5\u83b7\u53d6\u4e86\u4e00\u4e2a\u65b0\u7684\u4fee\u6539\u4e4b\u540e\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u539f\u5bf9\u8c61\u4e0d\u53d8\u3002 <pre><code>    LocalDate aThousandDayLater = newYearsEve.plusDays(1000);\n\n    someDay.add(Calendar.DAY_OF_MONTH,1000);\n</code></pre> \u7b2c\u4e00\u4e2a\u662f \\(Access Method\\) \u4f46\u540e\u8005\u662f\\(Mutator Method\\)\u539f\u6765\u7684\u5bf9\u8c61\u53d1\u751f\u4e86\u6539\u53d8\u3002</p>"},{"location":"Tutorial/Java/Java4/#43-multiple-source-usage","title":"4.3 Multiple source usage","text":""},{"location":"Tutorial/Java/Java4/#432-use-of-multiple-source-files","title":"4.3.2 Use of Multiple Source Files","text":"<p>\u6211\u4eec\u8fd9\u91cc\u5148\u8003\u8651\u4e00\u4e0b\u7c7bUnix\u7cfb\u7edf\u4e2d\u7684<code>make</code>\u7684\u903b\u8f91\uff0c\u5728\u4e4b\u524d\u5199<code>makefile</code>\u6587\u4ef6\u4e2d\u7684\u65f6\u5019\uff0c\u5b66\u4e60\u4e86\u4e00\u4e0b<code>make</code>\u7684\u903b\u8f91\uff0c\u662f\u5c06\u6307\u5b9a\u7684\u4e00\u4e9b<code>.h</code>,<code>.c</code>\u7b49\u76ee\u6807\u5f85\u6587\u4ef6\u7f16\u8bd1\u6587\u4ef6\u653e\u5728\u4e00\u8d77\uff0c\u7b49\u5f85\u5982\u679c\u67d0\u4e9b<code>.h/.c</code>\u6587\u4ef6\u53d1\u751f\u6539\u52a8\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u5355\u72ec\u7684\u91cd\u65b0\u5c06\u8fd9\u4e9b\u6587\u4ef6\u7f16\u8bd1\u8fdb\uff0c\u800c\u4e0d\u662f\u6574\u4f53\u7f16\u8bd1\u3002\u6709\u70b9\u7c7b\u4f3c<code>cache</code>\u7684\u4f5c\u7528\u3002\u5c31\u662f\u4e3a\u4e86\u8282\u7ea6\u6027\u80fd\uff0c\u5df2\u7ecf\u7f16\u8bd1\u8fc7\u7684\u672a\u6539\u53d8\u7684\u5185\u5bb9\u4e0d\u53d8\u3002</p> <p>\u6211\u4eec\u5728\u8003\u8651Java\u7684\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u5df2\u7ecf\u53ef\u4ee5\u611f\u53d7\u5230\u4e86Java\u4e2d\u5185\u7f6e\u4e86<code>make</code>\u3002\u600e\u4e48\u5462\uff1f\u9996\u5148\uff0c\u4f5c\u4e3a\u5178\u578b\u7684OOP\u8bed\u8a00\uff0c\u6211\u4eec\u662f\u5c06\u5404\u4e2a\u7c7b\u5199\u5728\u5404\u81ea\u7684\u6587\u4ef6\u4e2d\uff0c\u90a3\u4e48\u5047\u8bbe\u6211\u4eec\u6709\u4e24\u4e2a\u7c7b\uff0c<code>Employee.java</code>\u548c<code>EmployeeTest.java</code>\u51fd\u6570\uff0c\u6211\u4eec\u5728\u540e\u8005\u4e2d\u4f7f\u7528\u5230\u4e86\u524d\u8005\u8fd9\u4e2a\u7c7b\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u4f1a\u4f18\u5148\u5bfb\u627e\u6709\u65e0<code>Employee.class</code>\u8fd9\u4e2a\u6587\u4ef6\u5b58\u5728\u4fbf\u4e8e\u65e0\u4fee\u6539\u7684\u91cd\u590d\u5229\u7528\uff0c\u548c\u4e0a\u8ff0\u7684 make \u8fdb\u884c\u547c\u5e94\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u7684\u8bdd\u5c31\u4f1a\u9009\u62e9\u5bfb\u627e<code>Employee.java</code>\u5e76\u4e14\u8fdb\u884c\u7f16\u8bd1\u3002\u5982\u679c\u5b9e\u5728\u6ca1\u6709\u627e\u5230\u7684\u8bdd\u5c31\u4f1a\u5728<code>EmployeeTest.java</code>\u4e2d\u5bfb\u627e\uff0c\u7136\u540e\u62a5\u9519\u3002</p>"},{"location":"Tutorial/Java/Java4/#433-dissecting-the-employee-class","title":"4.3.3 Dissecting the Employee Class","text":"<p>Several Key Words</p> <ul> <li>Public : The keyword public means that any method in any class can call this method.     \u6240\u6709\u4efb\u4f55\u7c7b\u7684\u4efb\u4f55\u65b9\u6cd5\u90fd\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002</li> <li>private : The keyword Make sure that the only methods that can access these instance fields are the methods of the inner class itself.No outside method can read or write to these method,including the Derivative class(\u884d\u751f\u7c7b)</li> <li>protected : The keyword Make sure that the methods can be accessed by any class in the same class\uff0calso including the Derivative class.</li> </ul>"},{"location":"Tutorial/Java/Java4/#435-declaring-local-variabale-with-var","title":"4.3.5 Declaring Local Variabale with var","text":"<p><code>var</code> key word is used to provided their type can be inferred from the initial value.</p> <p><code>Employee harry = new Employee(....);</code> You can use the <code>var</code> key word that make the following code; <code>var harry = new Employee(....)</code> Which,you can avoid typing the type again.</p>"},{"location":"Tutorial/Java/Java4/#435-be-careful-with-null","title":"4.3.5 Be careful with <code>null</code>!","text":"<p>null represents absence of an object.</p> <p>If you apply a method into the <code>null</code> object, you will run across a <code>NullPointerException</code> error. It is a serious error, if you haven't catch it,it will terminated. So we should always care about the <code>null</code> error.</p>"},{"location":"Tutorial/Java/Java4/#4311-final-instance-fields","title":"4.3.11 <code>Final</code> Instance Fields","text":"<p><code>Final</code> key word's meaning is as the same as final.</p> <p>Which means that, this field must be initialized when the object is constructed, the value can't be change again! <code>immutable</code> !</p>"},{"location":"Tutorial/Java/Java4/#44-static-fields-and-methods","title":"4.4 Static Fields and Methods","text":"<p>Simply understand is that the static method can be only one in a class. It is belong to a class, but not any individual object.</p> <p>So when you access them, you must <code>Class.xxx</code> But not <code>object.xxx</code> </p> <p>So, combine the <code>final</code> key word, you can know that <code>static final</code>. When you use <code>Math.PI</code> as a constant, at the same time that it means <code>public static final double PI = 3.14....</code></p> <p> <code>Native Method</code> can bypass the acess control mechanisms of the Java Language.</p>"},{"location":"Tutorial/Java/Java4/#445-the-static-main-method","title":"4.4.5 The static Main method","text":"<p>In fact that The <code>main</code> method does not operate on any objects.In fact,when a program starts, there aren't objects yet.The static <code>main</code> method executes, and constructs the object that the program needs.</p>"},{"location":"Tutorial/Java/Java4/#45-method-parameters","title":"4.5 Method Parameters","text":"<ul> <li> call by value : which means that the method gets just the value that the caller provides.</li> <li>call by reference : which means that the method gets the location of the variable that the caller provides.</li> </ul> <p>Obviously, Java choose the call by value. That means that the method gets a copy of all parameter values.The method cannot modify the contents of any parameter variable passed to it.</p> <ul> <li>Two kinds of method parameters:</li> <li>Primitive types(numbers,boolean value)</li> <li>Object references \u5bf9\u8c61\u5f15\u7528 \u5f88\u663e\u7136\uff0c\u539f\u59cb\u7c7b\u578b\u7684\u503c\u662f\u65e0\u6cd5\u6539\u53d8\u7684\uff0c\u56e0\u4e3a\u503c\u8c03\u7528\u7684\u539f\u56e0\uff0c\u65b9\u6cd5\u65e0\u6cd5\u66f4\u6539\u4f20\u5165\u7684\u503c\u672c\u8eab\uff0c\u56e0\u4e3a\u4f20\u5165\u7684\u662fprimitive types\u7684\u4e00\u4e2acopy\u800c\u5df2\u3002\u4f46\u4f20\u5165\u7684\u662f\u5bf9\u8c61\u5f15\u7528\u5c31\u4e0d\u4e00\u6837\u4e86\u3002 <p>Actually, both the original and the copy refer to the same object!</p> </li> </ul> <p> Java\u672c\u8eab\u662f\u4f20\u503c\u7684\uff0c\u6211\u4eec\u6240\u8c13\u7684\u53ef\u80fd\u51fa\u73b0\u7684\u66f4\u6539\u5f15\u7528\u7684\u662f\u7531\u4e8e\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u903b\u8f91\u3002\u5f15\u7528\u548c\u88ab\u5f15\u7528\u8005\u90fd\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4ed6\u4eec\u4f20\u5165method\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u8fdb\u884c\u4fee\u6539\uff0c\u4f46\u662f\u6211\u4eec\u7531\u4e8e\u5728\u65b9\u6cd5\u4e2d\u4f20\u5165\u7684\u662fcopy of reference\uff0c\u90a3\u4e48\u4fee\u6539\u526f\u672c\u6240\u6307\u5411\u7684\u5bf9\u8c61\u662f\u4e0d\u80fd\u6539\u53d8\u88ab\u5f15\u7528\u8005\u672c\u8eab\u539f\u5148\u6307\u5411\u7684\u5bf9\u8c61\u7684\u3002\u56e0\u6b64\uff0cswap\u51fd\u6570\u5c31\u663e\u5f97\u4e0d\u50cfC++\u4e2d\u90a3\u6837\u8fdb\u884c\u6307\u9488\u6307\u5411\u7684\u66f4\u6539\u4e86\u3002</p>"},{"location":"Tutorial/Java/Java4/#46-objective-constructor","title":"4.6 Objective Constructor","text":""},{"location":"Tutorial/Java/Java4/#461-overloading","title":"4.6.1 OverLoading","text":"<p>some classes have more than one constrctor.This capability is called <code>overloading</code> </p> <ul> <li>Definition: Overloading means that if several method shares the same name, but different parameters.</li> </ul> <p>The compiler sort out the correct method with the correct types of the values. If it can't find the correct method that, it will cause <code>compile-time error</code></p> <p>The process of finding a match is called <code>overloading resolution</code> \u91cd\u8f7d\u89e3\u6790</p>"},{"location":"Tutorial/Java/Java4/#468-object-destruction-and-finalize-method","title":"4.6.8 Object Destruction and <code>finalize</code> Method","text":"<p>Many OOP Language have need the destructor function, but because of Java have automatic garbage collection, manual memory reclamation is not needed!</p> <p>But in the real case that, some objects utilize a resource other than memory, like a file. In this case that, a <code>close()</code> method is important to cleanup.</p>"},{"location":"Tutorial/Java/Java4/#47-package","title":"4.7 Package","text":""},{"location":"Tutorial/Java/Java4/#471-package-names","title":"4.7.1 Package Names","text":"<p>The main reason for using package is to guarantee the uniqueness of class name.</p> <ul> <li> <p>Why use the Internet domain name as the name of package? Because of the reason that we assume the domain name could be unique.</p> </li> <li> <p>Also there is no relations between two packages, they are independent!</p> </li> </ul>"},{"location":"Tutorial/Java/Java4/#473-static-imports","title":"4.7.3 Static Imports","text":"<ul> <li>A form of the <code>import</code> statement permits the importing of the static methods and fields, not just classes. </li> </ul>"},{"location":"Tutorial/Java/Java4/#474-addition-of-a-class-into-a-package","title":"4.7.4 Addition of a class into a package","text":"<p>Package \u5173\u952e\u5b57\u7684\u76ee\u7684\u5c31\u662f\u628a\u67d0\u4e2aclass\u6587\u4ef6\u5f52\u5c5e\u5230\u4e00\u4e2a\u5305\u4e2d\uff0c\u4e0d\u7136\u7684\u8bdd\uff0c\u8fd9\u4e2ajava\u6587\u4ef6\u5c31\u96b6\u5c5e\u4e8eunnamed package\u4e86\u3002</p> <p> \u867d\u7136\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u662f\u5728<code>JVM</code>\u4e0a\u8fd0\u884c\u5c31\u4f1a\u51fa\u9519\uff0c\u9700\u8981\u6211\u4eec\u624b\u52a8\u7684\u628a\u6587\u4ef6\u653e\u5728\u90a3\u4e2apackage\u7684\u76ee\u5f55\u4e0b\u3002</p>"},{"location":"Tutorial/Java/Java4/#48-jar-java","title":"4.8 Jar\u6587\u4ef6 Java\u5b58\u6863\u6587\u4ef6","text":"<p>What is a JAR file (Java Archive File) - A JAR file contains multiple <code>class</code> file,and other files like image and sound files which have been compiled and compressed using the familiar Zip compression format, only when you need to use/include them, the <code>JVM</code> will add them into your program. \u8fd9\u91cc\u548cpackage\u533a\u5206\u4e00\u4e0b\uff0cpackage\u4e2d\u662f\u4e00\u5806<code>.java</code>\u6587\u4ef6\uff0c\u4f46\u662fJAR\u5305\u4e2d\u5305\u542b\u7684\u662f\u5df2\u7ecf\u7f16\u8bd1\u597d\u7684<code>class</code>\u6587\u4ef6,\u548c\u5176\u4ed6\u7684\u955c\u50cf\u6587\u4ef6\u7b49\u88ab\u6253\u5305\u6210\u4e86\u4e00\u4e2azip\u683c\u5f0f\u7684\u6587\u4ef6\u3002</p> <p>when you package your application,you want to give your user a single file, not a directory structure filled with class file.</p>"},{"location":"Tutorial/Java/Java4/#481-creating-jar-files","title":"4.8.1 Creating JAR files","text":"<p>using the <code>jar</code> tool to make JAR files.(In the default JDK installation,it's in the <code>jdk/bin</code> directory)</p>"},{"location":"Tutorial/Java/Java4/#482","title":"4.8.2","text":"<p>The Manifest </p> <p>In addition to class files, each JAR file contains a <code>manifest</code> file describes special features of the archive. Like the README.md file. It is called <code>MANIFEST.MF</code> is located in a special <code>META-INF</code> subdirectory of the <code>JAR</code> file.</p>"},{"location":"Tutorial/Java/Java4/#49-documetation-comments","title":"4.9 Documetation Comments","text":"<p>A JDK contains a very useful tool, called <code>javadoc</code>, which generates HTML documentation from your source files.</p>"},{"location":"Tutorial/Java/Java5/","title":"Chapter5 Inheritance","text":"<p>\u7ee7\u627f</p> <p>[tips] \u5b66\u5b8c\u53cd\u5c04\u4e4b\u540e\uff0c\u4e66\u672c\u7ed9\u4e86\u4e00\u53e5\u5f88\u5173\u952e\u7684\u8bdd Don't reuse Reflection \u4e0d\u8981\u6ee5\u7528reflection The reflection mechanism lets you write programs with amazing generality, by detecting fields and methods at runtime. This capability can beextremely useful for systems programming, but it is usually not appropriate in applications. Reflection is fragile\u2014with it, the compiler cannot help you find programming errors. Any errors are found at runtime and result in exceptions.</p> <p>\u53cd\u5c04\u662f\u8106\u5f31\u7684\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u6b63\u786e\u7684\u5e2e\u4f60\u627e\u5230\u9519\u8bef\uff01</p> <p>The idea behind inheritance is that you can create new classes that are built on existing classes(It is the natural of the Inheritance). When you inherit from an existing class, you reuse (or inherit) its methods, and you can add new methods and fields to adapt your new class to new situation. This technique is essential in Java Programming.</p> <p>The Inheritance chapter also introduce the mechanism of reflection, the ability to find out more about classes and their properties in a running program.It is a critical feature of Java</p>"},{"location":"Tutorial/Java/Java5/#51-classes-superclasses-and-subclasses","title":"5.1 Classes, Superclasses, and Subclasses","text":"<p>A sentence to conclue is that a manager is a Employee.   (is-a relation)</p>"},{"location":"Tutorial/Java/Java5/#511-defining-subclasses","title":"5.1.1 Defining Subclasses","text":"<p>use the key word extends</p> <pre><code>public class Manager extends Employee{\n    //added methods and fileds;\n}\n</code></pre> <ul> <li>A design principle is that : you place the most general methods in th superclass and more specialized methods in its subclasses.</li> </ul>"},{"location":"Tutorial/Java/Java5/#512-overriding-methods","title":"5.1.2 overriding methods","text":"<p>\u5982\u679c\u8bf4\u5b50\u7c7b\u7ee7\u627f\u4e86\u7236\u7c7b\u7684\u4e00\u4e9b\\(fields\\)\u548c\\(methods\\)\u3002\u5982\u679c\u6709\u4e9b\u7236\u7c7b\u4e0d\u5177\u5907\u7684\\(methods/fields\\)\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u6dfb\u52a0\u3002\u4f46\u4e5f\u6709\u4e00\u79cd\u60c5\u51b5\u662f\uff0c\u5b50\u7c7b\u4e2d\u7684\u67d0\u4e9b\u65b9\u6cd5\u662f\u9700\u8981\u91cd\u5199\u7684\uff0c\u6216\u8005\u8bf4\u662f\u5b9e\u73b0\u65b9\u5f0f\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5229\u7528 override \u5173\u952e\u5b57\u6765\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5\u7684\u91cd\u5199</p> <p></p>"},{"location":"Tutorial/Java/Java5/#super","title":"super \u5173\u952e\u5b57","text":"<p>\u5f88\u597d\u7406\u89e3 <code>super</code> \u5173\u952e\u5b57\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u7236\u7c7b\u7684\u5f15\u7528\uff0c\u53ef\u4ee5\u7c7b\u6bd4\u4e00\u4e0b\u6211\u4eec\u4e4b\u524d\u4e00\u76f4\u4f7f\u7528\u7684<code>this</code> \u5173\u952e\u5b57</p> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c<code>Salary</code>\u5c31\u662f <code>Employee</code> \u7c7b\u4e2d\u7684<code>private fileds</code> \u56e0\u6b64\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528<code>super</code>\u6765\u83b7\u53d6\u8fd9\u4e2a\u7c7b\u4e2d\u7684<code>fields</code>.</p> <p>[tips] Java only support that many to one Inheritance\u4e5f\u5c31\u662f\u53ea\u80fd\u5141\u8bb8\u5355\u7ee7\u627f\uff0c\u4e0d\u5141\u8bb8\u591a\u7ee7\u627f</p>"},{"location":"Tutorial/Java/Java5/#516-method-call","title":"5.1.6 Method call","text":"<ul> <li>Static Binding : \u9759\u6001\u7ed1\u5b9a If the method is private, static, final or a constructor, then the compiler knows exactly which method to call.\u56e0\u4e3a\u4e0a\u9762\u8fd9\u4e9bmethods\u7684\u5c5e\u6027\u90fd\u662f\u786e\u5b9a\u7684\uff0c\u4e0d\u6d89\u53ca\u53ef\u80fd\u8de8\u7c7b\u7684\u8c03\u7528\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u53ef\u4ee5\u65b9\u4fbf\u76f4\u63a5\u7684\u9759\u6001\u7ed1\u5b9a\u3002\u4f46\u53cd\u4e4b\uff0c<code>public</code>\u6216\u8005\u8bf4\u662f<code>protected</code>\u8fd9\u79cd\u53ef\u4ee5\u8de8\u7c7b\uff0c\u8de8package\u7684\uff0c\u4f60\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u4f1a\u7528\u5230\uff0c\u5c31\u9700\u8981\u52a8\u6001\u7ed1\u5b9a(Dynamic binding)\u4e86.  <p>Dynamic binding has a very important property: It makes programs extensible without the need for modifying existing code.</p> </li> </ul>"},{"location":"Tutorial/Java/Java5/#517-prevent-inheritance-final","title":"5.1.7 prevent Inheritance <code>final</code>","text":"<p>every methods in <code>final</code> or <code>final class</code> will not been overridden!</p>"},{"location":"Tutorial/Java/Java5/#518-casting","title":"5.1.8 Casting","text":"<p>\u7c7b\u578b\u8f6c\u5316</p> <p>\u8bb0\u4f4f\uff0cJava\u662f\u5f3a\u7c7b\u578b\u7684\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u652f\u6301\u50cfC++\u90a3\u6837\u7684\u9690\u578b\u8f6c\u5316\u3002</p> <ul> <li>use <code>instanceof</code> \u662f\u4e00\u4e2a\u597d\u4e60\u60ef\uff0c\u907f\u514d\u51fa\u73b0<code>catch exception(ClasscastException)</code>\u7684\u60c5\u51b5</li> <li>Use instanceof to check before casting from a superclass to a subclass.</li> </ul>"},{"location":"Tutorial/Java/Java5/#52-object-the-cosmic-superclass","title":"5.2 object: the cosmic Superclass","text":"<p>object is the ultimate ancestor - every class in Java <code>extends</code> object.</p>"},{"location":"Tutorial/Java/Java5/#522-the-equals-method-important","title":"5.2.2 The equals Method Important","text":""},{"location":"Tutorial/Java/Java5/#why-do-you-need-to-override-equal-method","title":"Why do you need to override <code>equal</code> method?","text":"<p>\u662f\u56e0\u4e3a Object \u7c7b\u9ed8\u8ba4\u7684equals()\u65b9\u6cd5\u5b9e\u73b0\u7684\u662f\u6bd4\u8f83\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\uff08\u5373\u662f\u5426\u4e3a\u540c\u4e00\u4e2a\u5bf9\u8c61\uff09\uff0c\u800c\u4e0d\u662f\u6bd4\u8f83\u5bf9\u8c61\u7684\u5185\u5bb9</p>"},{"location":"Tutorial/Java/Java5/#523-hashcode-method","title":"5.2.3 <code>hashCode</code> method","text":"<p>The <code>hashCode</code> method is defined in the <code>Object</code> class.Therefore, every object has a defualt hash code.The hash code is derived from the object's memory address.</p> <p></p> <ul> <li>Note that the strings s and t have the same hash code, because for strings, the hash code are derived from its content. here <code>String s = \"OK\"</code>,<code>String t = new String(\"OK\")</code>,so their hash code is the same.</li> <li>But for other object, which <code>hashCode</code> has not been defined for the class that it will only use the default <code>hashCode</code> defined in the <code>Object</code> class, which derives the <code>memory address</code>.</li> </ul> <p>Important: Why do you need to <code>override</code> the <code>hashCode</code> method after you <code>override</code> the <code>equals</code> method?</p> <p>\u8fd9\u662f\u56e0\u4e3a\u5728\u4f7f\u7528\u6563\u5217\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u54c8\u5e0c\u8868\uff0c\u6211\u4eec\u5e0c\u671b\u76f8\u7b49\u7684\u5bf9\u8c61\u5177\u6709\u76f8\u7b49\u7684\u54c8\u5e0c\u7801\uff01\u5728Java\u4e2d\uff0c\u54c8\u5e0c\u8868\u4f7f\u7528\u54c8\u5e0c\u7801\u6765\u786e\u5b9a\u5b58\u50a8\u5151\u73b0\u8fc7\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u4e24\u4e2a\u76f8\u540c\u7684\u5bf9\u8c61\u5177\u6709\u4e0d\u540c\u7684\u54c8\u5e0c\u7801\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c31\u4f1a\u88ab\u5b58\u5728\u54c8\u5e0c\u8868\u4e2d\u7684\u4e0d\u540c\u4f4d\u7f6e\uff0c\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u6b63\u786e\u7684\u67e5\u627e\u8fd9\u4e9b\u5bf9\u8c61\u3002</p> <p></p>"},{"location":"Tutorial/Java/Java5/#53-generic-array-lists","title":"5.3 Generic Array Lists","text":"<p>\u901a\u7528\u6570\u7ec4\u5217\u8868</p> <p>In C/C++ you have to fix the sizes of all arrays at compile time.But it is awful in sometime.Althogh Java could set size of an array at runtime like <pre><code>int acutalSize = ...;\nvar staff = new Employee[actualSize];\n</code></pre> \u4f46\u4e0a\u9762\u7684\u4ee3\u7801\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u52a8\u6001\u4fee\u6539\u6570\u7ec4\u5927\u5c0f\u7684\u95ee\u9898\u3002\u4e00\u65e6\u786e\u5b9a\u4e86\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u662f\u4e0d\u5bb9\u6613\u66f4\u6539\u7684\u3002\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e86 <code>ArrayLists</code></p> <p>ArrayList class is similar to an array, but it automatically adjusts its capacity as you add and remove elements,without any additional code.</p>"},{"location":"Tutorial/Java/Java5/#531-declaring-array-lists","title":"5.3.1 Declaring Array Lists","text":"<p><code>ArrayList&lt;Employee&gt; staff = new ArrayList&lt;Employee&gt;()</code></p> <ul> <li><code>ensureCapacity(size)</code> method allocates an internal array of size objects, that you haven't involve any costly reallocation to <code>add</code> method.</li> </ul>"},{"location":"Tutorial/Java/Java5/#54-object-wrappers-and-autoboxing","title":"5.4 Object Wrappers and Autoboxing","text":"<ul> <li> <p>The type parameter inside the angle brackets cannot be a primitive type <code>ArrayList&lt;int&gt;</code> is not allowed.</p> </li> <li> <p>Because you define it must use the wrapper class, so actually it is slower obviously that <code>int[] array</code>.</p> </li> </ul>"},{"location":"Tutorial/Java/Java5/#55-methods-with-a-variable-number-of-parameters","title":"5.5 Methods with a variable number of parameters","text":"<p>\u6211\u4eec\u8fd9\u91cc\u5c31\u5f88\u597d\u7406\u89e3\u4e86\uff0c\u5f88\u81ea\u7136\u7684\u56e0\u4e3a\u6240\u6709\u7684\u7c7b\u578b\u90fd\u662f<code>Object class</code> \u7684 subclass,\u6240\u4ee5\u6211\u4eec\u4f20\u5165\u7684\u53c2\u6570\u4e8b\u5b9e\u4e0a\u5c31\u662f<code>Object[]</code>. \u6211\u4eec\u4e0b\u9762\u4ee5<code>printf</code>\u4e3a\u4f8b\u5b50\u3002 <pre><code>public class PrintStream{\n    public PrintStream printf(String fmt, Object... args){\n        return format(fmt,args);\n    }\n}\n</code></pre> [tips] : \u8fd9\u91cc\u7684<code>...</code> \u4e5f\u662fJava\u4ee3\u7801\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u4e2a\u8868\u793a\u4e86\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u6536\u83b7\u8bb8\u591a\u7684<code>objects</code>\u3002</p> <p>[\u4f8b\u5b50] <pre><code>public static double max(double... values){\n    double largest = Double.NEGATIVE_INFINITY;\n    for(double v:values){\n        if(v&gt;largest){\n            largest = v;\n        }\n    }\n    return largest;\n}\n</code></pre></p>"},{"location":"Tutorial/Java/Java5/#56-enumeration-classes","title":"5.6 Enumeration Classes","text":"<p>here we introduce an example: <pre><code>public enum Size{\n    SMALL,\n    MEDIUM,\n    LARGE,\n    EXTRA_LARGE\n}\n</code></pre> you are not need to use <code>equals</code> method,because there is only \\(4\\) instances in the enumeral class. You can simply use <code>==</code> to identify whether these 2 are the same.</p> <pre><code>public enum Day {\n    MONDAY(\"Workday\"),\n    TUESDAY(\"Workday\"),\n    WEDNESDAY(\"Workday\"),\n    THURSDAY(\"Workday\"),\n    FRIDAY(\"Workday\"),\n    SATURDAY(\"Weekend\"),\n    SUNDAY(\"Weekend\");\n\n    private String type;\n\n    // \u6784\u9020\u51fd\u6570\n    private Day(String type) {\n        this.type = type;\n    }\n\n    // \u83b7\u53d6type\u5c5e\u6027\u7684\u65b9\u6cd5\n    public String getType() {\n        return type;\n    }\n}\n\n\npublic class Main {\n    public static void main(String[] args) {\n        // \u83b7\u53d6\u679a\u4e3e\u5e38\u91cf\u548c\u5c5e\u6027\n        for (Day day : Day.values()) {\n            System.out.println(day + \" is a \" + day.getType());\n        }\n    }\n}\n</code></pre> <p>\u6211\u4eec\u4e3e\u4e86\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c<code>MONDAY</code>...\u90a3\u4e9b\u90fd\u662fDay\u7684\u5b9e\u4f8binstance.\u7136\u540e\u5728\u5b9a\u4e49\u7684\u65f6\u5019\uff0c\u987a\u4fbf\u8c03\u7528\u4e86<code>Day</code>\u4e2d\u7684<code>construct function</code> <code>public Day(String type){ this.type = type;}</code> \u56e0\u4e3a\u5df2\u7ecf\u5728<code>Day</code>\u8fd9\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86 <code>private String type;</code> <code>type</code>\u8fd9\u4e2afield. \u90a3\u4e48\u4e0a\u9762\u7684\u7ed3\u679c\u8f93\u51fa\u51fa\u6765\u5c31\u662f <pre><code>MONDAY is a Workday\nTUESDAY is a Workday\nWEDNESDAY is a Workday\nTHURSDAY is a Workday\nFRIDAY is a Workday\nSATURDAY is a Weekend\nSUNDAY is a Weekend\n</code></pre></p>"},{"location":"Tutorial/Java/Java5/#57-reflection","title":"5.7 Reflection","text":"<p>\u7ec8\u4e8e\u5230Reflection\u4e86 \u8fd9\u4e2aJava\u7684\u7279\u6027 - GPT\u5982\u662f\u8bf4  - \u600e\u4e48\u4ed4\u7ec6\u7406\u89e3<code>reflection</code>\uff1f \u4e3a\u4ec0\u4e48\u53eb\u505a\u53cd\u5c04\uff1f \u8fd9\u4e2a\u662f\u4e00\u4e2a\u6765\u81ea\u7269\u7406\u5b66\u4e2d\u7684\u6982\u5ff5\uff0c\u53cd\u5c04\u7684\u672c\u8d28\u662f\"\u770b\u5230\u81ea\u5df1\u7684\u6837\u5b50\",\u800cJava\u4e2d\u7684\u53cd\u5c04\uff08Reflection\uff09\u673a\u5236\u4e5f\u7c7b\u4f3c\uff0c\u5b83\u5141\u8bb8\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u65f6\u5019\u201c\u67e5\u770b\u201d\u81ea\u5df1\u7684\u7ed3\u6784\uff0c\u901a\u8fc7\u53cd\u5c04\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u5728\u4e0d\u660e\u786e\u77e5\u9053\u81ea\u5df1\u5305\u542b\u54ea\u4e9b\u7c7b\u3001\u65b9\u6cd5\u3001\u5c5e\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u5730\u68c0\u67e5\u64cd\u63a7\u81ea\u8eab\u7684\u5185\u90e8\u4fe1\u606f\u3002</p>"},{"location":"Tutorial/Java/Java5/#571-the-class-class","title":"5.7.1 The <code>Class</code> class","text":"<p>While your program is running, the Java runtime system always maintains what is called <code>runtime type identification</code> on all objects. This information keeps track of the class to which each object belongs.Runtime type information is used by the cirtual machine to select the correct methods to execute.</p> <ul> <li> <p>Just like an <code>Employee</code> object describes the properties of a particular employee,a <code>Class</code> object describes the properties of a particular class.</p> </li> <li> <p>If the class is a package, the package name is part of the class name.</p> </li> </ul> <pre><code>var generator = new Random();\nClass cl = generator.getClass();\nString name = cl.getName(); // name is set to \"java.util.Random\"\n</code></pre> <ul> <li>You can obtain a class object corresponding to a class name by using the static <code>forName</code> method.</li> </ul> <pre><code>String className = \"java.util.Random\";\nClass cl = Class.forName(className);// to obtain this class instance.\n</code></pre> <ul> <li><code>Class cl = Random.class</code></li> <li><code>Class cl = int.class</code> </li> </ul> <p>Another method to get the class instance.</p> <ul> <li>if(e.getClass() == Employee.class) \u8fd9\u4e2a\u6d4b\u8bd5\u4f1a\u629b\u51faException\uff0c\u5f53e\u662fEmployee\u7684subclass.\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2agetClass()\u8fd4\u56de\u7684\u7c7b\u578b\u662f\u5f3a\u7c7b\u578b\u7684\uff0c\u4e0d\u5305\u542b\u7ee7\u627f\u7684\u8f6c\u5316\uff0c\u5f97\u5230\u7684\u662f\u4ec0\u4e48\u90a3\u4e48\u5c31\u662f\u4ec0\u4e48\u3002</li> </ul>"},{"location":"Tutorial/Java/Java5/#572-a-primer-on-declaring-exception","title":"5.7.2 A primer on Declaring Exception","text":"<p>When an error occurs at runtime,a program can \"throw an Exception\"</p> <p>If you don't provide a \"handle\" (\"catches\" the exception and deals with it),the program will terminate and prints a message to the console.</p>"},{"location":"Tutorial/Java/Java5/#573-resources","title":"5.7.3 Resources","text":"<p>Classes often have associated data files, such as: - Image and sound files - Text files with message strings and button labels.</p>"},{"location":"Tutorial/Java/Java5/#574-using-reflection-to-analyze-the-capabilities-of-classes","title":"5.7.4 Using Reflection to Analyze the capabilities of classes.","text":"<ul> <li>First, there are 3 classes in the \\(java.lang.reflect\\) packages</li> <li>\\(Field\\)</li> <li>\\(Method\\)</li> <li>\\(Constructor\\) they describe the fields, methods, and constructors of a class respectively.</li> </ul> <p>\u5176\u5b9e\u53cd\u5c04\u7684\u8fd9\u4e2a\u529f\u80fd\u5f88\u597d\u7406\u89e3\uff0c\u4e5f\u5c31\u662f\u83b7\u53d6\u8fd9\u4e2aclass\u4e2d\u7684\u4e00\u4e9bfields,methods,constructor\u7684\u5143\u4fe1\u606f\u3002 - <code>getName</code>  return the name of the item - <code>getType</code> return the type Class - <code>getModifiers</code> return an integer with various bits turned on and off, describes the modifiers used,such as \\(public\\) and \\(static\\) - <code>getFileds</code>/<code>getMethods</code>/<code>getConsstructors</code> return arrays of the public fields,methods,and constructors that the class support.</p>"},{"location":"Tutorial/Java/Java5/#575-using-reflection-to-analyze-objects-at-runtime","title":"5.7.5 Using Reflection to Analyze Objects at Runtime","text":"<p>The obove Session we saw how find out the <code>names</code> and <code>types</code>.The following part, we will go one step further and actually look at the contents of the fields.</p> <p> Reflection lets you look at fields of objects that were not known at compile time.</p> <ul> <li><code>getDeclaredFiled</code>\u662f\u53ef\u4ee5\u8bbf\u95ee\u79c1\u6709\u5b57\u6bb5\u7684\u3002</li> </ul> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u6bb5\u600e\u4e48\u7406\u89e3\u5462\uff1f\u5c31\u662f\u53ef\u4ee5\u628a\u4ed6\u60f3\u6210\u662fExcel\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u9996\u5148<code>Class cl = harray.getClass()</code> \u8fd4\u56de\u4e86\u4e00\u4e2a<code>Class</code>\u7c7b\u7684\u5b9e\u4f8b<code>Employee</code>\u3002 <code>Fields f = cl.getDeclaredField(\"name\")</code> \u8fd9\u4e2a<code>f</code>\u4e5f\u5c31\u662f\u83b7\u5f97\u4e86\u6709\u5173<code>name</code>\u5b57\u6bb5\u7684\u6240\u6709\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8bf4\u662f\u50cf\u6570\u636e\u5e93\u4e2d\u7684\u83b7\u53d6\u4e86\u67d0\u4e2a\u5217\u7684\u6240\u6709\u5185\u5bb9\uff0c\u6211\u4eec\u7684<code>Object v = f.get(harry)</code>,<code>Object v</code> \u5c31\u83b7\u5f97\u7684\u662f<code>String</code>\u7c7b\u578b\u7684<code>Harry Hacker</code>\u4e5f\u5c31\u662f\u8fd9\u4e00\u5217name\u5b57\u6bb5\u4e2d\uff0c\u5c5e\u4e8e<code>harry</code>\u7684name\u3002</p> <p>but the code above has a problem -- The machanism of Java lets you find out what fields an object has,but it won't let you read and write the values of the fields, unless you have permission.</p> <p><code>field.setAccessible(true) // \u7ed5\u8fc7\u9650\u5236\u8bbf\u95ee</code></p> <p>\u5177\u4f53\u600e\u4e48\u7406\u89e3 \"Reflection lets you look at fields of objects that were not known at compile time.\" \u8fd9\u53e5\u8bdd\u5462\uff1f \u6211\u4eec\u62ff\u5e8f\u5217\u5316\u6765\u4e3e\u4f8b</p> <p><pre><code>import java.lang.reflect.Field;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ObjectSerializer {\n\n    public static Map&lt;String, Object&gt; serialize(Object obj) throws IllegalAccessException {\n        Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();\n        Class&lt;?&gt; cl = obj.getClass();\n\n        for (Field field : cl.getDeclaredFields()) {\n            field.setAccessible(true);  // \u7ed5\u8fc7\u8bbf\u95ee\u9650\u5236\n            result.put(field.getName(), field.get(obj));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) throws IllegalAccessException {\n        Employee emp = new Employee(\"Alice\", 75000, 12, 5, 1990);\n        Map&lt;String, Object&gt; serializedData = serialize(emp);\n        System.out.println(serializedData);\n    }\n}\n</code></pre> \u8f93\u51fa\u7ed3\u679c <pre><code>{name=Alice, salary=75000, hireMonth=12, hireDay=5, hireYear=1990}\n</code></pre></p> <p>\u4e0a\u9762\u7684\u4f8b\u5b50\u5176\u5b9e\u5c31\u662f\u5f88\u597d\u7684\u53cd\u5e94\u4e86\u901a\u8fc7Java\u7684\u53cd\u5c04\u673a\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u52a8\u6001\u7684\u8bbf\u95ee\u8fd9\u4e9b\u5b57\u6bb5\u5e76\u4e14\u83b7\u53d6\u4ed6\u4eec\u7684\u503c\u3002\u5728serialize\u65b9\u6cd5\u7528\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5b83\u4f9d\u7136\u53ef\u4ee5\u5de5\u4f5c\uff0c\u800c\u4e0d\u9700\u8981\u4e3a\u6bcf\u4e00\u79cd\u5bf9\u8c61\u90fd\u5b9a\u4e49\u5355\u72ec\u7684\u63a5\u6536/\u5224\u65ad\u673a\u5236\u3002\u56e0\u4e3a\u5b83\u4eec\u9700\u8981\u652f\u6301\u591a\u79cd\u4e0d\u540c\u7684\u5bf9\u8c61\u7ed3\u6784\uff01</p>"},{"location":"Tutorial/Java/Java5/#576-using-reflection-to-write-generic-array-code","title":"5.7.6 Using Reflection to write generic Array Code","text":"<p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u8981\u6ce8\u610f\u7684\u70b9\u662f \u6587\u4e2d\u63d0\u53ca\u4e86\u8fd9\u4e00\u4e2apoint\uff1a</p> <p>It is legal to cast an Employee[ ] temporarily to an Object[ ] array and then cast it back,but an array that started its life as an Object[ ] array can never be cast into an Employee[ ] array. \u6240\u4ee5\u6211\u4eec\u9700\u8981\u5229\u7528\u5230Reflection Package</p> <ul> <li>First : get the class object of <code>a</code></li> <li>Confirm that a it is indeed an array</li> <li>Use the <code>getComponentType</code> method of the Class (which is defined only for class objects that represent arrays) to find the right type for the array.</li> </ul>"},{"location":"Tutorial/Java/Java5/#577-invoking-arbitrary-methods-and-constructors","title":"5.7.7 Invoking Arbitrary Methods and Constructors","text":"<p>Because Java has no function pointer that, it can't like C / C++ you can execute an arbitrary function. But the following sessions we will introduce a new way to invoke the function.</p> <p>\u5176\u5b9e\u8ddf\u4e0a\u9762\u7684\u9053\u7406\u4e00\u6837\uff0c\u6211\u4eec\u6709<code>getMethod</code> \u548c<code>getConstructor</code> method\u6765\u83b7\u53d6\u5bf9\u5e94\u7684Method\u548cConstructor\u7684\u4e3b\u4f53\u3002 \u4e0b\u9762\u662f\u51e0\u4e2a\u4f8b\u5b50 - Example for Constructor  \u90a3\u4e48<code>cons</code>\u5c31\u7c7b\u4f3c\u4e8e\u4e00\u4e2amethod pointer\u4e86</p> <ul> <li>Example for Method  \u4e0a\u9762\u7684<code>square</code>\u548c<code>sqrt</code>\u5c31\u4ee3\u8868\u7740\u7c7b\u4f3cmethod pointer.</li> </ul>"},{"location":"Tutorial/Java/Java6/","title":"Chapter6 Interface","text":"<p>This chapter is about several advanced techniques that are commonly used. Despite their less obvious nature, you will need to master them to complete your Java tool chest.</p> <p>The Interfaces is a way of describing what classes should do, without specifying how they should do it.  \u600e\u4e48\u7406\u89e3\u5462\uff1f\u63a5\u53e3\u5c31\u662f\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u7c7b\u9700\u8981\u505a\u4ec0\u4e48\uff0c\u4f46\u6ca1\u6709\u8be6\u7ec6\u8bb2\u6e05\u695a\u4ed6\u4eec\u600e\u4e48\u505a\u3002</p>"},{"location":"Tutorial/Java/Java6/#61-interface","title":"6.1 Interface","text":"<p>Typically, the supplier of some service states: \"If your class conforms to a particular interface, then I'll perform the service.\" \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u67d0\u4e2a\u7c7b\u7b26\u5408\u63d0\u4f9b\u7684\u63a5\u53e3\u6807\u51c6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u63a5\u53e3\u3002</p> <pre><code>// An example of interface;\npublic interface Comparable{\n    int compareTo(Object other);\n}\n</code></pre> <ul> <li>This means that every class which want to implements the interface must have this method <code>compareTo</code>, and the method must take an <code>Object</code> parameter and return an integer.</li> <li>All methods of an interface must be <code>public</code>, so you have not need to add the public into the method.</li> <li>An interface can have multiple methods.</li> <li>Interfaces never have instance fields.</li> </ul>"},{"location":"Tutorial/Java/Java6/#611-implement-the-interface","title":"6.1.1 Implement the interface","text":"<ul> <li> <p>Step1: declare that your class intends to implement the given interface. <code>class Employee implements Comparable</code></p> </li> <li> <p>Step2 : supply definitions for all methods in the interface</p> </li> </ul> <pre><code>public interface Comparable{\n    int compareTo(Object other);\n}\n\nclass Employee implements Comparable&lt;Employee&gt;{\n    public int compareTo(Object otherObject){\n        Employee other = (Employee) otherObject;\n        return Double.compare(salary,other.salary);\n    }\n}\n</code></pre> <p>You see that why can't the Employee class simply provide a <code>compareTo</code> method without implementing the <code>Comparable</code> interface?</p> <p>The reason is that the Java Programming language is strongly typed(\u5f3a\u7c7b\u578b),when making a method calling, the compiler needs to be able to check that the method actually exists. \u4e5f\u5c31\u662f\u8bf4\u5176\u5b9eJava\u56e0\u4e3a\u662f\u5f3a\u7c7b\u578b\u7684\uff0c</p> <p>- GPT \u5982\u662f\u8bf4\uff1a\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u63a5\u53e3 </p>"},{"location":"Tutorial/Java/Java6/#612-the-properties-of-interfaces","title":"6.1.2 The properties of Interfaces","text":"<p>Interfaces are not classes. In particular, you can never use <code>new</code> operator to instantiate an interface.</p> <pre><code>Comparable x; // OK\nx = new Employee(...);// OK provided Employee implements Comparable.\n</code></pre> <ul> <li>Just as the same as you can build hierarchies of classes, you can <code>extend</code> interfaces.  \u8fd9\u91cc <code>extends</code>\u8fd9\u4e2a\u5173\u952e\u8bcd\u5c31\u51fa\u73b0\u4e86\uff0c\u50cfJava\u7c7b\u90a3\u6837\u53ef\u4ee5\u6709\u7ee7\u627f\uff0c\u5bf9\u4e8e\u63a5\u53e3\u6765\u8bf4\u4e5f\u53ef\u4ee5\u6709\u62d3\u5c55\uff0c\u4e5f\u5c31\u662f<code>extends</code>.</li> </ul> <pre><code>public interface powered extends Moveable{\n    double milesPerGallon();\n}\n\npublic interface powered extends Moveable{\n    double milesPerGallon();\n    double SPEED_LIMIT = 95;\n    // a public static final constant;\n}\n</code></pre> <ul> <li>each class can implemet many interfaces.   the designer of Java chose not to support multiple inheritance, because it makes the language either <code>complex</code> and <code>less efficient</code>.</li> </ul>"},{"location":"Tutorial/Java/Java6/#614-static-and-private-methods","title":"6.1.4 Static and Private Methods","text":"<p>As of Java 8, you are allowed to add static methods to interfaces.</p> <p>As of Java 9, methods in an interface can be <code>private</code>. A private method can be static or an instance method. Since private methods can only be used in the methods of the interface itself, their use is limited to being helper methods for the other methods of the interface.</p>"},{"location":"Tutorial/Java/Java6/#615-default-methods","title":"6.1.5 Default Methods","text":"<p>It is a modifier. Actually, it is not very useful because of the reason that you may override it many times. But in the iterator, <code>remove()</code> method is very useful.</p> <p>\u5176\u5b9e\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u63a5\u53e3\uff0c\u5f88\u597d\u7406\u89e3\uff0c\u6709\u4e9b\u65b9\u6cd5\u662f\u53ef\u4ee5\u4e0d\u7528\u91cd\u5199\u7684\uff0c\u90a3\u4e48\u67d0\u4e2a\u7c7b\u5982\u679c\u7b26\u5408\u8fd9\u4e2a\u63a5\u53e3\u7684\u8981\u6c42\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u800c\u4e14\u6709\u4e86 <code>default</code>\u5173\u952e\u5b57\uff0c\u90a3\u4e9b\u4e0d\u4f9d\u8d56\u7c7b\u5b9e\u73b0\u672c\u8eab\u7ec6\u8282\u7684\u65b9\u6cd5\u5c31\u4e0d\u7528\u91cd\u5199\uff0c\u76f4\u63a5\u8c03\u7528\u5373\u53ef\u3002</p> <pre><code>public interface Iterator&lt;E&gt;{\n    // E is the type of the element;\n    boolean hasNext();\n    E next();\n    default void remove(){\n        throw new UnsupportedOperationException(\"remove\");\n    }\n}\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2a\u73b0\u5b9e\u7684\u95ee\u9898\uff0c\u5c31\u662f\u5f88\u5e38\u89c1\u7684<code>interface evolution</code>\uff0c\u6bd4\u5982\u6211\u4eec\u8003\u8651\u4e00\u4e2a<code>Collection</code>\u63a5\u53e3\uff0c\u7528\u4e86\u5f88\u591a\u5e74\u4e86\uff0c\u7136\u540e\u6211\u4eec\u6709\u4e2a\u7c7b\u8c03\u7528\u4e86\u8fd9\u4e2a\u63a5\u53e3\u3002\u4f46\u662f\u968f\u7740\u7248\u672c\u7684\u66f4\u65b0\uff0c\u6211\u4eec\u5728<code>Collection</code>\u8fd9\u4e2a\u63a5\u53e3\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4f46\u662f\u5982\u679c\u4e0d\u6dfb\u52a0<code>Default</code>\u5173\u952e\u5b57\u7684\u8bdd\uff0c\u5c31\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u95ee\u9898\uff0c\u65e0\u6cd5\u7f16\u8bd1\u5e76\u4e14\u4f1a\u629b\u51fa\u9519\u8bef\u3002\u90a3\u4e48\u5bf9\u4e8e\u5927\u9879\u76ee\u7684\u8bdd\u5c31\u76f4\u63a5gg\u3002\u6240\u4ee5\u6dfb\u52a0<code>Default</code>\u5173\u952e\u5b57\u53ef\u4ee5\u89c4\u907f\u8fd9\u4e2a\u95ee\u9898\u3002\u53ef\u4ee5\u5b89\u5fc3\u7684\u7ed9\u63a5\u53e3\u6dfb\u52a0\u65b0\u7684methods\u6216\u8005methods\u66f4\u6539\u4e86\u3002</p>"},{"location":"Tutorial/Java/Java6/#616-resolving-the-default-method-conflicts","title":"6.1.6 Resolving the Default Method conflicts","text":"<p>\u5f53\u4e00\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u4ee5<code>default</code>\u5728\u4e00\u4e2a\u63a5\u53e3\u4e2d,\u7136\u540e\u53c8\u540c\u6837\u7684\u5b9a\u4e49\u5728\u4e00\u4e2a\u8d85\u96c6\u4e2d(superclass)\uff0c\u90a3\u4e48Java\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u6837\u7684\u51b2\u7a81\u5462\uff1f</p> <ul> <li>\u7236\u7c7b\u8d62\u3002If a superclass provides a concrete method, default methods with the same name and parameter types are simply ignored.</li> <li>Interface Clash.(\u540c\u4e00\u4e2a\u65b9\u6cd5\u51fa\u73b0\u5728\u4e86\u4e24\u4e2a\u63a5\u53e3\u4e2d)\u90a3\u4e48\u5c31\u9700\u8981<code>override</code>\u6765\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u4e86\u3002\u53ef\u4ee5\u907f\u514d\u51fa\u73b0conflict\u7684\u60c5\u51b5\u3002</li> </ul>"},{"location":"Tutorial/Java/Java6/#617-interfaces-and-callbacks","title":"6.1.7 Interfaces and callbacks","text":"<p><code>callback</code>, represents that you specify the action that should occure whenever a particular event happens. \u4e5f\u5c31\u662f\u6709\u4e2a\u53cd\u9988\u673a\u5236\u3002</p> <p>\u4e0b\u9762\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5c31\u662f\u5173\u4e8e <code>ActionListener</code> <pre><code>// here offer an interface;\npublic interface ActionListener{\n    void actionPerformed(ActionEvent event);\n}\n\n// We call the interface;\nclass TimePrinter implements ActionListener{\n    // override the interface;\n    /**\n     * @param event the description of the event;\n     */\n    public void actionPerformed(ActionEvent event){\n        // \n        System.out.println(\"At the tone,the time is \"+Instant.ofEpochMilli(event.getWhen()));\n        Toolkit.getDefaultToolkit().beep();\n    }\n}\n</code></pre></p>"},{"location":"Tutorial/Java/Java6/#618-the-comparator-interface","title":"6.1.8 The Comparator Interface","text":"<p>\u4e0a\u9762\u5c31\u662f\u4e00\u4e2aJava\u7684sort\u4f17\u591a\u91cd\u8f7d<code>overloading</code>\u65b9\u6cd5\u4e2d\u7684\u4e00\u4e2a,\u53ef\u4ee5\u4f20\u5165\u6bd4\u8f83\u5668</p> <pre><code>var comp = new lengthComaprator();\nif(comp.compare(words[i],words[j])&gt;0)...\n\n// method2 \nString[] friends = {\"1\",\"2\"};\n// \u8fd9\u91cc\u5c31\u662f\u5bf9\u5e94\u4e0a\u9762\u7684 sort(T[] a,Comparator&lt;? super T&gt;c)\nArray.sort(friends,new lengthComparator());\n</code></pre>"},{"location":"Tutorial/Java/Java6/#619-object-cloning","title":"6.1.9 Object Cloning","text":"<p>here introduce an interface that about the object cloning;</p> <p>\u6211\u4eec\u8fd9\u91cc\u8981\u533a\u5206\u4e00\u4e0b <code>shallow clone</code> \u548c <code>deep clone</code> \uff1a - <code>shallow clone</code>:\u662f\u8fd0\u7528\u5230 immutable \u4e0d\u53ef\u53d8\u7684\u8bdd\uff0c\u90a3\u4e48\u662f\u53ef\u4ee5\u5229\u7528\u6d45\u514b\u9686\u7684.\u53ea\u590d\u5236\u5bf9\u8c61\u7684\u7b2c\u4e00\u5c42\u6570\u636e\uff0c\u5bf9\u4e8e\u5f15\u7528\u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u5b83\u53ea\u590d\u5236\u5f15\u7528\u5730\u5740\uff0c\u800c\u4e0d\u4f1a\u590d\u5236\u5f15\u7528\u5bf9\u8c61\u672c\u8eab\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u539f\u59cb\u5bf9\u8c61\u7684\u5f15\u7528\u7c7b\u578b\u5b57\u6bb5\u6307\u5411\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48\u6d45\u62f7\u8d1d\u540e\u7684\u8be5\u5b57\u6bb5\u5c06\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u56e0\u6b64\uff0c\u4fee\u6539\u62f7\u8d1d\u5bf9\u8c61\u4e2d\u7684\u5f15\u7528\u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u539f\u6765\u7684\u4e5f\u4f1a\u8fdb\u884c\u6539\u53d8\u3002 - <code>deep clone</code> : \u662f\u8fd0\u7528\u6df1\u62f7\u8d1d\uff0c\u4e00\u4e2a\u8bcd\u6765\u5f62\u5bb9 \u5b8c\u5168\u72ec\u7acb\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u9012\u5f52\u7684\u62f7\u8d1d\u5176\u5305\u542b\u7684\u5168\u90e8\u5f15\u7528\u5bf9\u8c61\uff0c\u5e76\u4e14\u521b\u9020\u51fa\u5168\u65b0\u7684\u5b9e\u4f8b\u3002\u4e0d\u4f1a\u51fa\u73b0\u4e0a\u9762\u7684\u60c5\u51b5\u3002 <pre><code>// shallow clone\nclass ShallowCloneExample implements Cloneable {\n    int value;\n    int[] array;\n\n    public ShallowCloneExample(int value, int[] array) {\n        this.value = value;\n        this.array = array;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone(); // \u4ec5\u590d\u5236\u7b2c\u4e00\u5c42\n    }\n}\n\n// \u4f7f\u7528\u6d45\u62f7\u8d1d\nShallowCloneExample original = new ShallowCloneExample(10, new int[]{1, 2, 3});\nShallowCloneExample clone = (ShallowCloneExample) original.clone();\n\n\n// deep clone\nclass DeepCloneExample implements Cloneable {\n    int value;\n    int[] array;\n\n    public DeepCloneExample(int value, int[] array) {\n        this.value = value;\n        this.array = array.clone(); // \u9012\u5f52\u62f7\u8d1d\u5f15\u7528\u7c7b\u578b\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        DeepCloneExample deepClone = (DeepCloneExample) super.clone();\n        deepClone.array = array.clone(); // \u624b\u52a8\u514b\u9686\u6bcf\u4e2a\u5f15\u7528\u7c7b\u578b\n        return deepClone;\n    }\n}\n\n// \u4f7f\u7528\u6df1\u62f7\u8d1d\nDeepCloneExample original = new DeepCloneExample(10, new int[]{1, 2, 3});\nDeepCloneExample clone = (DeepCloneExample) original.clone();\n</code></pre> \u867d\u7136<code>deep clone</code>\u53ef\u4ee5\u5b8c\u5168\u72ec\u7acb\u539f\u59cb\u7684\u5bf9\u8c61\uff0c\u4f46\u6548\u7387\u6bd4\u8f83\u4f4e\uff0c\u56e0\u4e3a\u5f53\u4e00\u4e2a\u7c7b\u4e2d\u6240\u5305\u542b\u7684\u5b57\u6bb5\u592a\u591a\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u9012\u5f52\u7684\u62f7\u8d1d\u5c31\u4f1a\u5bfc\u81f4\u6548\u7387\u4f4e\u4e0b\u3002</p>"},{"location":"Tutorial/Java/Java6/#62-lambda-expressions","title":"6.2 Lambda expressions","text":"<p>Why use the Lambda expressions? - A lambda expression is a block of code that you can pass around so it can be executed later, once or multiple times. \u4e00\u4e2a\u4ee3\u7801\u6bb5\uff0c\u4f60\u53ef\u4ee5\u7acb\u523b\u6267\u884c\uff0c\u5e76\u4e14\u6267\u884c\u5f88\u591a\u6b21</p> <p>\u53ef\u80fd\u4f60\u4f1a\u60f3\uff0c\u90a3\u4f60\u8c03\u7528\u51fd\u6570\u591a\u6b21\u4e0d\u4e5f\u662f\u4e00\u6837\u7684\u5417\uff1f\u8fd8\u771f\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3aJava\u662fOOP\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u6240\u6709\u7684<code>method</code>\u90fd\u662f\u57fa\u4e8e<code>class/instance</code>\u7684\uff0c\u90a3\u4e48\u5982\u679c\u4f60\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u591a\u6b21\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u9700\u8981\u91cd\u590d\u521b\u5efa\u5b9e\u4f8b\uff0c\u6700\u597d\u60f3\u5230\u7684\u4f8b\u5b50\u5c31\u662f<code>sort</code>\u4e2d\u7684<code>comparator</code>.\u800c<code>lambda expressions</code>\u5c31\u5f88\u5bb9\u6613\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u8003\u8651\u4e8b\u60c5\u7684\u672c\u8d28\uff1a\u5176\u5b9e\u5c31\u662f\u8ddf\u8bed\u8a00\u7684\u7279\u6027\u606f\u606f\u76f8\u5173\u7684\uff0cJava\u662f\u6700\u5178\u578b\u7684OOP\u8bed\u8a00\uff0c\u90a3\u4e48\u4f60\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u57fa\u4e8eclass/instance\u7684\uff0c\u4f60\u8c03\u7528\u65b9\u6cd5\u5c31\u8981\u8003\u8651\u521b\u5efa\u5bf9\u8c61\u7684\u5f00\u9500</p>"},{"location":"Tutorial/Java/Java6/#622-the-syntax-of-lambda-expressions","title":"6.2.2 The syntax of Lambda Expressions","text":"<ul> <li>we want to compute <code>first.length() - second.length()</code></li> <li>\u7136\u540e\u6211\u4eec\u8003\u8651,<code>first</code>\u548c<code>second</code>\u90fd\u662f<code>String</code>\u7c7b\u578b\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5199\u6210\u8fd9\u6837 <code>(String first,String second) -&gt;first.length()-second.length()</code></li> </ul> <p>\u6bd4\u8f83\u672c\u8d28\u7684\u8868\u8fbe\u5c31\u662f  parameters , the <code>-&gt;</code> arrow, and an expression - Another case is that our expression is a code block  <pre><code>// lambda expression;\n(String first,String second)-&gt;{\n    if(first.length()&lt;second.length())\n        return -1;\n    else if(first.length()&gt;second.length())\n        return 1;\n    return 0;\n}\n</code></pre></p> <ul> <li>if the lambda expression has no parameters that you still supply empty parentheses. <pre><code>()-&gt;{\n    for (int i=0;i&lt;100;i++)\n        System.out.println(i);\n}\n</code></pre></li> </ul> <p></p>"},{"location":"Tutorial/Java/Java6/#623-functional-interfaces","title":"6.2.3 Functional Interfaces","text":"<p>you'd better think of a lambda expression as a function, not an object, and to accept that it can be passed to a functional interface.</p> <p><code>@FunctionalInterface</code>  \u8fd9\u4e2a\u6ce8\u91ca\u7684\u76ee\u7684\u5c31\u662f\u663e\u5f0f\u58f0\u660e\u4e00\u4e2a\u63a5\u53e3\u662f\u51fd\u6570\u5f0f\u63a5\u53e3\u3002\u5982\u679c\u4e00\u4e2a\u63a5\u53e3\u4f7f\u7528\u4e86\u8fd9\u4e2a\u6ce8\u91ca\uff0c\u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u5b83\u53ea\u5305\u542b\u5230\u4e00\u4e2a<code>method</code>.</p> <ul> <li>You can supply a lambda expression whenever an object of an interface with a single abstract method is expected.</li> </ul> <pre><code>var timer = new Timer(1000,event-&gt;{\n    System.out.println(\"At the tone\"+Instance.ofEpochMilli(event.getWhen()));\n});\n</code></pre> <p>Actually,conversion to a functional interfaceis the only thing that you can do with a lambda expression in Java.</p>"},{"location":"Tutorial/Java/Java6/#624-method-references","title":"6.2.4 Method References","text":"<ul> <li>Example 1 :   Sometimes, you may call <code>var timer = new Tiemr(1000,event -&gt; System.out.println(event))</code></li> <li>Example 2:   \u8fd9\u4e2a\u65f6\u5019\uff0c\u65b9\u6cd5\u7684\u5f15\u7528\u5c31\u51fa\u6765\u4e86   <code>var timer = new Timer(1000,System.out::println)</code>   This is called Method Reference,It directs the compiler to produce an instance of a functional interface,overriding the single abstract method of the interface to call the given method. </li> <li>\u53ef\u80fd\u6709\u65f6\u5019\uff0c\u4e00\u4e2a\u51fd\u6570\u7b7e\u540d\u6709\u591a\u4e2a<code>overloading</code>\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u4f7f\u7528<code>method reference</code>\u5c31\u53ef\u4ee5\u8ba9\u7f16\u8bd1\u5668\u53bb\u5e2e\u4f60\u5bfb\u627e\u53ef\u4ee5\u4f7f\u7528\u7684\uff0c\u4f8b\u5982 <code>Max</code>\u5c31\u6709\u4e24\u79cd<code>for integer</code>\u548c<code>for double</code></li> </ul>"},{"location":"Tutorial/Java/Java6/#625-constructor-references","title":"6.2.5 Constructor References","text":"<p>\u50cf Method Reference \u4e00\u6837\uff0c\u5176\u5b9e\u5c31\u662f\u6784\u9020\u51fd\u6570\u7684\u5f15\u7528\u3002</p> <p>\u6211\u4eec\u4f7f\u7528<code>Person[] people = stream.toArray(Person[]::new)</code> \u56e0\u4e3a<code>Person::new</code>\u5c31\u662fconstructor reference.</p>"},{"location":"Tutorial/Java/Java6/#626-variable-scope","title":"6.2.6 Variable Scope","text":"<p>\u5728Lambda\u533f\u540d\u51fd\u6570\u4e2d\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u4e00\u79cd\u60c5\u51b5\uff0c\u5c31\u662f\u4f60\u4f1a\u8fd0\u7528\u5230\u8fd9\u4e2amethod\u57df\u4e2d\u7684\u4f20\u5165\u7684parameters.</p> <p>\u4e0b\u9762\u662f\u4e24\u4e2a\u4f8b\u5b50 <pre><code>// legal\npublic static void reapeatMessage(String text,int delay){\n    ActionListener listener = event -&gt;{\n        System.out.println(text);\n        Toolkit.getDefaultToolkit().beep();\n    };\n    new Timer(delay,listener).start();\n}\n\n// illegal\npublic static void countDown(int start,int delay){\n    ActionListener listener = event -&gt;{\n        start -- ; // error;\n        System.out.println(start);\n    };\n    new Timer(delay,listener).start();\n}\n</code></pre></p> <p>\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u662f\u975e\u6cd5\u7684\uff0c\u867d\u7136Java\u53ef\u4ee5\u6355\u6349\u5230\u65b9\u6cd5\u4e2d\u4f20\u5165\u7684\u53c2\u6570\uff0c\u4f46\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7684\u3002\u5c31\u50cf\u8fd9\u4e2a\u4f20\u5165\u7684<code>start</code>\uff0c\u662f\u4e0d\u53ef\u53d8\u7684\u3002</p> <p>The rule is that any captured variable in a lambda expression must be <code>effectively final</code>.</p>"},{"location":"Tutorial/Java/Java6/#63-inner-class","title":"6.3 Inner class","text":"<p>An inner class is a class that is defined inside another class.</p> <ul> <li>Inner class can be hidden from other class in the same package.</li> <li>Inner class methods can access the data from the scope in which they are defined - include the data that would otherwise be private.</li> </ul>"},{"location":"Tutorial/Java/Java6/#64-service-loaders","title":"6.4 Service Loaders","text":"<p>JDK offers a simple machanism for loading services.</p>"},{"location":"Tutorial/Java/Java7/","title":"Chapter7 Exception","text":"<p>It is time to turn to the mechanisms the Java programming language has for dealing with the real world of bad data and buggy code.</p> <ul> <li>Notify the user of an error</li> <li>Save all work</li> <li>Allow user to gracefully exit the program</li> </ul> <p>Java uses a form of error handling <code>exception handling</code>.</p> <p>When an error occurs that, you might want to 2 cases: - Return to a safe state and enable the user to execute other commands; - Allow the user to save all the works and terminate the program gracefully.</p> <p>\u5f53\u7136\uff0c\u4ee5\u4e0a\u7684\u4e24\u79cd\u60c5\u51b5\u5e76\u4e0d\u5bb9\u6613\uff0c\u56e0\u4e3a\u4fa6\u67e5\u53d1\u751f\u9519\u8bef\u7684\u4ee3\u7801\u548c\u5b9e\u9645\u4e0a\u53d1\u751f\u9519\u8bef\u7684\u4ee3\u7801\u76f8\u53bb\u751a\u8fdc\uff0c\u90a3\u4e48<code>exception handling</code>\u7684\u4f7f\u547d\u5c31\u662f\u5c06\u9519\u8bef\u53d1\u751f\u7684\u63a7\u5236\u6743\u8f6c\u79fb\u5230\u80fd\u591f\u5904\u7406\u9519\u8bef\u7684\u7a0b\u5e8f\u4e0a\u3002\u6240\u4ee5\u4f60\u5e94\u8be5\u63d0\u524d\u7684\u9884\u8ba1\u9519\u8bef\u7684\u53d1\u751f\u3002</p> <p>\u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u603b\u662f\u5bc4\u5e0c\u671b\u4e8e\u8ba9\u9519\u8bef\u5f97\u5230<code>return</code>,\u6bd4\u5982\u5728\u6d4f\u89c8\u6587\u4ef6\u7684\u672b\u5c3e\u7684\u65f6\u5019\uff0c\u4f1a\u8fd4\u56de<code>-1</code>\u3002\u4f46\u4e8b\u5b9e\u4e0a\u5f88\u591a\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u9519\u8bef\u4f1a\u8fd4\u56de\u3002\u6211\u4eec\u4e5f\u65e0\u4ece\u800c\u77e5\u3002\u5728Chapter5\u4e2d\u7684\u65f6\u5019\uff0c\u6211\u4eec\u77e5\u9053\u4e86Java\u4e3a\u6bcf\u4e00\u4e2a<code>method</code>\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u4ee3\u66ff\u7684\u51fa\u53e3\uff0c\u5f53\u5b83\u65e0\u6cd5\u6b63\u5e38\u7684\u5b8c\u6210\u5b83\u7684\u4efb\u52a1\u7684\u65f6\u5019\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5e76\u4e0d\u4f1a\u8fd4\u56de\u4e00\u4e2a<code>expectation value</code>\uff0c\u800c\u662f\u4f1a<code>throws</code>\u4e00\u4e2a\u5bf9\u8c61-&gt;\u5c06\u9519\u8bef\u7684\u4fe1\u606f\u5c01\u88c5\u7684<code>object</code>. \u5f53<code>throws</code>\u4e86\u4e00\u4e2a\u9519\u8bef\u7684\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u91cd\u65b0\u5f00\u59cb\u7a0b\u5e8f\uff0c\u4f46\u8fd9\u65f6\u5019<code>expection handling</code>\u4f1a\u5bfb\u627e\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a<code>object</code>\u7684<code>exception handler</code>.</p>"},{"location":"Tutorial/Java/Java7/#throwable-class","title":"Throwable Class","text":"<p>\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u629b\u51fa\u7684<code>exception</code>\u5bf9\u8c61\u662f\u4e00\u4e2a\u6765\u81ea\u4e8e<code>Throwable</code>\u7c7b\u7684\u5b9e\u4f8b </p> <p>\u4e0a\u9762\u7684\u7c7b\u5206\u6210\u4e86\u4e24\u90e8\u5206\uff0c\u6211\u4eec\u91cd\u70b9\u8003\u8651\u7684\u662f<code>Exception</code>\uff0c\u9996\u5148\uff0c\u8fd9\u91cc\u7684<code>Error</code>\u5176\u5b9e\u5927\u6982\u7387\u662f\u4e0d\u7528\u8003\u8651\u7684\uff0c\u5b83\u66f4\u591a\u662f\u6765\u81ea\u5185\u5728\u7684\u9519\u8bef\uff0c\u4ea6\u6216\u8005\u8bf4\u662f\u6765\u81ea<code>Java runtime System</code>\u4e2d\u7684\u9519\u8bef\u3002\u800c<code>Exception</code>\u4e2d\u7684<code>RuntimeException</code>\u624d\u662f\u6211\u4eec\u771f\u6b63\u5e73\u65f6\u7f16\u7801\u65f6\u5019\u53d1\u751f\u7684\u9519\u8bef\u3002 \u5bf9\u4e8e<code>RuntimeException</code>\u53d1\u751f\u7684\u4e00\u4e9b\u5e38\u89c1\u7684\u9519\u8bef\uff1a - A bad cast \u7c7b\u578b\u8f6c\u5316\u9519\u8bef - An out-of-bounds array access \u6570\u7ec4\u8fb9\u754c\u8d8a\u754c - A null pointer acess \u83b7\u53d6\u4e86\u4e00\u4e2a<code>null</code>\u5bf9\u8c61 \u800c <code>FileCoundNOTFind</code>\u8fd9\u79cd\u9519\u8bef\u5e76\u4e0d\u662f\u53d1\u751f\u5728\u4f60\u4ee3\u7801\u4e0a\u7684\u903b\u8f91/\u8bed\u6cd5\u9519\u8bef\uff0c\u800c\u662f\u5728\u5c1d\u8bd5\u6253\u5f00\u6587\u4ef6\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u53d1\u751f\u9519\u8bef\u4e86\u3002</p>"},{"location":"Tutorial/Java/Java7/#checked-or-unchecked","title":"checked or unchecked","text":"<p>\u6211\u4eec\u8fd9\u91cc\u8003\u8651<code>checked</code>\u7684\u542b\u4e49\uff0c\u5b83\u8868\u793a\u7684\u662f\u5728\u7a0b\u5e8f\u7f16\u8bd1\u8fd0\u884c\u524d\u5c31\u9700\u8981\u8fdb\u884c\u7684\u68c0\u67e5\uff0c\u5b98\u65b9\u7684\u5b9a\u4e49\u662f\uff1a</p> <p>The Java Language Specification calls any exception that derives from the class <code>Error</code> or the class <code>RuntimeException</code> an <code>unchecked</code> exception.All other exceptions are called <code>checked</code> exceptions.</p> <p>\u5f88\u660e\u663e\uff0c\u4f60\u5728\u8fd0\u884cJava\u4ee3\u7801\u4e4b\u524d\uff0c\u4f60\u5e76\u4e0d\u77e5\u9053\u4f60\u4f1a\u9047\u5230\u4ec0\u4e48\u9519\u8bef\uff0c\u8fd9\u4e2a\u662f\u65e0\u6cd5\u88ab<code>checked</code>.\u4f46\u6709\u4e9b\u9519\u8bef\uff0c\u7c7b\u4f3c\u4e8eIO/\u6587\u4ef6\u8bfb\u5165...\u7b49\u9519\u8bef\u662f\u9700\u8981\u5728\u7f16\u8bd1\u524d\u5c31\u53d1\u73b0\u7684\uff0c\u5e76\u4e0d\u662f\u4ee3\u7801\u672c\u8eab\u7684\u903b\u8f91\u53d1\u751f\u7684\u9519\u8bef\uff0c\u8fd9\u4e9b\u9519\u8bef\u662f\u8981<code>checked</code>.</p>"},{"location":"Tutorial/Java/Java7/#declaring-checked-exception","title":"Declaring Checked Exception","text":"<p>The idea is that : a method will not only tell the Java compiler what values it can return, It is also going to tell the compiler what can go wrong. \u63d0\u524d\u544a\u8bc9Java\u53ef\u80fd\u51fa\u9519\u7684\u5730\u65b9\u3002</p> <p><pre><code>public FileInputStream(String name) throws FileNotFoundException;\n</code></pre> \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u662f\u63d0\u793a\u4e86\u7f16\u8bd1\u5668\uff0c\u6211\u4eec\u4f1a\u5bf9\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u6240\u9700\u8981\u8bfb\u53d6\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\u7684\u9519\u8bef\u3002-&gt; Tell the compiler what can go wrong.</p> <p> \u4ee5\u4e0a\u5c31\u662f\u53ef\u80fd\u51fa\u73b0\u7684\u56db\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u7262\u8bb0;</p> <p>If the superclass throws no Exceptions,the subclass must not throw the Exception!</p>"},{"location":"Tutorial/Java/Java7/#catch-the-exception","title":"Catch the Exception","text":"<ul> <li>If any Exception happened in the <code>try</code> block</li> <li>skip the remainder code in the <code>try</code> block and do the <code>catch</code> clause</li> <li>If no exception -&gt;skip</li> </ul> <p>You can catch more than one Exception in the <code>catch</code> clause. <pre><code>try{\n    //access the database\n}catch(SQLException original){\n    throw new ServletException(\"database error: \"+e.getMessage());\n}catch(FileCoundNotFoundException e){\n    System.out.print(e);\n}\n</code></pre></p> <p>\u4e0a\u9762\u663e\u793a\u4e86\u53ef\u4ee5<code>catch</code>\u591a\u4e2a<code>Exceptions</code>; \u4e5f\u53ef\u4ee5<code>rethrow</code>;</p>"},{"location":"Tutorial/Java/Java7/#the-finally-clause","title":"The finally Clause","text":"<p>\u9996\u5148\uff0c\u6211\u4eec\u77e5\u9053\u5f53\u9047\u5230<code>Exception</code>\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u505c\u6b62\u8fd9\u4e2a<code>method</code>\u4e2d\u7684\u8fdb\u7a0b\uff0c\u7136\u540e\u9000\u51fa\u8fd9\u4e2a\u65b9\u6cd5\u3002\u4f46\u8fd9\u91cc\u6709\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u4f60\u5728<code>method</code>\u4e2d\u8fdb\u884c\u4e86\u8d44\u6e90\u7684\u83b7\u53d6\uff0c\u4f46\u4f60\u9000\u51fa\u8fd9\u4e2a\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u9700\u8981\u628a\u8fd9\u4e9b\u8d44\u6e90\u7ed9\u91ca\u653e\u6389\uff0c\u4f46\u662f\u53ea\u6709\u4f60\u5728\u539f\u6765\u7684\u65b9\u6cd5\u4e2d\u624d\u77e5\u9053\u8fd9\u4e9b\u3002\u8fd9\u6837<code>finally</code>\u5b50\u53e5\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p> <pre><code>var in = new FileInputStream(...);\ntry{\n    //1\n}catch(Exception e){//2\n //3\n\n}finally{//4\n    // remember to close the FileInputStream;\n    in.close(); //5\n}\n</code></pre> <p>\u50cf\u4e0a\u8ff0\u7684\uff0c\u5018\u82e5\u6ca1\u6709\u9047\u5230\u95ee\u9898\uff0c\u5728\u5b8c\u6210<code>try clause</code>\u4e2d\u7684\u5185\u5bb9\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7<code>2,3</code>\u7684\u90e8\u5206\uff0c\u76f4\u63a5\u5b8c\u6210<code>finally</code>\u90e8\u5206\u7684\u5185\u5bb9\u3002\u4e5f\u5c31\u662f\u7ed3\u675f\u8d44\u6e90\u3002 </p> <p>Whether it encounters the <code>Exception</code> -&gt; we all need to execute the <code>finally</code> clause.</p>"},{"location":"Tutorial/Java/Java7/#try-with-resource-satement","title":"try-with-resource satement","text":"<p>\u8fd9\u4e2a\u8bed\u53e5\u662f\u7528\u4e8e\u81ea\u52a8\u7ba1\u7406\u8d44\u6e90\uff08\u6587\u4ef6/\u6570\u636e\u5e93\u8fde\u63a5\u7b49\uff09\u7684\u7ed3\u6784</p> <p>\u4f7f\u7528 <code>try-with-resource</code>\u8bed\u53e5\uff0c\u53ef\u4ee5\u786e\u4fdd\u5728\u8bed\u53e5\u7ed3\u675f\u7684\u65f6\u5019\u81ea\u52a8\u5173\u95ed\u8d44\u6e90\uff0c\u907f\u514d\u8d44\u6e90\u6cc4\u6f0f\u3002</p> <p><pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class TryWithResourcesExample {\n    public static void main(String[] args) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"example.txt\"))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n// pattern\ntry(ResourceType resource = new ResourceType()){\n    // \u4f7f\u7528\u8d44\u6e90\u7684\u4ee3\u7801\n}catch(Exception e){\n    // \u5f02\u5e38\u5904\u7406\uff1b\n}\n</code></pre> \u4ee5\u4e00\u8a00\u9274\u4e4b\uff0c\u4e5f\u5c31\u662f\u5728\u4f7f\u7528<code>try</code>\u8bed\u53e5\u7684\u65f6\u5019\u6211\u4eec\u8c03\u7528\u4e86\u83b7\u53d6\u8d44\u6e90\u7684\u8bed\u53e5\uff0c\u5c24\u5176\u662f\u4e00\u4e9b\u8fdb\u884c\u9700\u8981\u663e\u6027\u5173\u95ed\u8d44\u6e90\u7684\u8bed\u53e5\uff0c\u53ef\u4ee5\u8fdb\u884c\u81ea\u52a8\u7684\u8d44\u6e90\u7ba1\u7406\u3002\u65e0\u8bba\u4f1a\u4e0d\u4f1a\u5b8c\u6210\u540e\u7eed\u7684<code>catch</code>,\u90fd\u4f1a\u76f4\u63a5\u7684\u5b8c\u6210<code>close()</code></p>"},{"location":"Tutorial/Java/Java8/","title":"Chapter8 Generic Programming","text":"<p>Why Generic Programming?</p> <p>It means writing code that can be reused for objects of many different types; </p> <p>\u6cdb\u578b\u7f16\u7a0b \u76ee\u7684\u662f\u8ba9\u4ee3\u7801\u53ef\u4ee5\u5177\u6709\u9ad8\u590d\u7528\u6027</p>"},{"location":"Tutorial/Java/Java8/#81-introduce","title":"8.1 Introduce","text":""},{"location":"Tutorial/Java/Java8/#_1","title":"\u4f8b\u5b50","text":"<p><pre><code>public class ArrayList{\n    private Object[] elementData;\n    ...\n    public Object get(int i);\n    public void add(Objct o);\n}\n\n// If we want to use the ArrayList;\nArrayList files = new ArrayList();\nString filename = (String)files.get(0);\nfiles.add(new File(\"...\"));\n\n\n// But with Generic Programming\nvar files = new ArrayList&lt;String&gt;();\n\n// Another way to write;\nArrayList&lt;String&gt; files = new ArrayList&lt;&gt;();\n</code></pre> View the above Code block, that you will see the advantages of Generic Programming:</p> <ol> <li>You can make your code read easier;</li> <li>You can tell right away that this particular array List contains <code>String</code> objects;</li> </ol>"},{"location":"Tutorial/Java/Java8/#82-definite-a-simple-generic-class","title":"8.2 definite a simple generic class","text":"<p>Here is the example code: <pre><code>public class Pair&lt;T&gt;\n{\n private T first;\n private T second;\n\n public Pair() { first = null; second = null; }\n public Pair(T first, T second) { this.first = first; this.second = second; }\n\n public T getFirst() { return first; }\n public T getSecond() { return second; }\n\n public void setFirst(T newValue) { first = newValue; }\n public void setSecond(T newValue) { second = newValue; }\n}\n</code></pre> The <code>Pair</code> class introduces a type variable <code>T</code>, enclosed in angle bracket<code>&lt;&gt;</code>,after the class name. It also allows you to put more than one type name in the bracket. Like :  <code>public class Pair&lt;T,U&gt;{...}</code></p>"},{"location":"Tutorial/Java/Java8/#83-generic-methods","title":"8.3 Generic Methods","text":"<p>You can define generic methods both inside ordinary classes and inside generic classes.</p> <pre><code>class ArrayAlg{\n    public static &lt;T&gt; getMiddle(T .. a){\n        return a[a.length/2];\n    }\n}\n\n// Option 1\nString middle = ArrayAlg.&lt;String&gt;getMiddle(\"John\",\"Q.\",\"Public\");\n\n// Option 2\nString middle = ArrayAlg.getMiddle(\"John\",\"Q.\",\"Public\");\n</code></pre> <p>The above code block is the example</p>"},{"location":"Tutorial/Java/Java8/#84-bounds-for-type-variables","title":"8.4 Bounds for type variables","text":"<p>When you achieve the generic methods with like <code>comparable</code> part, you must give a <code>bound</code> for the type variable <code>T</code>.</p> <pre><code>class ArrayAlg\n{\n    public static &lt;T&gt; T min(T[] a) // almost correct\n    {\n        if (a == null || a.length == 0) \n            return null;\n        T smallest = a[0];\n        for (int i = 1; i &lt; a.length; i++)\n            if (smallest.compareTo(a[i]) &gt; 0) \n                smallest = a[i];\n        return smallest;\n    }\n}\n\n// The above part has a bug that you must define the method like the following\n    public static &lt;T extends Comparable&gt; T min(T[] a);\n// We use an interface to let the type T's params can have the ability to comparable;\n</code></pre>"},{"location":"Tutorial/Java/Java8/#85-generic-code-and-the-virtual-machine","title":"8.5 Generic Code and the virtual machine","text":""},{"location":"Tutorial/Java/Java8/#851-type-erasure","title":"8.5.1 Type Erasure","text":"<p>If the type <code>T</code> has no bounds that it raw type can be the <code>Object</code>. <pre><code>public class Pair\n{\n    private Object first;\n    private Object second;\n    public Pair(Object first, Object second)\n    {\n        this.first = first;\n        this.second = second;\n    }\n    public Object getFirst() { return first; }\n    public Object getSecond() { return second; }\n    public void setFirst(Object newValue) { first = newValue; }\n    public void setSecond(Object newValue) { second = newValue; }\n}\n\n// If we extends the interfaces, the raw type will be interfaces\npublic class Interval&lt;T extends Comparable &amp; Serializable&gt; implements Serializable\n{\n    private T lower;\n    private T upper;\n    . . .\n    public Interval(T first, T second)\n    {\n        if (first.compareTo(second) &lt;= 0){ \n        lower = first; \n        upper = second; \n        }else { \n        lower = second; \n        upper = first; \n        }\n    }\n}\n\npublic class Interval implements Serializable\n{\n private Comparable lower;\n private Comparable upper;\n . . .\n public Interval(Comparable first, Comparable second) { . . . }\n}\n</code></pre> \u6cdb\u578b\u65b9\u6cd5\u5728\u7f16\u8bd1\u524d\u540e\uff0c\u53ea\u4f1a\u7559\u4e0b\u4e00\u4e2a\u65b9\u6cd5\uff0c\u7c7b\u578b\u7528<code>Object</code>\u6216\u8005 <code>Comparable</code> \u8fb9\u754c\u7c7b\u578b\u66ff\u6362\uff0c\u4f46\u662f\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u5f71\u54cd:</p> <ol> <li>\u7c7b\u578b\u64e6\u9664\u540e\uff0c\u8303\u578b\u4fe1\u606f\u4f1a\u5728\u5b57\u8282\u7801\u79cd\u4e22\u5931 (\u56e0\u4e3a\u865a\u62df\u673a\u4e2d\u6ca1\u6709\u6cdb\u578b\u8fd9\u4e2a\u6982\u5ff5)</li> <li>\u6240\u6709\u6cdb\u578b\u76f8\u5173\u7684\u64cd\u4f5c\u53ea\u80fd\u4f9d\u8d56\u8fd0\u884c\u65f6\u5019\u7684\u7c7b\u578b\u4fe1\u606f</li> </ol>"},{"location":"Tutorial/Java/Java8/#with-bridge-methods","title":"\u6cdb\u578b\u7c7b\u578b\u64e6\u9664\u4e0e\u65b9\u6cd5\u51b2\u7a81 (with Bridge Methods)","text":"<p>\u4ec0\u4e48\u662f\u6cdb\u578b\u7c7b\u578b\u64e6\u9664\u65f6\u5019\u7684\u65b9\u6cd5\u51b2\u7a81\uff1f</p> <p><code>public void setSecond(LocalData second)</code>  \u5728\u7c7b<code>DataInterval</code>\u4e2d\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4ece<code>Pair&lt;LocalData&gt;</code> \u4e2d\u7ee7\u627f\u7684\uff0c\u4f46\u6211\u4eec\u6709\u989d\u5916\u7684\u58f0\u660e\uff0c\u90a3\u5c31\u662f \u8fd9\u4e2a\u65b9\u6cd5\u7684\u4f5c\u7528\u662f\u4e3a\u5bf9\u8c61\u8bbe\u7f6e\u7b2c\u4e8c\u4e2a\u65e5\u671f\u503c\uff0c\u540c\u65f6\u786e\u4fdd\u7b2c\u4e8c\u4e2a\u4e0d\u5c0f\u4e8e\u7b2c\u4e00\u4e2a\u503c\uff0c\u4f46\u662f\u5728\u7c7b\u578b\u7684\u64e6\u9664\u7684\u65f6\u5019\uff0c\u65b9\u6cd5\u4f1a\u53d1\u751f\u6cdb\u578b\u51b2\u7a81\u3002</p> <p><code>public void setSecone(Object second)</code>.\u56e0\u6b64\uff0c\u5728\u7c7b\u578b\u64e6\u9664\u540e\uff0c<code>DateInterval</code> \u7c7b\u4f1a\u6709\u4e24\u4e2a <code>setSecond</code> \u65b9\u6cd5\uff1a</p> <ul> <li>\u4e00\u4e2a\u662f\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u7684\uff1a<code>public void setSecond(LocalDate second)</code></li> <li>\u4e00\u4e2a\u662f\u4ece\u7236\u7c7b\u4e2d\u7ee7\u627f\u7684\uff1a<code>public void setSecond(Object second)</code></li> </ul> <p>\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e0b <code>Bridge Methods</code> \u6865\u63a5\u65b9\u6cd5 \u4e3a\u4e86\u89e3\u51b3\u4e0a\u8ff0\u56e0\u4e3a\u6cdb\u578b\u64e6\u51fa\u8fc7\u540e\u4ea7\u751f\u7684\u591a\u6001\u95ee\u9898\uff0c\u7f16\u8bd1\u5668\u4f1a\u751f\u6210\u4e00\u4e2a<code>\u6865\u63a5\u65b9\u6cd5</code> <pre><code>public void setSecond(Object second) {\n    setSecond((LocalDate) second);\n}\n\nPair&lt;LocalDate&gt; pair = new DateInterval();\npair.setSecond(aDate);\n</code></pre> - \u7531\u4e8e <code>pair</code> \u662f <code>Pair&lt;LocalDate&gt;</code> \u7c7b\u578b\uff0c\u56e0\u6b64\u8c03\u7528\u7684\u662f <code>setSecond(Object)</code> \u65b9\u6cd5\u3002 - \u4f46\u5b9e\u9645\u8fd0\u884c\u65f6\uff0c<code>pair</code> \u5f15\u7528\u7684\u662f <code>DateInterval</code> \u5bf9\u8c61\u3002 - \u865a\u62df\u673a\u4f1a\u8c03\u7528 <code>DateInterval.setSecond(Object)</code>\uff0c\u5373\u6865\u63a5\u65b9\u6cd5\u3002 - \u6865\u63a5\u65b9\u6cd5\u5185\u90e8\u4f1a\u5c06 <code>Object</code>\u53c2\u6570\u5f3a\u5236\u8f6c\u6362\u4e3a <code>LocalDate</code>\uff0c\u5e76\u8c03\u7528\u771f\u6b63\u7684 <code>DateInterval.setSecond(LocalDate)</code> \u65b9\u6cd5\u3002</p> <p>Summary : </p> <ol> <li>\u6cdb\u578b\u5728\u865a\u62df\u673a\u4e2d\u4e0d\u5b58\u5728\uff0c\u6cdb\u578b\u53ea\u662f\u7f16\u8bd1\u5668\u7684\u4e00\u4e2a\u8bed\u6cd5\u7cd6</li> <li>\u7c7b\u578b\u53c2\u6570\u4f1a\u88ab\u8fb9\u754c\u53c2\u6570\u66ff\u4ee3</li> <li>\u6865\u63a5\u65b9\u6cd5\u6765\u89e3\u51b3\u51b2\u7a81\u7684\u95ee\u9898</li> </ol>"},{"location":"Tutorial/Java/Java8/#syntactic-sugar","title":"Syntactic Sugar \u8bed\u6cd5\u7cd6","text":"<p>Here is the wiki reference: In computer science, syntactic sugar is syntax within a programming language that is designed to make things easier to read or to express. It makes the language \"sweeter\" for human use: things can be expressed more clearly, more concisely, or in an alternative style that some may prefer. Syntactic sugar is usually a shorthand for a common operation that could also be expressed in an alternate, more verbose, form: The programmer has a choice of whether to use the shorter form or the longer form, but will usually use the shorter form since it is shorter and easier to type and read.</p> <p>For example, many programming languages provide special syntax for referencing and updating array elements. Abstractly, an array reference is a procedure of two arguments: an array and a subscript vector, which could be expressed as <code>get_array(Array, vector(i,j))</code>. Instead, many languages provide syntax such as <code>Array[i,j]</code>. Similarly an array element update is a procedure consisting of three arguments, for example <code>set_array(Array, vector(i,j), value)</code>, but many languages also provide syntax such as <code>Array[i,j] = value</code>.</p> <p>A construct in a language is syntactic sugar if it can be removed from the language without any effect on what the language can do: functionality and expressive power will remain the same.</p> <p>Language processors, including compilers and static analyzers, often expand sugared constructs into their more verbose equivalents before processing, a process sometimes called \"desugaring\".</p> <p>\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u8bed\u6cd5\u7cd6\u662f\u7f16\u8bd1\u8bed\u8a00\u65b0\u589e\u7684\u7279\u6027\uff0c\u6307\u7684\u662f\u4e00\u4e9b\u5bf9\u5f00\u53d1\u8005\u66f4\u52a0\u53cb\u597d\u3001\u66f4\u6613\u4e8e\u4e66\u5199\u6216\u7406\u89e3\u7684\u8bed\u6cd5\uff0c\u4e0d\u4f1a\u589e\u52a0\u8bed\u8a00\u672c\u8eab\u7684\u529f\u80fd\uff0c\u8fd9\u4e9b\u8bed\u6cd5\u7279\u6027\u5728\u7f16\u8bd1\u6216\u8fd0\u884c\u7684\u65f6\u5019\u7edf\u7edf\u4f1a\u5457\u8f6c\u5316\u4e3a\u66f4\u52a0\u5e95\u5c42\u7684\u3001\u66f4\u57fa\u7840\u7684\u8bed\u8a00\u7ed3\u6784\u3002 \u4ee5\u4e00\u8a00\u853d\u4e4b\uff0c\u8bed\u6cd5\u7cd6\uff0c\u5c31\u662f\u8ba9\u4ee3\u7801\u66f4\u52a0\u4f18\u96c5\uff0c\u66f4\u7b80\u4fbf\u7684\u5c01\u88c5\u3002</p> <p>\u4e0a\u9762\u6cdb\u578b\u7684\u4f8b\u5b50\u5176\u5b9e\u5c31\u662f\uff0c\u5728Java\u7684\u865a\u62df\u673a\u4e2d\u4e0d\u5b58\u5728\u6cdb\u578b\uff0c\u53ea\u5b58\u5728\u666e\u901a\u7684\u7c7b\u548c\u65b9\u6cd5\uff0c\u56e0\u6b64\u8fd9\u4e2a\u6cdb\u578b\u5c31\u53d8\u6210\u4e86\u5bf9\u4e8e\u5f00\u53d1\u8005\u66f4\u53cb\u597d\u7684\u4e00\u79cdJava\u7684\u7279\u6027\uff0c\u4ec5\u6b64\u800c\u5df2\u3002</p>"},{"location":"Tutorial/Java/Java8/#86-restrictions-and-limitations","title":"8.6 Restrictions and Limitations","text":"<ol> <li> <p>Type parameters cannot be instantiated with <code>primitive types</code>, only can be used <code>wrapper types</code>.</p> <ol> <li><code>Pair&lt;Double&gt;</code> \u4e0d\u80fd\u88ab\u5199\u6210<code>Pair&lt;double&gt;</code> </li> </ol> </li> <li> <p>Runtime type inquiry only works with raw type</p> </li> <li> <p>You cannot Create Arrays of Parameterized Types</p> <p>What you can do, is to used the <code>ArrayList</code> to replace the <code>Array</code>.</p> </li> <li> <p>Varargs Warnings</p> </li> <li>Type Variables are not Valid in StaticContexts of Generic Classes</li> </ol> <p>... \u8fd8\u6709\u5f88\u591a\u9650\u5236 \u5c31\u4e0d\u4e00\u4e00\u7f57\u5217\u4e86</p>"},{"location":"Tutorial/Java/Java8/#87-inheritance-rules-for-generic-types","title":"8.7 Inheritance Rules for Generic Types","text":"<p>In general, there is no relationship between <code>Pair&lt;S&gt;</code> and <code>Pair&lt;T&gt;</code>, no matter how <code>S</code> and <code>T</code> are related.</p> <p>The following is an illegal code: <pre><code>Manager[] topHonchos = ... ;\nPair&lt;Employee&gt; result = ArrayAlg.minmax(topHonchos); // error\n</code></pre></p> <p>The <code>minmax</code> returns a <code>Pair&lt;Manager&gt;</code>, not a <code>Pair&lt;Employee&gt;</code> </p>"},{"location":"Tutorial/Java/Java8/#88-wildcard-types","title":"8.8 Wildcard Types \u901a\u914d\u7b26\u7c7b\u578b","text":"<p>\u5728 Java \u4e2d\uff0c\u901a\u914d\u7b26\u7c7b\u578b<code>\uff08Wildcard Types\uff09</code> \u662f\u6cdb\u578b\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u63d0\u9ad8\u6cdb\u578b\u7684\u7075\u6d3b\u6027\u3002\u901a\u914d\u7b26\u7684\u4f5c\u7528\u662f\u5bf9\u6cdb\u578b\u7684\u7c7b\u578b\u53c2\u6570\u8fdb\u884c\u4e00\u5b9a\u7a0b\u5ea6\u7684\u201c\u6a21\u7cca\u5339\u914d\u201d\uff0c\u4ee5\u9002\u5e94\u66f4\u591a\u7684\u573a\u666f\u3002\u4ee5\u4e0b\u662f\u5bf9\u901a\u914d\u7b26\u7c7b\u578b\u7684\u8be6\u7ec6\u4ecb\u7ecd\uff1a </p>"},{"location":"Tutorial/Java/Java8/#_2","title":"\u901a\u914d\u7b26\u7684\u5206\u7c7b","text":""},{"location":"Tutorial/Java/Java8/#_3","title":"\u65e0\u754c\u901a\u914d\u7b26 <code>?</code>","text":"<p>\u8868\u793a\u7684\u662f\u4efb\u610f\u7c7b\u578b\uff0c\u6ca1\u6709\u9650\u5236\uff0c\u5c24\u5176\u662f\u4f60\u53ea\u5173\u7cfb\u5176\u6570\u636e\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\u7684\u65f6\u5019,\u53ea\u9700\u8981\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u5f80\u96c6\u5408\u4e2d\u5199\u5165\u6570\u636e\u3002 <pre><code>public void printList(List&lt;?&gt; list){\n    for(Object obj : list){\n        System.out.println(obj);\n    }\n}\n</code></pre></p>"},{"location":"Tutorial/Java/Java8/#_4","title":"\u6709\u754c\u901a\u914d\u7b26","text":""},{"location":"Tutorial/Java/Java8/#extends-t","title":"\u4e0a\u754c\u901a\u914d\u7b26 <code>? extends T</code>","text":"<p>\u8868\u793a\u7684\u662f\u901a\u914d\u7b26\u662f\u67d0\u4e2a\u7c7b\u578b<code>T</code>\u7684\u5b50\u7c7b\uff08\u5305\u62ec<code>T</code>\u672c\u8eab\uff09</p> <pre><code>public void processNUmbers(List&lt;? extends Number&gt; list){\n    for(Number number : list){\n        System.out.println(number.doubleValue());\n    }\n}\n</code></pre> <ul> <li><code>List&lt;? extends Number&gt;</code>\u8868\u793a\u53ef\u4ee5\u63a5\u53d7 <code>List</code> \u7684\u6cdb\u578b\u7c7b\u578b\u4e3a <code>Number</code> \u6216 <code>Number</code> \u7684\u5b50\u7c7b\uff0c\u4f8b\u5982 <code>List&lt;Integer&gt;</code> \u6216 <code>List&lt;Double&gt;</code>\u3002</li> <li>\u8bfb\u53d6\uff1a \u53ef\u4ee5\u5b89\u5168\u5730\u8bfb\u53d6\u6570\u636e\uff0c\u7c7b\u578b\u4fdd\u8bc1\u662f <code>Number</code> \u6216\u5176\u5b50\u7c7b\u3002</li> <li>\u5199\u5165\uff1a \u4e0d\u80fd\u5b89\u5168\u5730\u5199\u5165\uff0c\u9664\u4e86 <code>null</code>\u3002</li> </ul>"},{"location":"Tutorial/Java/Java8/#super-t","title":"\u4e0b\u754c\u901a\u914d\u7b26  &lt;? super T&gt;","text":"<p>\u8868\u793a\u7684\u662f\u67d0\u4e2a\u7c7b\u578b<code>T</code>\u7684\u7236\u7c7b\uff0c(\u5305\u62ec<code>T</code>\u672c\u8eab) \u548c\u4e0a\u8ff0\u540c\u7406\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002</p> <p>\u5728\u4e0a\u9762\u4ecb\u7ecd\u4e86\u51e0\u79cd\u901a\u914d\u7b26\uff0c\u5f88\u81ea\u7136\u7684\u5c31\u77e5\u9053\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e0a\u754c\u901a\u914d\u7b26\u7528\u4e8e\u53ea\u8bfb\u7684\u64cd\u4f5c\uff0c\u800c\u5bf9\u4e8e\u4e0b\u754c\u901a\u914d\u7b26\u7684\u65f6\u5019\uff0c\u8fdb\u884c\u53ea\u5199\u7684\u64cd\u4f5c\uff08\u4e0b\u754c\u901a\u914d\u7b26\u4fdd\u8bc1\u4e86\u5199\u5165\u7684\u7c7b\u578b\u4e00\u5b9a\u662f\u672c\u8eab\u6216\u8005\u7236\u7c7b\u7684\u60c5\u51b5\uff09\u3002</p>"},{"location":"Tutorial/Java/Java8/#89-reflection-and-generics","title":"8.9 Reflection and Generics","text":"<p>Reflection lets you anaylyze arbitrary objects at runtime, but if the objects are instances of generic classes, you don't get much information about the generic type parameters because they have been erased.</p>"},{"location":"Tutorial/Java/Java8/#_5","title":"\u53cd\u5c04\u5982\u4f55\u83b7\u5f97\u6cdb\u578b\u7684\u4fe1\u606f","text":""},{"location":"Tutorial/Java/Java8/#1","title":"1. \u83b7\u53d6\u7c7b\u7684\u6cdb\u578b\u4fe1\u606f","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u53cd\u5c04\u4e2d\u7684 <code>Type</code> \u548c <code>ParameterizedType</code>\u63a5\u53e3\u6765\u83b7\u53d6\u6cdb\u578b\u7684\u5177\u4f53\u7c7b\u578b</p>"},{"location":"Tutorial/Java/Java8/#2","title":"2. \u53ef\u4ee5\u83b7\u53d6\u5b57\u6bb5\u7684\u6cdb\u578b\u7c7b\u578b","text":""},{"location":"Tutorial/Java/Java8/#3","title":"3. \u53ef\u4ee5\u83b7\u53d6\u65b9\u6cd5\u7684\u6cdb\u578b\u4fe1\u606f","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u3001\u53c2\u6570\u6216\u58f0\u660e\u7684\u6cdb\u578b\u7c7b\u578b</p>"},{"location":"Tutorial/Java/Java9/","title":"Chapter9 Collections","text":"<p>\u96c6\u5408\u7c7b \uff1a\u611f\u89c9\u6709\u70b9\u50cf <code>Cpp</code> \u4e2d\u7684 <code>stl</code> \u4e0b\u9762\u662f\u5b98\u65b9\u7684\u5b9a\u4e49 \uff1a</p> <p>The java library can help you accomplish the traditional data structuring needed for serious programming. \u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5e93\u65b9\u4fbf\u6211\u4eec\u6765\u8c03\u7528\u4f20\u7edf\u7684\u6570\u636e\u7ed3\u6784\u3002 </p>"},{"location":"Tutorial/Java/Java9/#introduce","title":"Introduce","text":"<p>\u6211\u4eec\u8fd9\u91cc\u533a\u5206\u4e24\u4e2a\u6982\u5ff5 <code>Collection</code> \u548c <code>Collections</code></p> <ul> <li><code>Collection</code> : \u8868\u793a\u7684\u662fJava\u96c6\u5408\u6846\u67b6\u7684\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b83\u662f\u6240\u6709\u96c6\u5408\u7c7b\u7684\u57fa\u7840\u63a5\u53e3\u3002\u5b83\u5b9a\u4e49\u4e86\u4e00\u7ec4\u901a\u7528\u7684\u64cd\u4f5c\u548c\u65b9\u6cd5\uff0c\u5982\u6dfb\u52a0\u3001\u5220\u9664\u3001\u904d\u5386\u7b49\uff0c\u7528\u4e8e\u7ba1\u7406\u4e00\u7ec4\u5bf9\u8c61\u3002<code>Collection</code> \u63a5\u53e3\u6709\u8bb8\u591a<code>Implementations</code> \u5982 <code>List</code>,<code>Set</code>\u548c<code>Queue</code>.</li> <li><code>Collections</code> : \u8868\u793a\u7684\u662fJava\u63d0\u4f9b\u7684\u4e00\u4e2a\u5de5\u5177\u7c7b\uff0c\u4f4d\u4e8e<code>java.util</code>\u5305\u4e2d\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u9759\u6001\u65b9\u6cd5\uff0c\u7528\u4e8e\u5bf9\u96c6\u5408\u8fdb\u884c\u64cd\u4f5c\u548c\u7b97\u6cd5\u3002<code>Collections</code>\u4e2d\u5305\u542b\u7684\u5305\u62ec<code>Sorting</code>,<code>Search</code>,<code>Reverse</code>...\u7b49\u7b97\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7b49\u5b9e\u73b0\u4e86<code>Collection</code>\u63a5\u53e3\u96c6\u5408\u7684\u7b97\u6cd5\u3002</li> </ul> <p>\u63a5\u7740\uff0c\u6211\u4eec\u533a\u5206\u4e24\u4e2a\u6982\u5ff5 <code>\u6570\u7ec4</code> \u548c <code>\u96c6\u5408</code>\u3002\u4e8c\u8005\u7684\u533a\u522b\uff1a</p> <ul> <li>\u6570\u7ec4\u662f\u56fa\u5b9a\u7684\u957f\u5ea6\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e00\u65e6\u521b\u5efa\u957f\u5ea6\u5c31\u65e0\u6cd5\u6539\u53d8\uff0c\u800c\u96c6\u5408\u662f\u52a8\u6001\u957f\u5ea6\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u52a8\u6001\u7684\u8c03\u6574\u957f\u5ea6\u3002 </li> <li>\u6570\u7ec4\u53ef\u4ee5\u5305\u542b <code>primitive type</code> \u548c <code>Object</code>\uff0c\u96c6\u5408\u4e2d\u53ea\u80fd\u5305\u542b<code>Object</code>\u3002</li> <li>\u6570\u7ec4\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5143\u7d20\uff0c\u96c6\u5408\u9700\u8981\u901a\u8fc7\u8fed\u4ee3\u5668\u6216\u8005\u5176\u4ed6\u65b9\u6cd5\u8bbf\u95ee\u5143\u7d20\u3002</li> </ul> <p></p>"},{"location":"Tutorial/Java/Java9/#91-the-java-collections-framework","title":"9.1 The Java Collections Framework","text":""},{"location":"Tutorial/Java/Java9/#911-collection-interfaces-and-implementation","title":"9.1.1 Collection Interfaces and Implementation","text":"<p>\u533a\u5206\u63a5\u53e3\u548c\u5b9e\u73b0\u7c7b</p> <ul> <li><code>\u63a5\u53e3</code> : \u5b9a\u4e49\u4e86\u96c6\u5408\u7684\u884c\u4e3a\u548c\u64cd\u4f5c</li> <li><code>\u5b9e\u73b0\u7c7b</code> : \u63d0\u4f9b\u4e86\u63a5\u53e3\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u51b3\u5b9a\u4e86\u96c6\u5408\u7684\u5b58\u50a8\u65b9\u5f0f\u548c\u6027\u80fd</li> </ul> <p>\u6211\u4eec\u770b\u4e0a\u56fe\uff0c\u5728<code>Collection</code>\u4e0b\u9762\u7684\u90a3\u4e00\u5c42 <code>List</code> \u3001<code>Set</code> \u3001<code>Queue</code> \u3001<code>Map</code>\u5c31\u662f\u4e3a\u63a5\u53e3\u800c\u4e0b\u9762\u7684\u5185\u5bb9\u5c31\u662f\u57fa\u4e8e\u4ee5\u4e0a\u63a5\u53e3\u7684\u5177\u4f53\u5b9e\u73b0\u7c7b\u3002</p>"},{"location":"Tutorial/Java/Java9/#collection","title":"Collection","text":"<p>\u9996\u5148\u662f <code>Collection</code> \u63a5\u53e3\uff0c\u5b83\u662f\u96c6\u5408\u6846\u67b6\u7684\u9876\u5c42\u63a5\u53e3\uff0c\u5b83\u5b9a\u4e49\u4e86\u57fa\u672c\u7684\u96c6\u5408\u64cd\u4f5c</p> <ol> <li><code>add(E e)</code></li> <li><code>remove(Object o)</code></li> <li><code>iterator()</code> </li> </ol>"},{"location":"Tutorial/Java/Java9/#list","title":"List","text":"<p><code>List</code> \u662f\u6709\u5e8f\u7684Collection\uff0c\u4f7f\u7528\u6b64\u63a5\u53e3\u53ef\u4ee5\u7cbe\u51c6\u7684\u63a7\u5236\u6bcf\u4e2a\u5143\u7d20\u7684\u63d2\u5165\u4f4d\u7f6e\uff0c\u7528\u6237\u80fd\u6839\u636e\u7d22\u5f15\u8bbf\u95ee<code>List</code>\u4e2d\u7684\u5143\u7d20\uff0c\u5c5e\u4e8e<code>List</code>\u7684\u57fa\u672c\u64cd\u4f5c</p> <ul> <li><code>get(int index)</code> \u83b7\u5f97 <code>this.index = index</code> \u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20</li> <li><code>add(int index, E element)</code> \u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20</li> <li><code>set(int index, E element)</code> \u66ff\u6362\u6307\u5b9a\u7d22\u5f15\u7684\u5143\u7d20</li> </ul> <p>\u5e38\u89c1\u7684 <code>List</code> \u7684\u5b9e\u73b0\u7c7b\u6709\uff1a 1. <code>ArrayList</code> 2. <code>LinkedList</code> 3. <code>Vector</code> (\u8fc7\u65f6\uff0c\u4f46\u662f\u7ebf\u7a0b\u5b89\u5168)</p>"},{"location":"Tutorial/Java/Java9/#set","title":"Set","text":"<p><code>Set</code> \u8868\u793a\u7684\u662f\u4e00\u4e2a\u65e0\u5e8f\u7684\u96c6\u5408\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u91cd\u590d\u5143\u7d20</p> <p>\u5e38\u89c1\u7684<code>Set</code>\u7684\u5b9e\u73b0\u7c7b\u6709\uff1a</p> <ol> <li><code>HashSet</code> \u57fa\u4e8e\u54c8\u5e0c\u8868\u5b9e\u73b0</li> <li><code>LinkedHashSet</code> \u57fa\u4e8e\u54c8\u5e0c\u8868\uff0c\u7ef4\u62a4\u63d2\u5165\u987a\u5e8f</li> <li><code>TreeSet</code> \u57fa\u4e8e\u7ea2\u9ed1\u6811\uff0c\u800c\u4e14\u5143\u7d20\u6709\u5e8f</li> </ol>"},{"location":"Tutorial/Java/Java9/#map","title":"Map","text":"<p><code>Map</code> \u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u63a5\u53e3\uff0c\u5e76\u4e0d\u7ee7\u627f<code>Collection</code>\u63a5\u53e3\u3002<code>Map</code>\u8868\u793a\u952e\u503c\u5bf9(KV)\u6a21\u578b\u7684\u6620\u5c04\uff0c\u5141\u8bb8\u6211\u4eec\u5b58\u50a8\u548c\u64cd\u4f5c\u57fa\u4e8e\u952e\u7684\u5143\u7d20\u96c6\u5408 \uff08\u952e\u4e0d\u80fd\u91cd\u590d\uff0c\u4f46\u662f\u503c\u53ef\u4ee5\u91cd\u590d\uff09</p> <p>\u5e38\u89c1\u7684\u64cd\u4f5c \uff1a </p> <ol> <li>\u589e\u52a0\u952e\u503c\u5bf9 <code>put(K key,V value)</code></li> <li>\u6839\u636e\u952e\u67e5\u503c <code>get(Object key)</code></li> <li>\u5220\u9664\u952e\u503c\u5bf9 <code>remove(Object key)</code></li> </ol> <p>\u5e38\u89c1\u7684<code>Map</code>\u7684\u5b9e\u73b0\u7c7b</p> <ol> <li><code>HashMap</code></li> <li><code>LinkedHashMap</code></li> <li><code>TreeMap</code> </li> </ol>"},{"location":"Tutorial/Java/Java9/#queue","title":"Queue","text":"<p>\u961f\u5217\u662f\u57fa\u4e8e<code>Collection</code>\u63a5\u53e3\u7684\u7ee7\u627f\u63a5\u53e3,\u5e38\u89c1\u7684\u64cd\u4f5c\u6709 :</p> <p>\u8868\u793a\u4e00\u4e2a\u961f\u5217\uff0c\u9075\u5faa<code>FIFO</code>\u5148\u8fdb\u5148\u51fa\u7684\u539f\u5219</p> <p>\u65b9\u6cd5 \uff1a </p> <ul> <li><code>add(E e)/offer(E e)</code> \u5411\u961f\u5217\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20</li> <li><code>poll()</code> \u4ece\u961f\u5934\u83b7\u53d6\u5e76\u79fb\u9664\u5143\u7d20</li> <li><code>peek()</code> \u4ece\u961f\u5934\u83b7\u53d6\u4f46\u4e0d\u79fb\u9664</li> </ul> <p>\u8fd9\u91cc\u7684 <code>poll()</code> \u548c <code>peek()</code> \u5176\u5b9e\u6709\u70b9\u7c7b\u4f3c <code>top()</code> \u548c <code>pop()</code> \u533a\u522b\u662f\u5426\u79fb\u9664\u9876\u90e8\u5143\u7d20</p> <p>\u5e38\u89c1\u7684\u5b9e\u73b0\u7c7b \uff1a  - <code>PriorityQueue</code>  - <code>LinkedList</code> \u540c\u65f6\u5b9e\u73b0\u4e86 <code>List</code> \u548c <code>Queue</code></p>"}]}